From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: HaHaWTH <id_cn00@outlook.com>
Date: Sun, 7 Apr 2024 20:52:33 +0800
Subject: [PATCH] virtual-thread-for-network-io


diff --git a/src/main/java/com/homomc/beast/BeastConfig.java b/src/main/java/com/homomc/beast/BeastConfig.java
index 85e777c8dd89e99abe55aa4785546f4e6aec565b..98baf5ea5f3691c1ffeb92dd5f3d61a0c93b3622 100644
--- a/src/main/java/com/homomc/beast/BeastConfig.java
+++ b/src/main/java/com/homomc/beast/BeastConfig.java
@@ -156,6 +156,12 @@ public class BeastConfig {
         virtualThreadForScheduler = getBoolean("virtual-thread-for-scheduler", false);
     }
 
+    public static boolean virtualThreadForNetworkIO;
+
+    private static void virtualThreadForNetworkIO() {
+        virtualThreadForNetworkIO = getBoolean("virtual-thread-for-network-io", false);
+    }
+
     public static int portalTravelCacheLife;
     public static boolean portalTravelInstantExpire;
     private static void portalTravel() {
diff --git a/src/main/java/net/minecraft/server/ServerConnection.java b/src/main/java/net/minecraft/server/ServerConnection.java
index 1f3a753bc83e62873b70857bc5a3ae227ebbdeeb..3de9be40027b8c428e4ffd8252a6dcad64b07cff 100644
--- a/src/main/java/net/minecraft/server/ServerConnection.java
+++ b/src/main/java/net/minecraft/server/ServerConnection.java
@@ -2,6 +2,7 @@ package net.minecraft.server;
 
 import com.google.common.collect.Lists;
 import com.google.common.util.concurrent.ThreadFactoryBuilder;
+import com.homomc.beast.virtualthreads.VirtualThreadService;
 import io.netty.bootstrap.ServerBootstrap;
 import io.netty.channel.Channel;
 import io.netty.channel.ChannelException;
@@ -23,6 +24,8 @@ import java.net.InetAddress;
 import java.util.Collections;
 import java.util.Iterator;
 import java.util.List;
+import java.util.concurrent.ThreadFactory;
+
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
@@ -31,6 +34,14 @@ public class ServerConnection {
     private static final Logger e = LogManager.getLogger();
     public static final LazyInitVar<NioEventLoopGroup> a = new LazyInitVar() {
         protected NioEventLoopGroup a() {
+            if (VirtualThreadService.getJavaMajorVersion() >= VirtualThreadService.minimumJavaMajorVersionWithoutFeaturePreview && com.homomc.beast.BeastConfig.virtualThreadForNetworkIO) {
+                try {
+                    ThreadFactory threadFactory = VirtualThreadService.get().createFactory();
+                    return new NioEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Server IO #%d").setDaemon(true).setThreadFactory(threadFactory).build());
+                } catch (Exception ex) {
+                    e.error("Failed to create Virtual Thread executor! Fallback to default executor.");
+                }
+            }
             return new NioEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Server IO #%d").setDaemon(true).build());
         }
 
@@ -40,6 +51,14 @@ public class ServerConnection {
     };
     public static final LazyInitVar<EpollEventLoopGroup> b = new LazyInitVar() {
         protected EpollEventLoopGroup a() {
+            if (VirtualThreadService.getJavaMajorVersion() >= VirtualThreadService.minimumJavaMajorVersionWithoutFeaturePreview && com.homomc.beast.BeastConfig.virtualThreadForNetworkIO) {
+                try {
+                    ThreadFactory threadFactory = VirtualThreadService.get().createFactory();
+                    return new EpollEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Epoll Server IO #%d").setDaemon(true).setThreadFactory(threadFactory).build());
+                } catch (Exception ex) {
+                    e.error("Failed to create Virtual Thread executor! Fallback to default executor.");
+                }
+            }
             return new EpollEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Epoll Server IO #%d").setDaemon(true).build());
         }
 
@@ -49,6 +68,14 @@ public class ServerConnection {
     };
     public static final LazyInitVar<LocalEventLoopGroup> c = new LazyInitVar() {
         protected LocalEventLoopGroup a() {
+            if (VirtualThreadService.getJavaMajorVersion() >= VirtualThreadService.minimumJavaMajorVersionWithoutFeaturePreview && com.homomc.beast.BeastConfig.virtualThreadForNetworkIO) {
+                try {
+                    ThreadFactory threadFactory = VirtualThreadService.get().createFactory();
+                    return new LocalEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Local Server IO #%d").setDaemon(true).setThreadFactory(threadFactory).build());
+                } catch (Exception ex) {
+                    e.error("Failed to create Virtual Thread executor! Fallback to default executor.");
+                }
+            }
             return new LocalEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Local Server IO #%d").setDaemon(true).build());
         }
 

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: HaHaWTH <id_cn00@outlook.com>
Date: Fri, 5 Apr 2024 13:33:15 +0800
Subject: [PATCH] refactor-to-beast


diff --git a/src/main/java/com/destroystokyo/paper/PaperCommand.java b/src/main/java/com/destroystokyo/paper/PaperCommand.java
index 41d6fbc96c874fc84d4d9a08e99180468d487d5a..b011a502e1a906573e78d83cb87965520c58fdaf 100644
--- a/src/main/java/com/destroystokyo/paper/PaperCommand.java
+++ b/src/main/java/com/destroystokyo/paper/PaperCommand.java
@@ -1,6 +1,7 @@
 package com.destroystokyo.paper;
 
 import com.google.common.collect.Maps;
+import com.homomc.beast.WorldConfigCache;
 import net.minecraft.server.*;
 import org.apache.commons.lang3.tuple.MutablePair;
 import org.apache.commons.lang3.tuple.Pair;
@@ -154,7 +155,7 @@ public class PaperCommand extends Command {
                             .sorted((a, b) -> !a.getRight().equals(b.getRight()) ? b.getRight() - a.getRight() : a.getKey().toString().compareTo(b.getKey().toString()))
                             .collect(Collectors.toList());
 
-                    if (info.size() == 0) { // Reaper - Optimize
+                    if (info.size() == 0) { // Beast - Optimize
                         sender.sendMessage(ChatColor.RED + "No entities found.");
                         return;
                     }
@@ -187,7 +188,7 @@ public class PaperCommand extends Command {
         for (WorldServer world : console.worlds) {
             world.paperConfig.init();
         }
-        com.github.ruviolence.reaper.WorldConfigCache.dropCache(); // Reaper - Cache world configs
+        WorldConfigCache.dropCache(); // Beast - Cache world configs
         console.server.reloadCount++;
 
         Command.broadcastCommandMessage(sender, ChatColor.GREEN + "Paper config reload complete.");
diff --git a/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java b/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java
index fd764891ad62de69b404da891f5077e65e32c9bd..e7412a6a5ea039f0ef9566fb0405fe21c945f368 100644
--- a/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java
+++ b/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java
@@ -138,13 +138,13 @@ public class PaperWorldConfig {
         log("Top of the nether void damage: " + netherVoidTopDamage);
     }
 
-    /* // Reaper start - Remove Paper lighting queue
+    /* // Beast start - Remove Paper lighting queue
     public boolean queueLightUpdates;
     private void queueLightUpdates() {
         queueLightUpdates = getBoolean("queue-light-updates", false);
         log("Lighting Queue enabled: " + queueLightUpdates);
     }
-    */ // Reaper end
+    */ // Beast end
 
     public boolean disableEndCredits;
     private void disableEndCredits() {
diff --git a/src/main/java/com/destroystokyo/paper/loottable/CraftLootableInventoryData.java b/src/main/java/com/destroystokyo/paper/loottable/CraftLootableInventoryData.java
index 9d7f06140ff9cf7d09bf4e03acc9acc8ff19f654..a43fe0c33bd022569b8dc34daeae207a3c7f280b 100644
--- a/src/main/java/com/destroystokyo/paper/loottable/CraftLootableInventoryData.java
+++ b/src/main/java/com/destroystokyo/paper/loottable/CraftLootableInventoryData.java
@@ -133,7 +133,7 @@ public class CraftLootableInventoryData {
         }
     }
     public void saveNbt(NBTTagCompound base) {
-        NBTTagCompound comp = new NBTTagCompound(4); // Reaper - Use initial capacity
+        NBTTagCompound comp = new NBTTagCompound(4); // Beast - Use initial capacity
         if (this.nextRefill != -1) {
             comp.setLong("nextRefill", this.nextRefill);
         }
diff --git a/src/main/java/com/github/ruviolence/reaper/BeastCommand.java b/src/main/java/com/homomc/beast/BeastCommand.java
similarity index 98%
rename from src/main/java/com/github/ruviolence/reaper/BeastCommand.java
rename to src/main/java/com/homomc/beast/BeastCommand.java
index feab1f5c5945aba1030316b185f3846a6e9bcf8f..9d0ba7369b8b6898639d60bce070e313c474d91f 100644
--- a/src/main/java/com/github/ruviolence/reaper/BeastCommand.java
+++ b/src/main/java/com/homomc/beast/BeastCommand.java
@@ -1,4 +1,4 @@
-package com.github.ruviolence.reaper;
+package com.homomc.beast;
 
 import net.minecraft.server.CommandAbstract;
 import net.minecraft.server.MinecraftServer;
diff --git a/src/main/java/com/github/ruviolence/reaper/BeastConfig.java b/src/main/java/com/homomc/beast/BeastConfig.java
similarity index 99%
rename from src/main/java/com/github/ruviolence/reaper/BeastConfig.java
rename to src/main/java/com/homomc/beast/BeastConfig.java
index 6a4a1a4b15ff0a52704d9ea18be896fe8dfc648a..0cdc12c5c125b29adf643f765ec95b29d7cdcb65 100644
--- a/src/main/java/com/github/ruviolence/reaper/BeastConfig.java
+++ b/src/main/java/com/homomc/beast/BeastConfig.java
@@ -1,4 +1,4 @@
-package com.github.ruviolence.reaper;
+package com.homomc.beast;
 
 import com.google.common.base.Throwables;
 import net.minecraft.server.*;
@@ -64,7 +64,7 @@ public class BeastConfig {
             File configFile = new File(bStatsFolder, "config.yml");
 
             if (!configFile.exists() || YamlConfiguration.loadConfiguration(configFile).getBoolean("enabled", true)) {
-                Metrics.ReaperMetrics.startMetrics();
+                Metrics.BeastMetrics.startMetrics();
             }
             metricsStarted = true;
         }
@@ -253,7 +253,7 @@ public class BeastConfig {
         lightThrottlingRedelaying = getBoolean("light-throttling.redelaying", false);
         lightThrottlingAllowBlockRelight = getBoolean("light-throttling.allow-block-relight", true);
         if (oldQLU && !queueLightUpdates) {
-            ReaperLightingQueue.processQueueAnyway();
+            BeastLightingQueue.processQueueAnyway();
         }
     }
 
diff --git a/src/main/java/com/github/ruviolence/reaper/Constants.java b/src/main/java/com/homomc/beast/Constants.java
similarity index 69%
rename from src/main/java/com/github/ruviolence/reaper/Constants.java
rename to src/main/java/com/homomc/beast/Constants.java
index 8e0e7542ed6d95dc9a403d320640651998abeb6e..f2db37b7750d4768dde55129056f486da1b9bb26 100644
--- a/src/main/java/com/github/ruviolence/reaper/Constants.java
+++ b/src/main/java/com/homomc/beast/Constants.java
@@ -1,4 +1,4 @@
-package com.github.ruviolence.reaper;
+package com.homomc.beast;
 
 public class Constants {
     public static final Runnable NULL_RUNNABLE = () -> {};
diff --git a/src/main/java/com/github/ruviolence/reaper/IdentityStrategy.java b/src/main/java/com/homomc/beast/IdentityStrategy.java
similarity index 90%
rename from src/main/java/com/github/ruviolence/reaper/IdentityStrategy.java
rename to src/main/java/com/homomc/beast/IdentityStrategy.java
index b3848b1eb027731b2a8adcdcbdb1967c54eab6be..9976c5aef03e41ff17c7640264a0914e85c33bdf 100644
--- a/src/main/java/com/github/ruviolence/reaper/IdentityStrategy.java
+++ b/src/main/java/com/homomc/beast/IdentityStrategy.java
@@ -1,4 +1,4 @@
-package com.github.ruviolence.reaper;
+package com.homomc.beast;
 
 import it.unimi.dsi.fastutil.Hash;
 
diff --git a/src/main/java/com/github/ruviolence/reaper/InventoryUpdateHelper.java b/src/main/java/com/homomc/beast/InventoryUpdateHelper.java
similarity index 99%
rename from src/main/java/com/github/ruviolence/reaper/InventoryUpdateHelper.java
rename to src/main/java/com/homomc/beast/InventoryUpdateHelper.java
index 0fea42d69c7762b8cd22523d667e7866d6902a6c..785d4ad4b2e6875088fe03b531f3ebb49aff7042 100644
--- a/src/main/java/com/github/ruviolence/reaper/InventoryUpdateHelper.java
+++ b/src/main/java/com/homomc/beast/InventoryUpdateHelper.java
@@ -1,4 +1,4 @@
-package com.github.ruviolence.reaper;
+package com.homomc.beast;
 
 import net.minecraft.server.Block;
 import net.minecraft.server.BlockLongGrass;
diff --git a/src/main/java/com/github/ruviolence/reaper/Metrics.java b/src/main/java/com/homomc/beast/Metrics.java
similarity index 99%
rename from src/main/java/com/github/ruviolence/reaper/Metrics.java
rename to src/main/java/com/homomc/beast/Metrics.java
index 2e8f32b7454b6196df7e8b598bdc365e1b26fdea..8c18ee61d596cfaefa761d9f86483335b13106b7 100644
--- a/src/main/java/com/github/ruviolence/reaper/Metrics.java
+++ b/src/main/java/com/homomc/beast/Metrics.java
@@ -1,4 +1,4 @@
-package com.github.ruviolence.reaper;
+package com.homomc.beast;
 
 import com.google.gson.JsonArray;
 import com.google.gson.JsonObject;
@@ -406,7 +406,7 @@ public class Metrics {
 
     }
 
-    static class ReaperMetrics {
+    static class BeastMetrics {
         static void startMetrics() {
             // Get the config file
             File bStatsFolder = new File((File) MinecraftServer.getServer().options.valueOf("plugins"), "bStats");
diff --git a/src/main/java/com/github/ruviolence/reaper/OldCombatHelper.java b/src/main/java/com/homomc/beast/OldCombatHelper.java
similarity index 97%
rename from src/main/java/com/github/ruviolence/reaper/OldCombatHelper.java
rename to src/main/java/com/homomc/beast/OldCombatHelper.java
index ad5bfc6bf9a1fe7429dd973e879990de48ed2a54..40300bd27abde7ee210479153b84148c18f64d9f 100644
--- a/src/main/java/com/github/ruviolence/reaper/OldCombatHelper.java
+++ b/src/main/java/com/homomc/beast/OldCombatHelper.java
@@ -1,4 +1,4 @@
-package com.github.ruviolence.reaper;
+package com.homomc.beast;
 
 import net.minecraft.server.Item;
 import net.minecraft.server.ItemAxe;
diff --git a/src/main/java/com/github/ruviolence/reaper/WorldConfigCache.java b/src/main/java/com/homomc/beast/WorldConfigCache.java
similarity index 96%
rename from src/main/java/com/github/ruviolence/reaper/WorldConfigCache.java
rename to src/main/java/com/homomc/beast/WorldConfigCache.java
index e556587cf45f9fe460c10b57a6071cf2418a828f..8c02a40370d224a2114af0e949a6fd58ed6a9ae7 100644
--- a/src/main/java/com/github/ruviolence/reaper/WorldConfigCache.java
+++ b/src/main/java/com/homomc/beast/WorldConfigCache.java
@@ -1,4 +1,4 @@
-package com.github.ruviolence.reaper;
+package com.homomc.beast;
 
 import com.destroystokyo.paper.PaperWorldConfig;
 import com.github.benmanes.caffeine.cache.Cache;
diff --git a/src/main/java/com/github/ruviolence/reaper/lithium/WorldHelper.java b/src/main/java/com/homomc/beast/lithium/WorldHelper.java
similarity index 86%
rename from src/main/java/com/github/ruviolence/reaper/lithium/WorldHelper.java
rename to src/main/java/com/homomc/beast/lithium/WorldHelper.java
index 4a0bb7323dc2b6e7f5be84f707f9805a99671f46..52baaba07082434585ca4dfd800c91296e03f1bf 100644
--- a/src/main/java/com/github/ruviolence/reaper/lithium/WorldHelper.java
+++ b/src/main/java/com/homomc/beast/lithium/WorldHelper.java
@@ -1,4 +1,4 @@
-package com.github.ruviolence.reaper.lithium;
+package com.homomc.beast.lithium;
 
 public class WorldHelper {
     public static boolean areNeighborsWithinSameChunk(int x, int y, int z) {
diff --git a/src/main/java/com/github/ruviolence/reaper/lithium/ai/pathing/BlockPathingBehavior.java b/src/main/java/com/homomc/beast/lithium/ai/pathing/BlockPathingBehavior.java
similarity index 96%
rename from src/main/java/com/github/ruviolence/reaper/lithium/ai/pathing/BlockPathingBehavior.java
rename to src/main/java/com/homomc/beast/lithium/ai/pathing/BlockPathingBehavior.java
index 9f295474d01adaa044bb3048e87c26c5ec554c43..928e020cd45cb1cd29c451375e7b1f7ad1c04de6 100644
--- a/src/main/java/com/github/ruviolence/reaper/lithium/ai/pathing/BlockPathingBehavior.java
+++ b/src/main/java/com/homomc/beast/lithium/ai/pathing/BlockPathingBehavior.java
@@ -1,4 +1,4 @@
-package com.github.ruviolence.reaper.lithium.ai.pathing;
+package com.homomc.beast.lithium.ai.pathing;
 
 import net.minecraft.server.IBlockAccess;
 import net.minecraft.server.PathType;
diff --git a/src/main/java/com/github/ruviolence/reaper/lithium/ai/pathing/PathNodeCache.java b/src/main/java/com/homomc/beast/lithium/ai/pathing/PathNodeCache.java
similarity index 98%
rename from src/main/java/com/github/ruviolence/reaper/lithium/ai/pathing/PathNodeCache.java
rename to src/main/java/com/homomc/beast/lithium/ai/pathing/PathNodeCache.java
index b5c8c66efa21fc97656e75f78620303fb24d860f..6fec06403a77a6769787554e4ca0b0cecdc16a54 100644
--- a/src/main/java/com/github/ruviolence/reaper/lithium/ai/pathing/PathNodeCache.java
+++ b/src/main/java/com/homomc/beast/lithium/ai/pathing/PathNodeCache.java
@@ -1,4 +1,4 @@
-package com.github.ruviolence.reaper.lithium.ai.pathing;
+package com.homomc.beast.lithium.ai.pathing;
 
 import it.unimi.dsi.fastutil.objects.Reference2BooleanMap;
 import it.unimi.dsi.fastutil.objects.Reference2BooleanOpenHashMap;
diff --git a/src/main/java/com/github/ruviolence/reaper/lithium/ai/pathing/PathNodeDefaults.java b/src/main/java/com/homomc/beast/lithium/ai/pathing/PathNodeDefaults.java
similarity index 97%
rename from src/main/java/com/github/ruviolence/reaper/lithium/ai/pathing/PathNodeDefaults.java
rename to src/main/java/com/homomc/beast/lithium/ai/pathing/PathNodeDefaults.java
index 483c4001b2d58fd307da540f162cb9aecf84b45b..9e1b5c94f4a00f29feb784f2ae343122c06e1246 100644
--- a/src/main/java/com/github/ruviolence/reaper/lithium/ai/pathing/PathNodeDefaults.java
+++ b/src/main/java/com/homomc/beast/lithium/ai/pathing/PathNodeDefaults.java
@@ -1,4 +1,4 @@
-package com.github.ruviolence.reaper.lithium.ai.pathing;
+package com.homomc.beast.lithium.ai.pathing;
 
 import net.minecraft.server.*;
 
diff --git a/src/main/java/com/github/ruviolence/reaper/lithium/common/util/math/CompactSineLUT.java b/src/main/java/com/homomc/beast/lithium/common/util/math/CompactSineLUT.java
similarity index 98%
rename from src/main/java/com/github/ruviolence/reaper/lithium/common/util/math/CompactSineLUT.java
rename to src/main/java/com/homomc/beast/lithium/common/util/math/CompactSineLUT.java
index 40197e12132dddb45fcea142ecad513564c5d465..b5541aa930b9fad0307f488c96638b563b1b71af 100644
--- a/src/main/java/com/github/ruviolence/reaper/lithium/common/util/math/CompactSineLUT.java
+++ b/src/main/java/com/homomc/beast/lithium/common/util/math/CompactSineLUT.java
@@ -1,4 +1,4 @@
-package com.github.ruviolence.reaper.lithium.common.util.math;
+package com.homomc.beast.lithium.common.util.math;
 
 import net.minecraft.server.MathHelper;
 
diff --git a/src/main/java/io/papermc/paper/configuration/GlobalConfiguration.java b/src/main/java/io/papermc/paper/configuration/GlobalConfiguration.java
index 5e15f400aab49bc52efe07aac8f368d11826a73c..8596b4f2f68c87fa6f6fe0e78a0bb0231ed1fc1a 100644
--- a/src/main/java/io/papermc/paper/configuration/GlobalConfiguration.java
+++ b/src/main/java/io/papermc/paper/configuration/GlobalConfiguration.java
@@ -2,6 +2,6 @@ package io.papermc.paper.configuration;
 
 public class GlobalConfiguration {
     public class PacketLimiter {
-        // Reaper - This is just a dummy class to prevent ViaVersion from enabling its packet limiter.
+        // Beast - This is just a dummy class to prevent ViaVersion from enabling its packet limiter.
     }
 }
diff --git a/src/main/java/net/minecraft/server/Advancement.java b/src/main/java/net/minecraft/server/Advancement.java
index a1612aec7bfe755fe57ec8fbde8122b5c8261588..ed7b47bd5637cd7735ae42543b3684b59b181a8b 100644
--- a/src/main/java/net/minecraft/server/Advancement.java
+++ b/src/main/java/net/minecraft/server/Advancement.java
@@ -177,7 +177,7 @@ public class Advancement {
                 int k = astring1.length;
 
                 for (int l = 0; l < k; ++l) {
-                    String s = astring1[l]; // Reaper - Inline
+                    String s = astring1[l]; // Beast - Inline
 
                     packetdataserializer.a(s);
                 }
@@ -242,7 +242,7 @@ public class Advancement {
                     l = astring2.length;
 
                     for (int i1 = 0; i1 < l; ++i1) {
-                        String s1 = astring2[i1]; // Reaper - Inline
+                        String s1 = astring2[i1]; // Beast - Inline
 
                         if (!map.containsKey(s1)) {
                             throw new JsonSyntaxException("Unknown required criterion \'" + s1 + "\'");
@@ -262,7 +262,7 @@ public class Advancement {
 
                     while (true) {
                         if (l < j1) {
-                            String[] astring5 = astring[l]; // Reaper - Inline
+                            String[] astring5 = astring[l]; // Beast - Inline
 
                             if (!ArrayUtils.contains(astring5, s2)) {
                                 ++l;
diff --git a/src/main/java/net/minecraft/server/AdvancementDataPlayer.java b/src/main/java/net/minecraft/server/AdvancementDataPlayer.java
index 6353107bc122731a597131bbfaead2c507b2d7e8..e82ba16a09babbed840ab76c34d265fb69706b94 100644
--- a/src/main/java/net/minecraft/server/AdvancementDataPlayer.java
+++ b/src/main/java/net/minecraft/server/AdvancementDataPlayer.java
@@ -209,7 +209,7 @@ public class AdvancementDataPlayer {
                 this.player.world.getServer().getPluginManager().callEvent(new org.bukkit.event.player.PlayerAdvancementDoneEvent(this.player.getBukkitEntity(), advancement.bukkit)); // CraftBukkit
                 advancement.d().a(this.player);
                 if (advancement.c() != null && advancement.c().i() && this.player.world.getGameRules().getBoolean("announceAdvancements")) {
-                    this.d.getPlayerList().sendMessageFast(new ChatMessage("chat.type.advancement." + advancement.c().e().a(), new Object[] { this.player.getScoreboardDisplayName(), advancement.j()}), true); // Reaper
+                    this.d.getPlayerList().sendMessageFast(new ChatMessage("chat.type.advancement." + advancement.c().e().a(), new Object[] { this.player.getScoreboardDisplayName(), advancement.j()}), true); // Beast
                 }
             }
         }
diff --git a/src/main/java/net/minecraft/server/Advancements.java b/src/main/java/net/minecraft/server/Advancements.java
index e642afe93fb82db55d79cb32507168725ee1f469..bf60e7454fb3367eae73d6ae095f1992495868a4 100644
--- a/src/main/java/net/minecraft/server/Advancements.java
+++ b/src/main/java/net/minecraft/server/Advancements.java
@@ -17,7 +17,7 @@ public class Advancements {
     private static final Logger a = LogManager.getLogger();
     public final Map<MinecraftKey, Advancement> advancements = Maps.newHashMap();
     private final Set<Advancement> c = Sets.newLinkedHashSet();
-    // private final Set<Advancement> d = Collections.emptySet(); // Reaper - Optimize unused
+    // private final Set<Advancement> d = Collections.emptySet(); // Beast - Optimize unused
     private Advancements.a e;
 
     public Advancements() {}
@@ -49,7 +49,7 @@ public class Advancements {
                             this.e.a(advancement);
                         }
                     } else {
-                        // this.d.add(advancement); // Reaper - Optimize unused
+                        // this.d.add(advancement); // Beast - Optimize unused
                         if (this.e != null) {
                             this.e.c(advancement);
                         }
@@ -77,7 +77,7 @@ public class Advancements {
     public void a() {
         this.advancements.clear();
         this.c.clear();
-        // this.d.clear(); // Reaper - Optimize unused
+        // this.d.clear(); // Beast - Optimize unused
         if (this.e != null) {
             this.e.a();
         }
diff --git a/src/main/java/net/minecraft/server/BaseBlockPosition.java b/src/main/java/net/minecraft/server/BaseBlockPosition.java
index bd202ae956d0a0f96cc38d0c5c99e405e106d256..17dda7a400e311e6524e388d4ff6b21632c8c6f4 100644
--- a/src/main/java/net/minecraft/server/BaseBlockPosition.java
+++ b/src/main/java/net/minecraft/server/BaseBlockPosition.java
@@ -11,7 +11,7 @@ public class BaseBlockPosition implements Comparable<BaseBlockPosition> {
     protected int a;
     protected int b;
     protected int c;
-    private int hashCode = -1; // Reaper - Cache hash code
+    private int hashCode = -1; // Beast - Cache hash code
 
     public final boolean isValidLocation() {
         return a >= -30000000 && c >= -30000000 && a < 30000000 && c < 30000000 && b >= 0 && b < 256;
@@ -39,23 +39,23 @@ public class BaseBlockPosition implements Comparable<BaseBlockPosition> {
         } else {
             BaseBlockPosition baseblockposition = (BaseBlockPosition) object;
 
-            return this.a != baseblockposition.a ? false : (this.b != baseblockposition.b ? false : this.c == baseblockposition.c); // Reaper - Optimize BlockPosition
+            return this.a != baseblockposition.a ? false : (this.b != baseblockposition.b ? false : this.c == baseblockposition.c); // Beast - Optimize BlockPosition
         }
     }
 
     public int hashCode() {
-        // Reaper start - Cache hash code
+        // Beast start - Cache hash code
         int hash = this.hashCode;
         if (hash == -1) {
-            hash = (this.b + this.c * 31) * 31 + this.a; // Reaper - Optimize BlockPosition
+            hash = (this.b + this.c * 31) * 31 + this.a; // Beast - Optimize BlockPosition
             hashCode = hash;
         }
         return hash;
-        // Reaper end
+        // Beast end
     }
 
     public int l(BaseBlockPosition baseblockposition) {
-        return this.b == baseblockposition.b ? (this.c == baseblockposition.c ? this.a - baseblockposition.a : this.c - baseblockposition.c) : this.b - baseblockposition.b; // Reaper - Optimize BlockPosition
+        return this.b == baseblockposition.b ? (this.c == baseblockposition.c ? this.a - baseblockposition.a : this.c - baseblockposition.c) : this.b - baseblockposition.b; // Beast - Optimize BlockPosition
     }
 
     // Paper start - Only allow a single implementation
@@ -73,45 +73,45 @@ public class BaseBlockPosition implements Comparable<BaseBlockPosition> {
     // Paper end
 
     public BaseBlockPosition d(BaseBlockPosition baseblockposition) {
-        return new BaseBlockPosition(this.b * baseblockposition.c - this.c * baseblockposition.b, this.c * baseblockposition.a - this.a * baseblockposition.c, this.a * baseblockposition.b - this.b * baseblockposition.a); // Reaper - Optimize BlockPosition
+        return new BaseBlockPosition(this.b * baseblockposition.c - this.c * baseblockposition.b, this.c * baseblockposition.a - this.a * baseblockposition.c, this.a * baseblockposition.b - this.b * baseblockposition.a); // Beast - Optimize BlockPosition
     }
 
     public double h(int i, int j, int k) {
-        // Reaper start - Optimize BlockPosition
+        // Beast start - Optimize BlockPosition
         double d0 = this.a - i;
         double d1 = this.b - j;
         double d2 = this.c - k;
-        // Reaper end
+        // Beast end
 
         return Math.sqrt(d0 * d0 + d1 * d1 + d2 * d2);
     }
 
     public double distanceSquared(double d0, double d1, double d2) {
-        // Reaper start - Optimize BlockPosition
+        // Beast start - Optimize BlockPosition
         double d3 = (double) this.a - d0;
         double d4 = (double) this.b - d1;
         double d5 = (double) this.c - d2;
-        // Reaper end
+        // Beast end
 
         return d3 * d3 + d4 * d4 + d5 * d5;
     }
 
     public double g(double d0, double d1, double d2) {
-        // Reaper start - Optimize BlockPosition
+        // Beast start - Optimize BlockPosition
         double d3 = (double) this.a + 0.5D - d0;
         double d4 = (double) this.b + 0.5D - d1;
         double d5 = (double) this.c + 0.5D - d2;
-        // Reaper end
+        // Beast end
 
         return d3 * d3 + d4 * d4 + d5 * d5;
     }
 
     public double n(BaseBlockPosition baseblockposition) {
-        return this.distanceSquared(baseblockposition.a, baseblockposition.b, baseblockposition.c); // Reaper - Optimize BlockPosition
+        return this.distanceSquared(baseblockposition.a, baseblockposition.b, baseblockposition.c); // Beast - Optimize BlockPosition
     }
 
     public String toString() {
-        return MoreObjects.toStringHelper(this).add("x", this.a).add("y", this.b).add("z", this.c).toString(); // Reaper - Optimize BlockPosition
+        return MoreObjects.toStringHelper(this).add("x", this.a).add("y", this.b).add("z", this.c).toString(); // Beast - Optimize BlockPosition
     }
 
     public int compareTo(BaseBlockPosition object) { // Paper - decompile fix
diff --git a/src/main/java/net/minecraft/server/ReaperLightingQueue.java b/src/main/java/net/minecraft/server/BeastLightingQueue.java
similarity index 98%
rename from src/main/java/net/minecraft/server/ReaperLightingQueue.java
rename to src/main/java/net/minecraft/server/BeastLightingQueue.java
index 040069f8be82064d05bb337d8aa976fbcc470b3c..a481302b850a9a3ca95bfc5abb1c14fd71b62ba7 100644
--- a/src/main/java/net/minecraft/server/ReaperLightingQueue.java
+++ b/src/main/java/net/minecraft/server/BeastLightingQueue.java
@@ -1,13 +1,13 @@
 package net.minecraft.server;
 
-import com.github.ruviolence.reaper.BeastConfig;
+import com.homomc.beast.BeastConfig;
 import it.unimi.dsi.fastutil.longs.Long2ObjectMap;
 import it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap;
 import it.unimi.dsi.fastutil.objects.ObjectCollection;
 
 import java.util.ArrayDeque;
 
-public class ReaperLightingQueue {
+public class BeastLightingQueue {
     private static final long MAX_TIME = (long) (1000000000 / 20 * 1.15);
 
     public static void processQueue(long curTime) {
diff --git a/src/main/java/net/minecraft/server/BiomeForest.java b/src/main/java/net/minecraft/server/BiomeForest.java
index 744d71350950a562353a0a0ab8be2c2a6075e38b..671ddc130236d36e174758d9647650f354bd5253 100644
--- a/src/main/java/net/minecraft/server/BiomeForest.java
+++ b/src/main/java/net/minecraft/server/BiomeForest.java
@@ -38,7 +38,7 @@ public class BiomeForest extends BiomeBase {
     public BlockFlowers.EnumFlowerVarient a(Random random, BlockPosition blockposition) {
         if (this.A == BiomeForest.Type.FLOWER) {
             double d0 = MathHelper.a((1.0D + BiomeForest.k.a((double) blockposition.getX() / 48.0D, (double) blockposition.getZ() / 48.0D)) / 2.0D, 0.0D, 0.9999D);
-            BlockFlowers.EnumFlowerVarient blockflowers_enumflowervarient = BlockFlowers.EnumFlowerVarient.VALUES[(int) (d0 * (double) BlockFlowers.EnumFlowerVarient.VALUES.length)]; // Reaper - Single values array
+            BlockFlowers.EnumFlowerVarient blockflowers_enumflowervarient = BlockFlowers.EnumFlowerVarient.VALUES[(int) (d0 * (double) BlockFlowers.EnumFlowerVarient.VALUES.length)]; // Beast - Single values array
 
             return blockflowers_enumflowervarient == BlockFlowers.EnumFlowerVarient.BLUE_ORCHID ? BlockFlowers.EnumFlowerVarient.POPPY : blockflowers_enumflowervarient;
         } else {
diff --git a/src/main/java/net/minecraft/server/BiomeMesa.java b/src/main/java/net/minecraft/server/BiomeMesa.java
index 5ae821474f286f825beaabe5d5afa21129be61c4..57067c0910b4de438b8b44edcfc59187da129a51 100644
--- a/src/main/java/net/minecraft/server/BiomeMesa.java
+++ b/src/main/java/net/minecraft/server/BiomeMesa.java
@@ -31,7 +31,7 @@ public class BiomeMesa extends BiomeBase {
         this.s.F = 3;
         this.s.G = 5;
         this.s.B = 0;
-        // this.u.clear(); // Reaper - Already empty
+        // this.u.clear(); // Beast - Already empty
         if (flag1) {
             this.s.z = 5;
         }
diff --git a/src/main/java/net/minecraft/server/Block.java b/src/main/java/net/minecraft/server/Block.java
index 8a929046e64b79011112d1f76f852c2312bc2c32..0bd38c0f1f336c582a7582119b81284800c5abd5 100644
--- a/src/main/java/net/minecraft/server/Block.java
+++ b/src/main/java/net/minecraft/server/Block.java
@@ -2,6 +2,8 @@ package net.minecraft.server;
 
 import com.google.common.collect.Sets;
 import com.google.common.collect.UnmodifiableIterator;
+import com.homomc.beast.OldCombatHelper;
+
 import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
@@ -345,12 +347,12 @@ public class Block {
     }
 
     public void dropNaturally(World world, BlockPosition blockposition, IBlockData iblockdata, float f, int i) {
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             int j = this.getDropCount(i, world.random);
 
             for (int k = 0; k < j; ++k) {
                 // CraftBukkit - <= to < to allow for plugins to completely disable block drops from explosions
-                if (f == 1 || world.random.nextFloat() < f) { // Reaper - Do not use random when unnecessary
+                if (f == 1 || world.random.nextFloat() < f) { // Beast - Do not use random when unnecessary
                     Item item = this.getDropType(iblockdata, world.random, i);
 
                     if (item != Items.a) {
@@ -363,7 +365,7 @@ public class Block {
     }
 
     public static void a(World world, BlockPosition blockposition, ItemStack itemstack) {
-        if (!itemstack.isEmpty() && world.getGameRules().getBoolean("doTileDrops")) { // Reaper - Remove isClientSide check
+        if (!itemstack.isEmpty() && world.getGameRules().getBoolean("doTileDrops")) { // Beast - Remove isClientSide check
             float f = 0.5F;
             double d0 = (double) (world.random.nextFloat() * 0.5F) + 0.25D;
             double d1 = (double) (world.random.nextFloat() * 0.5F) + 0.25D;
@@ -382,7 +384,7 @@ public class Block {
     }
 
     protected void dropExperience(World world, BlockPosition blockposition, int i, EntityPlayer player) { // Paper
-        if (world.getGameRules().getBoolean("doTileDrops")) { // Reaper - Remove isClientSide check
+        if (world.getGameRules().getBoolean("doTileDrops")) { // Beast - Remove isClientSide check
             while (i > 0) {
                 int j = EntityExperienceOrb.getOrbValue(i);
 
@@ -461,7 +463,7 @@ public class Block {
 
     public void a(World world, EntityHuman entityhuman, BlockPosition blockposition, IBlockData iblockdata, @Nullable TileEntity tileentity, ItemStack itemstack) {
         entityhuman.b(StatisticList.a(this));
-        entityhuman.applyExhaustion(com.github.ruviolence.reaper.OldCombatHelper.EXHAUSTION_BLOCK_BREAK); // Reaper - Old combat
+        entityhuman.applyExhaustion(OldCombatHelper.EXHAUSTION_BLOCK_BREAK); // Beast - Old combat
         if (this.n() && EnchantmentManager.getEnchantmentLevel(Enchantments.SILK_TOUCH, itemstack) > 0) {
             ItemStack itemstack1 = this.u(iblockdata);
 
@@ -960,7 +962,7 @@ public class Block {
             }
         }
 
-        // Reaper start - Lithium: ai/pathing/LandPathNodeMaker
+        // Beast start - Lithium: ai/pathing/LandPathNodeMaker
         DispenserRegistry.isBlocksInitialized = true;
         for (Block b : Block.REGISTRY) {
             BlockStateList blockStateList = b.s();
@@ -968,7 +970,7 @@ public class Block {
                 ((BlockStateList.BlockData) data).initPathTypeCache();
             }
         }
-        // Reaper end
+        // Beast end
     }
 
     // CraftBukkit start
diff --git a/src/main/java/net/minecraft/server/BlockActionData.java b/src/main/java/net/minecraft/server/BlockActionData.java
index 68643c2df7fc26537c80a413c27810c7252f8d41..d5aa6ffb57f0d004833c1758cac987d9c6e0ea85 100644
--- a/src/main/java/net/minecraft/server/BlockActionData.java
+++ b/src/main/java/net/minecraft/server/BlockActionData.java
@@ -6,7 +6,7 @@ public class BlockActionData {
     private final Block b;
     private final int c;
     private final int d;
-    private int hashCode = -1; // Reaper
+    private int hashCode = -1; // Beast
 
     public BlockActionData(BlockPosition blockposition, Block block, int i, int j) {
         this.a = blockposition;
@@ -41,7 +41,7 @@ public class BlockActionData {
         }
     }
 
-    // Reaper start
+    // Beast start
     public int hashCode() {
         int hash = this.hashCode;
         if (hash == -1) {
@@ -54,7 +54,7 @@ public class BlockActionData {
         }
         return hash;
     }
-    // Reaper end
+    // Beast end
 
     public String toString() {
         return "TE(" + this.a + ")," + this.c + "," + this.d + "," + this.b;
diff --git a/src/main/java/net/minecraft/server/BlockBeacon.java b/src/main/java/net/minecraft/server/BlockBeacon.java
index b0326f33e85a056ae2c7fe1f925fdb4df2c9df3f..38e4c70ddc94860c96519817b4571544efe90a99 100644
--- a/src/main/java/net/minecraft/server/BlockBeacon.java
+++ b/src/main/java/net/minecraft/server/BlockBeacon.java
@@ -13,7 +13,7 @@ public class BlockBeacon extends BlockTileEntity {
     }
 
     public boolean interact(World world, BlockPosition blockposition, IBlockData iblockdata, EntityHuman entityhuman, EnumHand enumhand, EnumDirection enumdirection, float f, float f1, float f2) {
-        if (false) { // Reaper - Remove isClientSide check
+        if (false) { // Beast - Remove isClientSide check
             return true;
         } else {
             TileEntity tileentity = world.getTileEntity(blockposition);
diff --git a/src/main/java/net/minecraft/server/BlockBed.java b/src/main/java/net/minecraft/server/BlockBed.java
index 95f643e9823f653d3023debb3fc0891b726bdab0..d2b3ef8f947b1210cb0291f408847637ab8660b4 100644
--- a/src/main/java/net/minecraft/server/BlockBed.java
+++ b/src/main/java/net/minecraft/server/BlockBed.java
@@ -31,7 +31,7 @@ public class BlockBed extends BlockFacingHorizontal implements ITileEntity {
     }
 
     public boolean interact(World world, BlockPosition blockposition, IBlockData iblockdata, EntityHuman entityhuman, EnumHand enumhand, EnumDirection enumdirection, float f, float f1, float f2) {
-        if (false) { // Reaper - Remove isClientSide check
+        if (false) { // Beast - Remove isClientSide check
             return true;
         } else {
             if (iblockdata.get(BlockBed.PART) != BlockBed.EnumBedPart.HEAD) {
@@ -62,7 +62,7 @@ public class BlockBed extends BlockFacingHorizontal implements ITileEntity {
                     world.setTypeAndData(blockposition, iblockdata, 4);
                     return true;
                 } else {
-                    // Reaper start - Replace 'if' with 'switch'
+                    // Beast start - Replace 'if' with 'switch'
                     switch (entityhuman_enumbedresult) {
                     case NOT_POSSIBLE_NOW:
                         entityhuman.a((IChatBaseComponent) (new ChatMessage("tile.bed.noSleep", new Object[0])), true);
@@ -74,7 +74,7 @@ public class BlockBed extends BlockFacingHorizontal implements ITileEntity {
                         entityhuman.a((IChatBaseComponent) (new ChatMessage("tile.bed.tooFarAway", new Object[0])), true);
                         break;
                     }
-                    // Reaper end
+                    // Beast end
 
                     return true;
                 }
@@ -141,7 +141,7 @@ public class BlockBed extends BlockFacingHorizontal implements ITileEntity {
                 world.setAir(blockposition);
             }
         } else if (world.getType(blockposition.shift(enumdirection.opposite())).getBlock() != this) {
-            if (true) { // Reaper - Remove isClientSide check
+            if (true) { // Beast - Remove isClientSide check
                 this.b(world, blockposition, iblockdata, 0);
             }
 
diff --git a/src/main/java/net/minecraft/server/BlockButtonAbstract.java b/src/main/java/net/minecraft/server/BlockButtonAbstract.java
index 468f91a25e9b08b1ee2f8ef0e544b8f4128df5d3..5265d2bd5472a7471431773249e11e1fb2e17e41 100644
--- a/src/main/java/net/minecraft/server/BlockButtonAbstract.java
+++ b/src/main/java/net/minecraft/server/BlockButtonAbstract.java
@@ -56,7 +56,7 @@ public abstract class BlockButtonAbstract extends BlockDirectional {
     }
 
     public boolean canPlace(World world, BlockPosition blockposition) {
-        EnumDirection[] aenumdirection = EnumDirection.VALUES; // Reaper - Single values array
+        EnumDirection[] aenumdirection = EnumDirection.VALUES; // Beast - Single values array
         int i = aenumdirection.length;
 
         for (int j = 0; j < i; ++j) {
@@ -180,7 +180,7 @@ public abstract class BlockButtonAbstract extends BlockDirectional {
     public void a(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {}
 
     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             if (((Boolean) iblockdata.get(BlockButtonAbstract.POWERED)).booleanValue()) {
                 if (this.I) {
                     this.d(iblockdata, world, blockposition);
@@ -206,7 +206,7 @@ public abstract class BlockButtonAbstract extends BlockDirectional {
     }
 
     public void a(World world, BlockPosition blockposition, IBlockData iblockdata, Entity entity) {
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             if (this.I) {
                 if (!((Boolean) iblockdata.get(BlockButtonAbstract.POWERED)).booleanValue()) {
                     this.d(iblockdata, world, blockposition);
diff --git a/src/main/java/net/minecraft/server/BlockCake.java b/src/main/java/net/minecraft/server/BlockCake.java
index 6c6565da4f91e91e2bebf645d8f96ba8f11cd60f..2a828fe90e0845633a764eaa5ae54053c134439e 100644
--- a/src/main/java/net/minecraft/server/BlockCake.java
+++ b/src/main/java/net/minecraft/server/BlockCake.java
@@ -26,7 +26,7 @@ public class BlockCake extends Block {
     }
 
     public boolean interact(World world, BlockPosition blockposition, IBlockData iblockdata, EntityHuman entityhuman, EnumHand enumhand, EnumDirection enumdirection, float f, float f1, float f2) {
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             return this.b(world, blockposition, iblockdata, entityhuman);
         } else {
             ItemStack itemstack = entityhuman.b(enumhand);
diff --git a/src/main/java/net/minecraft/server/BlockCarpet.java b/src/main/java/net/minecraft/server/BlockCarpet.java
index 0f4d96cf2871f5f088e3c612c1b7a69f8ce2ce6f..ae5e7f06690e818e41bd02fb6293364a0d22b8ab 100644
--- a/src/main/java/net/minecraft/server/BlockCarpet.java
+++ b/src/main/java/net/minecraft/server/BlockCarpet.java
@@ -38,10 +38,10 @@ public class BlockCarpet extends Block {
 
     private boolean e(World world, BlockPosition blockposition, IBlockData iblockdata) {
         if (!this.b(world, blockposition)) {
-            if (!BlockPiston.IS_WORKING) { // Reaper start - Fix carpet dupe
+            if (!BlockPiston.IS_WORKING) { // Beast start - Fix carpet dupe
             this.b(world, blockposition, iblockdata, 0);
             world.setAir(blockposition);
-            } // Reaper end
+            } // Beast end
             return false;
         } else {
             return true;
diff --git a/src/main/java/net/minecraft/server/BlockCauldron.java b/src/main/java/net/minecraft/server/BlockCauldron.java
index c07a73a43a674532c1aca95e95d00b2e820a6df7..5f8493d89c6c5b54dafc0fc660dbcbc63d7fbdc9 100644
--- a/src/main/java/net/minecraft/server/BlockCauldron.java
+++ b/src/main/java/net/minecraft/server/BlockCauldron.java
@@ -4,7 +4,7 @@ import java.util.List;
 import java.util.Random;
 import javax.annotation.Nullable;
 
-import com.github.ruviolence.reaper.BeastConfig;
+import com.homomc.beast.BeastConfig;
 import org.bukkit.event.block.CauldronLevelChangeEvent; // CraftBukkit
 
 public class BlockCauldron extends Block {
@@ -45,7 +45,7 @@ public class BlockCauldron extends Block {
         int i = ((Integer) iblockdata.get(BlockCauldron.LEVEL)).intValue();
         float f = (float) blockposition.getY() + (6.0F + (float) (3 * i)) / 16.0F;
 
-        if (entity.isBurning() && i > 0 && entity.getBoundingBox().b <= (double) f) { // Reaper - Remove isClientSide check
+        if (entity.isBurning() && i > 0 && entity.getBoundingBox().b <= (double) f) { // Beast - Remove isClientSide check
             // CraftBukkit start
             if (!this.changeLevel(world, blockposition, iblockdata, i - 1, entity, CauldronLevelChangeEvent.ChangeReason.EXTINGUISH)) {
                 return;
@@ -67,7 +67,7 @@ public class BlockCauldron extends Block {
             Item item = itemstack.getItem();
 
             if (item == Items.WATER_BUCKET) {
-                if (i < 3) { // Reaper - Remove isClientSide check
+                if (i < 3) { // Beast - Remove isClientSide check
                     // CraftBukkit start
                     if (!this.changeLevel(world, blockposition, iblockdata, 3, entityhuman, CauldronLevelChangeEvent.ChangeReason.BUCKET_EMPTY)) {
                         return true;
@@ -84,7 +84,7 @@ public class BlockCauldron extends Block {
 
                 return true;
             } else if (item == Items.BUCKET) {
-                if (i == 3) { // Reaper - Remove isClientSide check
+                if (i == 3) { // Beast - Remove isClientSide check
                     // CraftBukkit start
                     if (!this.changeLevel(world, blockposition, iblockdata, 0, entityhuman, CauldronLevelChangeEvent.ChangeReason.BUCKET_FILL)) {
                         return true;
@@ -109,7 +109,7 @@ public class BlockCauldron extends Block {
                 ItemStack itemstack1;
 
                 if (item == Items.GLASS_BOTTLE) {
-                    if (i > 0) { // Reaper - Remove isClientSide check
+                    if (i > 0) { // Beast - Remove isClientSide check
                         // CraftBukkit start
                         if (!this.changeLevel(world, blockposition, iblockdata, i - 1, entityhuman, CauldronLevelChangeEvent.ChangeReason.BOTTLE_FILL)) {
                             return true;
@@ -123,7 +123,7 @@ public class BlockCauldron extends Block {
                             } else if (!entityhuman.inventory.pickup(itemstack1)) {
                                 entityhuman.drop(itemstack1, false);
                             } else if (entityhuman instanceof EntityPlayer) {
-                                if (!BeastConfig.reduceInventoryUpdates) // Reaper - Reduce inventory updates
+                                if (!BeastConfig.reduceInventoryUpdates) // Beast - Reduce inventory updates
                                 ((EntityPlayer) entityhuman).updateInventory(entityhuman.defaultContainer);
                             }
                         }
@@ -135,7 +135,7 @@ public class BlockCauldron extends Block {
 
                     return true;
                 } else if (item == Items.POTION && PotionUtil.d(itemstack) == Potions.b) {
-                    if (i < 3) { // Reaper - Remove isClientSide check
+                    if (i < 3) { // Beast - Remove isClientSide check
                         // CraftBukkit start
                         if (!this.changeLevel(world, blockposition, iblockdata, i + 1, entityhuman, CauldronLevelChangeEvent.ChangeReason.BOTTLE_EMPTY)) {
                             return true;
@@ -145,7 +145,7 @@ public class BlockCauldron extends Block {
                             entityhuman.b(StatisticList.J);
                             entityhuman.a(enumhand, itemstack1);
                             if (entityhuman instanceof EntityPlayer) {
-                                if (!BeastConfig.reduceInventoryUpdates) // Reaper - Reduce inventory updates
+                                if (!BeastConfig.reduceInventoryUpdates) // Beast - Reduce inventory updates
                                 ((EntityPlayer) entityhuman).updateInventory(entityhuman.defaultContainer);
                             }
                         }
@@ -160,7 +160,7 @@ public class BlockCauldron extends Block {
                     if (i > 0 && item instanceof ItemArmor) {
                         ItemArmor itemarmor = (ItemArmor) item;
 
-                        if (itemarmor.d() == ItemArmor.EnumArmorMaterial.LEATHER && itemarmor.e_(itemstack)) { // Reaper - Remove isClientSide check
+                        if (itemarmor.d() == ItemArmor.EnumArmorMaterial.LEATHER && itemarmor.e_(itemstack)) { // Beast - Remove isClientSide check
                             // CraftBukkit start
                             if (!this.changeLevel(world, blockposition, iblockdata, i - 1, entityhuman, CauldronLevelChangeEvent.ChangeReason.ARMOR_WASH)) {
                                 return true;
@@ -174,7 +174,7 @@ public class BlockCauldron extends Block {
                     }
 
                     if (i > 0 && item instanceof ItemBanner) {
-                        if (TileEntityBanner.b(itemstack) > 0) { // Reaper - Remove isClientSide check
+                        if (TileEntityBanner.b(itemstack) > 0) { // Beast - Remove isClientSide check
                             // CraftBukkit start
                             if (!this.changeLevel(world, blockposition, iblockdata, i - 1, entityhuman, CauldronLevelChangeEvent.ChangeReason.BANNER_WASH)) {
                                 return true;
@@ -194,7 +194,7 @@ public class BlockCauldron extends Block {
                             } else if (!entityhuman.inventory.pickup(itemstack1)) {
                                 entityhuman.drop(itemstack1, false);
                             } else if (entityhuman instanceof EntityPlayer) {
-                                if (!BeastConfig.reduceInventoryUpdates) // Reaper - Reduce inventory updates
+                                if (!BeastConfig.reduceInventoryUpdates) // Beast - Reduce inventory updates
                                 ((EntityPlayer) entityhuman).updateInventory(entityhuman.defaultContainer);
                             }
                         }
diff --git a/src/main/java/net/minecraft/server/BlockChest.java b/src/main/java/net/minecraft/server/BlockChest.java
index ed5d554e5728dfe2ca060010ad48aa0d0f636349..6324a0f8e0ce7f8e7ea0d87d2ac4d84b7241404c 100644
--- a/src/main/java/net/minecraft/server/BlockChest.java
+++ b/src/main/java/net/minecraft/server/BlockChest.java
@@ -43,12 +43,12 @@ public class BlockChest extends BlockTileEntity {
         while (iterator.hasNext()) {
             EnumDirection enumdirection = (EnumDirection) iterator.next();
             BlockPosition blockposition1 = blockposition.shift(enumdirection);
-            // Reaper start - Dont load chunks for chests
+            // Beast start - Dont load chunks for chests
             final IBlockData iblockdata1 = world.isLoaded(blockposition1) ? world.getType(blockposition1) : null;
             if (iblockdata1 == null) {
                 continue;
             }
-            // Reaper end
+            // Beast end
 
             if (iblockdata1.getBlock() == this) {
                 this.e(world, blockposition1, iblockdata1);
@@ -105,7 +105,7 @@ public class BlockChest extends BlockTileEntity {
     }
 
     public IBlockData e(World world, BlockPosition blockposition, IBlockData iblockdata) {
-        if (false) { // Reaper - Remove isClientSide check
+        if (false) { // Beast - Remove isClientSide check
             return iblockdata;
         } else {
             IBlockData iblockdata1 = world.getType(blockposition.north());
@@ -304,7 +304,7 @@ public class BlockChest extends BlockTileEntity {
     }
 
     public boolean interact(World world, BlockPosition blockposition, IBlockData iblockdata, EntityHuman entityhuman, EnumHand enumhand, EnumDirection enumdirection, float f, float f1, float f2) {
-        if (false) { // Reaper - Remove isClientSide check
+        if (false) { // Beast - Remove isClientSide check
             return true;
         } else {
             ITileInventory itileinventory = this.getInventory(world, blockposition);
diff --git a/src/main/java/net/minecraft/server/BlockChorusFlower.java b/src/main/java/net/minecraft/server/BlockChorusFlower.java
index a042ea7bb6b84d363bfc36dde08e5cc095263cba..95a726a4e6c4b5aeab05f45cd7d50ce999e4f71a 100644
--- a/src/main/java/net/minecraft/server/BlockChorusFlower.java
+++ b/src/main/java/net/minecraft/server/BlockChorusFlower.java
@@ -30,7 +30,7 @@ public class BlockChorusFlower extends Block {
             if (world.isEmpty(blockposition1) && blockposition1.getY() < 256) {
                 int i = ((Integer) iblockdata.get(BlockChorusFlower.AGE)).intValue();
 
-                if (i < 5 /*&& random.nextInt(1) == 0*/) { // Reaper - Optimize
+                if (i < 5 /*&& random.nextInt(1) == 0*/) { // Beast - Optimize
                     boolean flag = false;
                     boolean flag1 = false;
                     IBlockData iblockdata1 = world.getType(blockposition.down());
@@ -130,7 +130,7 @@ public class BlockChorusFlower extends Block {
                             // this.c(world, blockposition);
                             // CraftBukkit end
                         }
-                    } else if (/*i == 4*/true) { // Reaper - Always true
+                    } else if (/*i == 4*/true) { // Beast - Always true
                         // CraftBukkit - add event
                         if (CraftEventFactory.handleBlockGrowEvent(
                                 world,
diff --git a/src/main/java/net/minecraft/server/BlockCommand.java b/src/main/java/net/minecraft/server/BlockCommand.java
index 1aec14badccb000c8f70c2e5e2507d39f969623d..211b913698e58adcf9e2904efd2a6086c9597317 100644
--- a/src/main/java/net/minecraft/server/BlockCommand.java
+++ b/src/main/java/net/minecraft/server/BlockCommand.java
@@ -25,7 +25,7 @@ public class BlockCommand extends BlockTileEntity {
     }
 
     public void a(IBlockData iblockdata, World world, BlockPosition blockposition, Block block, BlockPosition blockposition1) {
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             TileEntity tileentity = world.getTileEntity(blockposition);
 
             if (tileentity instanceof TileEntityCommand) {
@@ -55,7 +55,7 @@ public class BlockCommand extends BlockTileEntity {
     }
 
     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             TileEntity tileentity = world.getTileEntity(blockposition);
 
             if (tileentity instanceof TileEntityCommand) {
@@ -136,7 +136,7 @@ public class BlockCommand extends BlockTileEntity {
                 commandblocklistenerabstract.setName(itemstack.getName());
             }
 
-            if (true) { // Reaper - Remove isClientSide check
+            if (true) { // Beast - Remove isClientSide check
                 NBTTagCompound nbttagcompound = itemstack.getTag();
 
                 if (nbttagcompound == null || !nbttagcompound.hasKeyOfType("BlockEntityTag", 10)) {
diff --git a/src/main/java/net/minecraft/server/BlockConcretePowder.java b/src/main/java/net/minecraft/server/BlockConcretePowder.java
index adb450e62316d379cf10fd56e2031aa20a367ba8..ea79160d69650070a98f8a539d15aebdbe2dac1f 100644
--- a/src/main/java/net/minecraft/server/BlockConcretePowder.java
+++ b/src/main/java/net/minecraft/server/BlockConcretePowder.java
@@ -19,7 +19,7 @@ public class BlockConcretePowder extends BlockFalling {
 
     protected boolean e(World world, BlockPosition blockposition, IBlockData iblockdata) {
         boolean flag = false;
-        EnumDirection[] aenumdirection = EnumDirection.VALUES; // Reaper - Single values array
+        EnumDirection[] aenumdirection = EnumDirection.VALUES; // Beast - Single values array
         int i = aenumdirection.length;
 
         for (int j = 0; j < i; ++j) {
@@ -61,7 +61,7 @@ public class BlockConcretePowder extends BlockFalling {
     }
 
     public void a(CreativeModeTab creativemodetab, NonNullList<ItemStack> nonnulllist) {
-        EnumColor[] aenumcolor = EnumColor.VALUES; // Reaper - Single values array
+        EnumColor[] aenumcolor = EnumColor.VALUES; // Beast - Single values array
         int i = aenumcolor.length;
 
         for (int j = 0; j < i; ++j) {
diff --git a/src/main/java/net/minecraft/server/BlockCrops.java b/src/main/java/net/minecraft/server/BlockCrops.java
index 766b50e0d2b8f4426d53dac3737c239139230072..5f1f8f8bd41fc64f71a50b98e03c21faa71cad8f 100644
--- a/src/main/java/net/minecraft/server/BlockCrops.java
+++ b/src/main/java/net/minecraft/server/BlockCrops.java
@@ -141,7 +141,7 @@ public class BlockCrops extends BlockPlant implements IBlockFragilePlantElement
 
     public void dropNaturally(World world, BlockPosition blockposition, IBlockData iblockdata, float f, int i) {
         super.dropNaturally(world, blockposition, iblockdata, f, 0);
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             int j = this.y(iblockdata);
 
             if (j >= this.g()) {
diff --git a/src/main/java/net/minecraft/server/BlockDaylightDetector.java b/src/main/java/net/minecraft/server/BlockDaylightDetector.java
index ba3b385541bbb91eed283670271f40b38e81d060..e9a909080d5176f351ca71b45b3d44af5292d649 100644
--- a/src/main/java/net/minecraft/server/BlockDaylightDetector.java
+++ b/src/main/java/net/minecraft/server/BlockDaylightDetector.java
@@ -54,7 +54,7 @@ public class BlockDaylightDetector extends BlockTileEntity {
 
     public boolean interact(World world, BlockPosition blockposition, IBlockData iblockdata, EntityHuman entityhuman, EnumHand enumhand, EnumDirection enumdirection, float f, float f1, float f2) {
         if (entityhuman.dk()) {
-            if (false) { // Reaper - Remove isClientSide check
+            if (false) { // Beast - Remove isClientSide check
                 return true;
             } else {
                 if (this.c) {
diff --git a/src/main/java/net/minecraft/server/BlockDiodeAbstract.java b/src/main/java/net/minecraft/server/BlockDiodeAbstract.java
index 8452841b9c76b680c189e935393df6a6bde18637..c51adec93d6f03a8c13d306e671b2dfbef663584 100644
--- a/src/main/java/net/minecraft/server/BlockDiodeAbstract.java
+++ b/src/main/java/net/minecraft/server/BlockDiodeAbstract.java
@@ -76,7 +76,7 @@ public abstract class BlockDiodeAbstract extends BlockFacingHorizontal {
         } else {
             this.b(world, blockposition, iblockdata, 0);
             world.setAir(blockposition);
-            EnumDirection[] aenumdirection = EnumDirection.VALUES; // Reaper - Single values array
+            EnumDirection[] aenumdirection = EnumDirection.VALUES; // Beast - Single values array
             int i = aenumdirection.length;
 
             for (int j = 0; j < i; ++j) {
@@ -173,7 +173,7 @@ public abstract class BlockDiodeAbstract extends BlockFacingHorizontal {
 
     public void postBreak(World world, BlockPosition blockposition, IBlockData iblockdata) {
         if (this.d) {
-            EnumDirection[] aenumdirection = EnumDirection.VALUES; // Reaper - Single values array
+            EnumDirection[] aenumdirection = EnumDirection.VALUES; // Beast - Single values array
             int i = aenumdirection.length;
 
             for (int j = 0; j < i; ++j) {
diff --git a/src/main/java/net/minecraft/server/BlockDispenser.java b/src/main/java/net/minecraft/server/BlockDispenser.java
index 8127b22feb4c35f5c5abe30c7e7c33223eb65e13..5016cdf7d0f8df745e014f57a0e25db060b42078 100644
--- a/src/main/java/net/minecraft/server/BlockDispenser.java
+++ b/src/main/java/net/minecraft/server/BlockDispenser.java
@@ -56,7 +56,7 @@ public class BlockDispenser extends BlockTileEntity {
     // Paper end
 
     public boolean interact(World world, BlockPosition blockposition, IBlockData iblockdata, EntityHuman entityhuman, EnumHand enumhand, EnumDirection enumdirection, float f, float f1, float f2) {
-        if (false) { // Reaper - Remove isClientSide check
+        if (false) { // Beast - Remove isClientSide check
             return true;
         } else {
             TileEntity tileentity = world.getTileEntity(blockposition);
@@ -114,7 +114,7 @@ public class BlockDispenser extends BlockTileEntity {
     }
 
     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             this.dispense(world, blockposition);
         }
 
diff --git a/src/main/java/net/minecraft/server/BlockDoor.java b/src/main/java/net/minecraft/server/BlockDoor.java
index 5dfc36b696548e4657896741ff487e6a213cfaa2..beb2d4da52d6440b937b5d1f424b010d20a02246 100644
--- a/src/main/java/net/minecraft/server/BlockDoor.java
+++ b/src/main/java/net/minecraft/server/BlockDoor.java
@@ -135,7 +135,7 @@ public class BlockDoor extends Block {
             }
 
             if (flag) {
-                if (true) { // Reaper - Remove isClientSide check
+                if (true) { // Beast - Remove isClientSide check
                     this.b(world, blockposition, iblockdata, 0);
                 }
             } else {
diff --git a/src/main/java/net/minecraft/server/BlockDragonEgg.java b/src/main/java/net/minecraft/server/BlockDragonEgg.java
index 5a91a9ec112dcde83f60c25911c5b66ffadd4a32..028d8221abdbb114839e77c8fa9f89848c28060a 100644
--- a/src/main/java/net/minecraft/server/BlockDragonEgg.java
+++ b/src/main/java/net/minecraft/server/BlockDragonEgg.java
@@ -80,7 +80,7 @@ public class BlockDragonEgg extends Block {
 
                     blockposition1 = new BlockPosition(event.getToBlock().getX(), event.getToBlock().getY(), event.getToBlock().getZ());
                     // CraftBukkit end
-                    if (false) { // Reaper - Remove isClientSide check
+                    if (false) { // Beast - Remove isClientSide check
                         for (int j = 0; j < 128; ++j) {
                             double d0 = world.random.nextDouble();
                             float f = (world.random.nextFloat() - 0.5F) * 0.2F;
diff --git a/src/main/java/net/minecraft/server/BlockEnderPortal.java b/src/main/java/net/minecraft/server/BlockEnderPortal.java
index b372c5b0b857a02c8c5ea3de0a42cde0acc3a232..0c872b1f1e4d5b4fe9c1d7344ee8a6bf49f22e5a 100644
--- a/src/main/java/net/minecraft/server/BlockEnderPortal.java
+++ b/src/main/java/net/minecraft/server/BlockEnderPortal.java
@@ -38,7 +38,7 @@ public class BlockEnderPortal extends BlockTileEntity {
     }
 
     public void a(World world, BlockPosition blockposition, IBlockData iblockdata, Entity entity) {
-        if (!entity.isPassenger() && !entity.isVehicle() && entity.bf() && entity.getBoundingBox().c(iblockdata.e(world, blockposition).a(blockposition))) { // Reaper - Remove isClientSide check
+        if (!entity.isPassenger() && !entity.isVehicle() && entity.bf() && entity.getBoundingBox().c(iblockdata.e(world, blockposition).a(blockposition))) { // Beast - Remove isClientSide check
             // CraftBukkit start - Entity in portal
             EntityPortalEnterEvent event = new EntityPortalEnterEvent(entity.getBukkitEntity(), new org.bukkit.Location(world.getWorld(), blockposition.getX(), blockposition.getY(), blockposition.getZ()));
             world.getServer().getPluginManager().callEvent(event);
diff --git a/src/main/java/net/minecraft/server/BlockFalling.java b/src/main/java/net/minecraft/server/BlockFalling.java
index ba86e62c95918b62857628d43d69c759b80c0f61..3a75e8ad99392b8a24c27addbc802d04fb67b5fb 100644
--- a/src/main/java/net/minecraft/server/BlockFalling.java
+++ b/src/main/java/net/minecraft/server/BlockFalling.java
@@ -24,7 +24,7 @@ public class BlockFalling extends Block {
     }
 
     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             this.b(world, blockposition);
         }
 
@@ -35,7 +35,7 @@ public class BlockFalling extends Block {
             boolean flag = true;
 
             if (!BlockFalling.instaFall && world.areChunksLoadedBetween(blockposition.a(-32, -32, -32), blockposition.a(32, 32, 32))) {
-                if (true) { // Reaper - Remove isClientSide check
+                if (true) { // Beast - Remove isClientSide check
                     EntityFallingBlock entityfallingblock = new EntityFallingBlock(world, (double) blockposition.getX() + 0.5D, (double) blockposition.getY(), (double) blockposition.getZ() + 0.5D, world.getType(blockposition));
 
                     this.a(entityfallingblock);
diff --git a/src/main/java/net/minecraft/server/BlockFire.java b/src/main/java/net/minecraft/server/BlockFire.java
index a95ae4ba53027af435555e8c30883706bd60f02a..1fa0834434342eae396fdcd559c43c7ffa84a6e3 100644
--- a/src/main/java/net/minecraft/server/BlockFire.java
+++ b/src/main/java/net/minecraft/server/BlockFire.java
@@ -1,6 +1,6 @@
 package net.minecraft.server;
 
-import com.github.ruviolence.reaper.BeastConfig;
+import com.homomc.beast.BeastConfig;
 
 import java.util.Random;
 import javax.annotation.Nullable;
@@ -11,11 +11,11 @@ import org.bukkit.event.block.BlockBurnEvent;
 import org.bukkit.event.block.BlockSpreadEvent;
 // CraftBukkit end
 
-// Reaper start - FastUtil optimization
-import com.github.ruviolence.reaper.IdentityStrategy;
+// Beast start - FastUtil optimization
+import com.homomc.beast.IdentityStrategy;
 import it.unimi.dsi.fastutil.objects.Object2IntMap;
 import it.unimi.dsi.fastutil.objects.Object2IntOpenCustomHashMap;
-// Reaper end
+// Beast end
 
 public class BlockFire extends Block {
 
@@ -25,8 +25,8 @@ public class BlockFire extends Block {
     public static final BlockStateBoolean SOUTH = BlockStateBoolean.of("south");
     public static final BlockStateBoolean WEST = BlockStateBoolean.of("west");
     public static final BlockStateBoolean UPPER = BlockStateBoolean.of("up");
-    private final Object2IntMap<Block> flameChances = new Object2IntOpenCustomHashMap<>(new IdentityStrategy<>()); // Reaper - FastUtil optimization
-    private final Object2IntMap<Block> B = new Object2IntOpenCustomHashMap<>(new IdentityStrategy<>()); // Reaper - FastUtil optimization
+    private final Object2IntMap<Block> flameChances = new Object2IntOpenCustomHashMap<>(new IdentityStrategy<>()); // Beast - FastUtil optimization
+    private final Object2IntMap<Block> B = new Object2IntOpenCustomHashMap<>(new IdentityStrategy<>()); // Beast - FastUtil optimization
 
     public IBlockData updateState(IBlockData iblockdata, IBlockAccess iblockaccess, BlockPosition blockposition) {
         return !iblockaccess.getType(blockposition.down()).q() && !Blocks.FIRE.c(iblockaccess, blockposition.down()) ? iblockdata.set(BlockFire.NORTH, Boolean.valueOf(this.c(iblockaccess, blockposition.north()))).set(BlockFire.EAST, Boolean.valueOf(this.c(iblockaccess, blockposition.east()))).set(BlockFire.SOUTH, Boolean.valueOf(this.c(iblockaccess, blockposition.south()))).set(BlockFire.WEST, Boolean.valueOf(this.c(iblockaccess, blockposition.west()))).set(BlockFire.UPPER, Boolean.valueOf(this.c(iblockaccess, blockposition.up()))) : this.getBlockData();
@@ -188,7 +188,7 @@ public class BlockFire extends Block {
                                         }
 
                                         // CraftBukkit start - Call to stop spread of fire
-                                        if (/*world.getType(blockposition1) != Blocks.FIRE*/true) { // Reaper - Always true
+                                        if (/*world.getType(blockposition1) != Blocks.FIRE*/true) { // Beast - Always true
                                             if (CraftEventFactory.callBlockIgniteEvent(world, blockposition1.getX(), blockposition1.getY(), blockposition1.getZ(), blockposition.getX(), blockposition.getY(), blockposition.getZ()).isCancelled()) {
                                                 continue;
                                             }
@@ -227,14 +227,14 @@ public class BlockFire extends Block {
     }
 
     private int e(Block block) {
-        if (true) return this.B.getInt(block); // Reaper - FastUtil optimization
+        if (true) return this.B.getInt(block); // Beast - FastUtil optimization
         Integer integer = (Integer) this.B.get(block);
 
         return integer == null ? 0 : integer.intValue();
     }
 
     private int f(Block block) {
-        if (true) return this.flameChances.getInt(block); // Reaper - FastUtil optimization
+        if (true) return this.flameChances.getInt(block); // Beast - FastUtil optimization
         Integer integer = (Integer) this.flameChances.get(block);
 
         return integer == null ? 0 : integer.intValue();
@@ -281,7 +281,7 @@ public class BlockFire extends Block {
     }
 
     private boolean c(World world, BlockPosition blockposition) {
-        EnumDirection[] aenumdirection = EnumDirection.VALUES; // Reaper - Single values array
+        EnumDirection[] aenumdirection = EnumDirection.VALUES; // Beast - Single values array
         int i = aenumdirection.length;
 
         for (int j = 0; j < i; ++j) {
@@ -300,7 +300,7 @@ public class BlockFire extends Block {
             return 0;
         } else {
             int i = 0;
-            EnumDirection[] aenumdirection = EnumDirection.VALUES; // Reaper - Single values array
+            EnumDirection[] aenumdirection = EnumDirection.VALUES; // Beast - Single values array
             int j = aenumdirection.length;
 
             for (int k = 0; k < j; ++k) {
@@ -335,7 +335,7 @@ public class BlockFire extends Block {
     }
 
     public void onPlace(World world, BlockPosition blockposition, IBlockData iblockdata) {
-        if (world.worldProvider.getDimensionManager().getDimensionID() > 0 || (!BeastConfig.shapeCheckNetherPortal || !Blocks.PORTAL.b(world, blockposition))) { // Reaper
+        if (world.worldProvider.getDimensionManager().getDimensionID() > 0 || (!BeastConfig.shapeCheckNetherPortal || !Blocks.PORTAL.b(world, blockposition))) { // Beast
             if (!world.getType(blockposition.down()).q() && !this.c(world, blockposition)) {
                 fireExtinguished(world, blockposition); // CraftBukkit - fuel block broke
             } else {
diff --git a/src/main/java/net/minecraft/server/BlockFlowers.java b/src/main/java/net/minecraft/server/BlockFlowers.java
index e0c5aa1d2efc86cc53039a07e6637747d52fab73..241f1f32ebc6f027bd1ee0d6a9a204de55dd148b 100644
--- a/src/main/java/net/minecraft/server/BlockFlowers.java
+++ b/src/main/java/net/minecraft/server/BlockFlowers.java
@@ -77,7 +77,7 @@ public abstract class BlockFlowers extends BlockPlant {
         private final int m;
         private final String n;
         private final String o;
-        public static final BlockFlowers.EnumFlowerVarient[] VALUES = values(); // Reaper - Single values array
+        public static final BlockFlowers.EnumFlowerVarient[] VALUES = values(); // Beast - Single values array
 
         private EnumFlowerVarient(BlockFlowers.EnumFlowerType blockflowers_enumflowertype, int i, String s) {
             this(blockflowers_enumflowertype, i, s, s);
diff --git a/src/main/java/net/minecraft/server/BlockFlowing.java b/src/main/java/net/minecraft/server/BlockFlowing.java
index 60d1d7f54b1a2a30731cf6bd3b0e95412b075dd7..2694e319a6019098478dacbdd6e15993b59d2934 100644
--- a/src/main/java/net/minecraft/server/BlockFlowing.java
+++ b/src/main/java/net/minecraft/server/BlockFlowing.java
@@ -6,7 +6,7 @@ import java.util.Random;
 import java.util.Set;
 
 // CraftBukkit start
-import com.github.ruviolence.reaper.BeastConfig;
+import com.homomc.beast.BeastConfig;
 import org.bukkit.block.BlockFace;
 import org.bukkit.event.block.BlockFromToEvent;
 // CraftBukkit end
@@ -281,7 +281,7 @@ public class BlockFlowing extends BlockFluids {
      * Paper - Get flow speed. Throttle if its water and flowing adjacent to lava
      */
     public int getFlowSpeed(World world, BlockPosition blockposition) {
-        if (!BeastConfig.paperCustomFlowSpeed) return super.a(world); // Reaper
+        if (!BeastConfig.paperCustomFlowSpeed) return super.a(world); // Beast
         if (this.material == Material.LAVA) {
             return world.worldProvider.isSkyMissing() ? world.paperConfig.lavaFlowSpeedNether : world.paperConfig.lavaFlowSpeedNormal;
         }
diff --git a/src/main/java/net/minecraft/server/BlockFluids.java b/src/main/java/net/minecraft/server/BlockFluids.java
index 3179d7b6847b70324d968bcb4ba8e07424134731..0d4c9c309818648ec63347910f646439f3bc3702 100644
--- a/src/main/java/net/minecraft/server/BlockFluids.java
+++ b/src/main/java/net/minecraft/server/BlockFluids.java
@@ -112,7 +112,7 @@ public abstract class BlockFluids extends Block {
                         d2 += (double) (enumdirection.getAdjacentZ() * k);
                     }
                 }
-            } else if (/*j >= 0*/true) { // Reaper - Always true
+            } else if (/*j >= 0*/true) { // Beast - Always true
                 k = j - i;
                 d0 += (double) (enumdirection.getAdjacentX() * k);
                 d1 += (double) (enumdirection.getAdjacentY() * k);
@@ -159,7 +159,7 @@ public abstract class BlockFluids extends Block {
     public boolean e(World world, BlockPosition blockposition, IBlockData iblockdata) {
         if (this.material == Material.LAVA) {
             boolean flag = false;
-            EnumDirection[] aenumdirection = EnumDirection.VALUES; // Reaper - Single values array
+            EnumDirection[] aenumdirection = EnumDirection.VALUES; // Beast - Single values array
             int i = aenumdirection.length;
 
             for (int j = 0; j < i; ++j) {
@@ -198,7 +198,7 @@ public abstract class BlockFluids extends Block {
     }
 
     protected void fizz(World world, BlockPosition blockposition) {
-        /* // Reaper start - Clientside particles
+        /* // Beast start - Clientside particles
         double d0 = (double) blockposition.getX();
         double d1 = (double) blockposition.getY();
         double d2 = (double) blockposition.getZ();
@@ -210,7 +210,7 @@ public abstract class BlockFluids extends Block {
         for (int i = 0; i < 8; ++i) {
             world.addParticle(EnumParticle.SMOKE_LARGE, d0 + Math.random(), d1 + 1.2D, d2 + Math.random(), 0.0D, 0.0D, 0.0D, new int[0]);
         }
-        */ // Reaper end
+        */ // Beast end
 
     }
 
diff --git a/src/main/java/net/minecraft/server/BlockFurnace.java b/src/main/java/net/minecraft/server/BlockFurnace.java
index 0aae210a31f6ec5cfadfb8630e84a51a47b93a95..8401abde99b477cd813bc22bcb889d46e0b8d342 100644
--- a/src/main/java/net/minecraft/server/BlockFurnace.java
+++ b/src/main/java/net/minecraft/server/BlockFurnace.java
@@ -50,7 +50,7 @@ public class BlockFurnace extends BlockTileEntity {
     // Paper end
 
     public boolean interact(World world, BlockPosition blockposition, IBlockData iblockdata, EntityHuman entityhuman, EnumHand enumhand, EnumDirection enumdirection, float f, float f1, float f2) {
-        if (false) { // Reaper - Remove isClientSide check
+        if (false) { // Beast - Remove isClientSide check
             return true;
         } else {
             TileEntity tileentity = world.getTileEntity(blockposition);
diff --git a/src/main/java/net/minecraft/server/BlockGrass.java b/src/main/java/net/minecraft/server/BlockGrass.java
index d6e7e50714f4cd4051a5d4a301a3a360b66ed7aa..58f56ec710dfb27c40e927e0d1c94d7e37d25729 100644
--- a/src/main/java/net/minecraft/server/BlockGrass.java
+++ b/src/main/java/net/minecraft/server/BlockGrass.java
@@ -29,7 +29,7 @@ public class BlockGrass extends Block implements IBlockFragilePlantElement {
 
     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
         if (world.paperConfig.grassUpdateRate != 1 && (world.paperConfig.grassUpdateRate < 1 || (MinecraftServer.currentTick + blockposition.hashCode()) % world.paperConfig.grassUpdateRate != 0)) { return; } // Paper
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             int lightLevel = -1; // Paper
             if (world.getType(blockposition.up()).c() > 2 && (lightLevel = world.getLightLevel(blockposition.up())) < 4) { // Paper - move light check to end to avoid unneeded light lookups
                 // CraftBukkit start
diff --git a/src/main/java/net/minecraft/server/BlockIce.java b/src/main/java/net/minecraft/server/BlockIce.java
index 2861a808af5dbfd25776c15e1495b2e34aae4e47..064013e1caba4a0be4ef580642fc1e79cfc6eeb4 100644
--- a/src/main/java/net/minecraft/server/BlockIce.java
+++ b/src/main/java/net/minecraft/server/BlockIce.java
@@ -1,5 +1,7 @@
 package net.minecraft.server;
 
+import com.homomc.beast.OldCombatHelper;
+
 import java.util.Random;
 import javax.annotation.Nullable;
 
@@ -14,7 +16,7 @@ public class BlockIce extends BlockHalfTransparent {
 
     public void a(World world, EntityHuman entityhuman, BlockPosition blockposition, IBlockData iblockdata, @Nullable TileEntity tileentity, ItemStack itemstack) {
         entityhuman.b(StatisticList.a((Block) this));
-        entityhuman.applyExhaustion(com.github.ruviolence.reaper.OldCombatHelper.EXHAUSTION_BLOCK_BREAK); // Reaper - Old combat
+        entityhuman.applyExhaustion(OldCombatHelper.EXHAUSTION_BLOCK_BREAK); // Beast - Old combat
         if (this.n() && EnchantmentManager.getEnchantmentLevel(Enchantments.SILK_TOUCH, itemstack) > 0) {
             a(world, blockposition, this.u(iblockdata));
         } else {
diff --git a/src/main/java/net/minecraft/server/BlockIceFrost.java b/src/main/java/net/minecraft/server/BlockIceFrost.java
index ff83de0b74f9d089b7229287791d8559357e16b1..c1f5a200c5ef5c7d0db4870dbf8d89fffddbb5c5 100644
--- a/src/main/java/net/minecraft/server/BlockIceFrost.java
+++ b/src/main/java/net/minecraft/server/BlockIceFrost.java
@@ -44,7 +44,7 @@ public class BlockIceFrost extends BlockIce {
 
     private int c(World world, BlockPosition blockposition) {
         int i = 0;
-        EnumDirection[] aenumdirection = EnumDirection.VALUES; // Reaper - Single values array
+        EnumDirection[] aenumdirection = EnumDirection.VALUES; // Beast - Single values array
         int j = aenumdirection.length;
 
         for (int k = 0; k < j; ++k) {
@@ -72,7 +72,7 @@ public class BlockIceFrost extends BlockIce {
         } else {
             this.b(world, blockposition);
             if (flag) {
-                EnumDirection[] aenumdirection = EnumDirection.VALUES; // Reaper - Single values array
+                EnumDirection[] aenumdirection = EnumDirection.VALUES; // Beast - Single values array
                 int j = aenumdirection.length;
 
                 for (int k = 0; k < j; ++k) {
diff --git a/src/main/java/net/minecraft/server/BlockJukeBox.java b/src/main/java/net/minecraft/server/BlockJukeBox.java
index 170cfd4f4d0209d8474f4e76f5566a97e84a7908..7076b8d8c9fa989ebb0aa8252d17890f7967ab8f 100644
--- a/src/main/java/net/minecraft/server/BlockJukeBox.java
+++ b/src/main/java/net/minecraft/server/BlockJukeBox.java
@@ -35,7 +35,7 @@ public class BlockJukeBox extends BlockTileEntity {
     }
 
     public void dropRecord(World world, BlockPosition blockposition, IBlockData iblockdata) {
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             TileEntity tileentity = world.getTileEntity(blockposition);
 
             if (tileentity instanceof BlockJukeBox.TileEntityRecordPlayer) {
@@ -44,7 +44,7 @@ public class BlockJukeBox extends BlockTileEntity {
 
                 if (!itemstack.isEmpty()) {
                     world.triggerEffect(1010, blockposition, 0);
-                    // world.a(blockposition, (SoundEffect) null); // Reaper - Clientside sound
+                    // world.a(blockposition, (SoundEffect) null); // Beast - Clientside sound
                     blockjukebox_tileentityrecordplayer.setRecord(ItemStack.a);
                     float f = 0.7F;
                     double d0 = (double) (world.random.nextFloat() * 0.7F) + 0.15000000596046448D;
@@ -66,7 +66,7 @@ public class BlockJukeBox extends BlockTileEntity {
     }
 
     public void dropNaturally(World world, BlockPosition blockposition, IBlockData iblockdata, float f, int i) {
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             super.dropNaturally(world, blockposition, iblockdata, f, 0);
         }
     }
@@ -130,7 +130,7 @@ public class BlockJukeBox extends BlockTileEntity {
         public NBTTagCompound save(NBTTagCompound nbttagcompound) {
             super.save(nbttagcompound);
             if (!this.getRecord().isEmpty()) {
-                nbttagcompound.set("RecordItem", this.getRecord().save(new NBTTagCompound(4))); // Reaper - Use initial capacity
+                nbttagcompound.set("RecordItem", this.getRecord().save(new NBTTagCompound(4))); // Beast - Use initial capacity
             }
 
             return nbttagcompound;
diff --git a/src/main/java/net/minecraft/server/BlockLeaves.java b/src/main/java/net/minecraft/server/BlockLeaves.java
index aabff9faddc6cca84568ae54df879dd51fac55e2..50a113fe0d16040aeb239f45445fcc1afc162f0d 100644
--- a/src/main/java/net/minecraft/server/BlockLeaves.java
+++ b/src/main/java/net/minecraft/server/BlockLeaves.java
@@ -45,7 +45,7 @@ public abstract class BlockLeaves extends Block {
     }
 
     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             if (((Boolean) iblockdata.get(BlockLeaves.CHECK_DECAY)).booleanValue() && ((Boolean) iblockdata.get(BlockLeaves.DECAYABLE)).booleanValue()) {
                 boolean flag = true;
                 boolean flag1 = true;
@@ -86,7 +86,7 @@ public abstract class BlockLeaves extends Block {
                         }
                     }
 
-                    // Reaper start - Optimize
+                    // Beast start - Optimize
                     int key;
                     for (l = 1; l <= 4; ++l) {
                         for (i1 = -4; i1 <= 4; ++i1) {
@@ -122,7 +122,7 @@ public abstract class BlockLeaves extends Block {
                                         if (this.d[key] == -2) {
                                             this.d[key] = l;
                                         }
-                                        // Reaper end
+                                        // Beast end
                                     }
                                 }
                             }
@@ -164,7 +164,7 @@ public abstract class BlockLeaves extends Block {
     }
 
     public void dropNaturally(World world, BlockPosition blockposition, IBlockData iblockdata, float f, int i) {
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             int j = this.x(iblockdata);
 
             if (i > 0) {
diff --git a/src/main/java/net/minecraft/server/BlockLever.java b/src/main/java/net/minecraft/server/BlockLever.java
index c8ae14be1870da3a572e663549b565a9d9172bcd..a015a44a0d9f42df8bba242f095c91a864744a12 100644
--- a/src/main/java/net/minecraft/server/BlockLever.java
+++ b/src/main/java/net/minecraft/server/BlockLever.java
@@ -40,7 +40,7 @@ public class BlockLever extends Block {
     }
 
     public boolean canPlace(World world, BlockPosition blockposition) {
-        EnumDirection[] aenumdirection = EnumDirection.VALUES; // Reaper - Single values array
+        EnumDirection[] aenumdirection = EnumDirection.VALUES; // Beast - Single values array
         int i = aenumdirection.length;
 
         for (int j = 0; j < i; ++j) {
@@ -128,7 +128,7 @@ public class BlockLever extends Block {
     }
 
     public boolean interact(World world, BlockPosition blockposition, IBlockData iblockdata, EntityHuman entityhuman, EnumHand enumhand, EnumDirection enumdirection, float f, float f1, float f2) {
-        if (false) { // Reaper - Remove isClientSide check
+        if (false) { // Beast - Remove isClientSide check
             return true;
         } else {
             // CraftBukkit start - Interact Lever
diff --git a/src/main/java/net/minecraft/server/BlockMinecartDetector.java b/src/main/java/net/minecraft/server/BlockMinecartDetector.java
index edf61084233dd6cd11bc3d18c1869acc2af21388..cebce79abc71a16c0ecd3e391b0761c31cd8b8c5 100644
--- a/src/main/java/net/minecraft/server/BlockMinecartDetector.java
+++ b/src/main/java/net/minecraft/server/BlockMinecartDetector.java
@@ -36,7 +36,7 @@ public class BlockMinecartDetector extends BlockMinecartTrackAbstract {
     }
 
     public void a(World world, BlockPosition blockposition, IBlockData iblockdata, Entity entity) {
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             if (!((Boolean) iblockdata.get(BlockMinecartDetector.POWERED)).booleanValue()) {
                 this.e(world, blockposition, iblockdata);
             }
@@ -46,7 +46,7 @@ public class BlockMinecartDetector extends BlockMinecartTrackAbstract {
     public void a(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {}
 
     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
-        if (((Boolean) iblockdata.get(BlockMinecartDetector.POWERED)).booleanValue()) { // Reaper - Remove isClientSide check
+        if (((Boolean) iblockdata.get(BlockMinecartDetector.POWERED)).booleanValue()) { // Beast - Remove isClientSide check
             this.e(world, blockposition, iblockdata);
         }
     }
diff --git a/src/main/java/net/minecraft/server/BlockMinecartTrackAbstract.java b/src/main/java/net/minecraft/server/BlockMinecartTrackAbstract.java
index f442f5fca83667f0969d2112c2b0917f6ff330b9..238a17e5e33a420e2295f84173f33f358a43d536 100644
--- a/src/main/java/net/minecraft/server/BlockMinecartTrackAbstract.java
+++ b/src/main/java/net/minecraft/server/BlockMinecartTrackAbstract.java
@@ -55,7 +55,7 @@ public abstract class BlockMinecartTrackAbstract extends Block {
     }
 
     public void onPlace(World world, BlockPosition blockposition, IBlockData iblockdata) {
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             iblockdata = this.a(world, blockposition, iblockdata, true);
             if (this.c) {
                 iblockdata.doPhysics(world, blockposition, this, blockposition);
@@ -65,7 +65,7 @@ public abstract class BlockMinecartTrackAbstract extends Block {
     }
 
     public void a(IBlockData iblockdata, World world, BlockPosition blockposition, Block block, BlockPosition blockposition1) {
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             BlockMinecartTrackAbstract.EnumTrackPosition blockminecarttrackabstract_enumtrackposition = (BlockMinecartTrackAbstract.EnumTrackPosition) iblockdata.get(this.g());
             boolean flag = false;
 
@@ -84,10 +84,10 @@ public abstract class BlockMinecartTrackAbstract extends Block {
             }
 
             if (flag && !world.isEmpty(blockposition)) {
-                if (!BlockPiston.IS_WORKING) { // Reaper start - Fix rail dupe
+                if (!BlockPiston.IS_WORKING) { // Beast start - Fix rail dupe
                 this.b(world, blockposition, iblockdata, 0);
                 world.setAir(blockposition);
-                } // Reaper end
+                } // Beast end
             } else {
                 this.a(iblockdata, world, blockposition, block);
             }
@@ -98,7 +98,7 @@ public abstract class BlockMinecartTrackAbstract extends Block {
     protected void a(IBlockData iblockdata, World world, BlockPosition blockposition, Block block) {}
 
     protected IBlockData a(World world, BlockPosition blockposition, IBlockData iblockdata, boolean flag) {
-        return (new BlockMinecartTrackAbstract.MinecartTrackLogic(world, blockposition, iblockdata)).a(world.isBlockIndirectlyPowered(blockposition), flag).c(); // Reaper - Remove isClientSide check
+        return (new BlockMinecartTrackAbstract.MinecartTrackLogic(world, blockposition, iblockdata)).a(world.isBlockIndirectlyPowered(blockposition), flag).c(); // Beast - Remove isClientSide check
     }
 
     public EnumPistonReaction h(IBlockData iblockdata) {
diff --git a/src/main/java/net/minecraft/server/BlockMonsterEggs.java b/src/main/java/net/minecraft/server/BlockMonsterEggs.java
index 309cd8e7de1981b3761e9b4570bf6b087b02517b..0f7c93e9c6b2d28a82b4e128c8c18a4dc25840d3 100644
--- a/src/main/java/net/minecraft/server/BlockMonsterEggs.java
+++ b/src/main/java/net/minecraft/server/BlockMonsterEggs.java
@@ -48,7 +48,7 @@ public class BlockMonsterEggs extends Block {
     }
 
     public void dropNaturally(World world, BlockPosition blockposition, IBlockData iblockdata, float f, int i) {
-        if (world.getGameRules().getBoolean("doTileDrops")) { // Reaper - Remove isClientSide check
+        if (world.getGameRules().getBoolean("doTileDrops")) { // Beast - Remove isClientSide check
             EntitySilverfish entitysilverfish = new EntitySilverfish(world);
 
             entitysilverfish.setPositionRotation((double) blockposition.getX() + 0.5D, (double) blockposition.getY(), (double) blockposition.getZ() + 0.5D, 0.0F, 0.0F);
@@ -63,7 +63,7 @@ public class BlockMonsterEggs extends Block {
     }
 
     public void a(CreativeModeTab creativemodetab, NonNullList<ItemStack> nonnulllist) {
-        BlockMonsterEggs.EnumMonsterEggVarient[] ablockmonstereggs_enummonstereggvarient = BlockMonsterEggs.EnumMonsterEggVarient.VALUES; // Reaper - Single values array
+        BlockMonsterEggs.EnumMonsterEggVarient[] ablockmonstereggs_enummonstereggvarient = BlockMonsterEggs.EnumMonsterEggVarient.VALUES; // Beast - Single values array
         int i = ablockmonstereggs_enummonstereggvarient.length;
 
         for (int j = 0; j < i; ++j) {
@@ -118,7 +118,7 @@ public class BlockMonsterEggs extends Block {
         private final int h;
         private final String i;
         private final String j;
-        public static final BlockMonsterEggs.EnumMonsterEggVarient[] VALUES = values(); // Reaper - Single values array
+        public static final BlockMonsterEggs.EnumMonsterEggVarient[] VALUES = values(); // Beast - Single values array
 
         private EnumMonsterEggVarient(int i, String s) {
             this(i, s, s);
@@ -157,7 +157,7 @@ public class BlockMonsterEggs extends Block {
         public abstract IBlockData d();
 
         public static BlockMonsterEggs.EnumMonsterEggVarient a(IBlockData iblockdata) {
-            BlockMonsterEggs.EnumMonsterEggVarient[] ablockmonstereggs_enummonstereggvarient = VALUES; // Reaper - Single values array
+            BlockMonsterEggs.EnumMonsterEggVarient[] ablockmonstereggs_enummonstereggvarient = VALUES; // Beast - Single values array
             int i = ablockmonstereggs_enummonstereggvarient.length;
 
             for (int j = 0; j < i; ++j) {
diff --git a/src/main/java/net/minecraft/server/BlockMycel.java b/src/main/java/net/minecraft/server/BlockMycel.java
index 961a5fb16eb61c32c7a761a91baa1081f9f29704..d7fdc12894050b61d7326e9581d667f160c6e772 100644
--- a/src/main/java/net/minecraft/server/BlockMycel.java
+++ b/src/main/java/net/minecraft/server/BlockMycel.java
@@ -27,7 +27,7 @@ public class BlockMycel extends Block {
     }
 
     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             if (world.getLightLevel(blockposition.up()) < 4 && world.getType(blockposition.up()).c() > 2) {
                 // CraftBukkit start
                 // world.setTypeUpdate(blockposition, Blocks.DIRT.getBlockData().set(BlockDirt.VARIANT, BlockDirt.EnumDirtVariant.DIRT));
diff --git a/src/main/java/net/minecraft/server/BlockNetherWart.java b/src/main/java/net/minecraft/server/BlockNetherWart.java
index b0f26b9989e35dc940d573028a27deba797871c5..ca83fee79ff4ca06732b95020777f037b0abecef 100644
--- a/src/main/java/net/minecraft/server/BlockNetherWart.java
+++ b/src/main/java/net/minecraft/server/BlockNetherWart.java
@@ -39,7 +39,7 @@ public class BlockNetherWart extends BlockPlant {
     }
 
     public void dropNaturally(World world, BlockPosition blockposition, IBlockData iblockdata, float f, int i) {
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             int j = 1;
 
             if (((Integer) iblockdata.get(BlockNetherWart.AGE)).intValue() >= 3) {
diff --git a/src/main/java/net/minecraft/server/BlockNote.java b/src/main/java/net/minecraft/server/BlockNote.java
index 8adf8119513def3fb564647d6589617f891fcb99..84606c57bd0827b7f2ba5ece6940ff0b0db931da 100644
--- a/src/main/java/net/minecraft/server/BlockNote.java
+++ b/src/main/java/net/minecraft/server/BlockNote.java
@@ -31,7 +31,7 @@ public class BlockNote extends BlockTileEntity {
     }
 
     public boolean interact(World world, BlockPosition blockposition, IBlockData iblockdata, EntityHuman entityhuman, EnumHand enumhand, EnumDirection enumdirection, float f, float f1, float f2) {
-        if (false) { // Reaper - Remove isClientSide check
+        if (false) { // Beast - Remove isClientSide check
             return true;
         } else {
             TileEntity tileentity = world.getTileEntity(blockposition);
@@ -49,7 +49,7 @@ public class BlockNote extends BlockTileEntity {
     }
 
     public void attack(World world, BlockPosition blockposition, EntityHuman entityhuman) {
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             TileEntity tileentity = world.getTileEntity(blockposition);
 
             if (tileentity instanceof TileEntityNote) {
@@ -76,7 +76,7 @@ public class BlockNote extends BlockTileEntity {
         float f = (float) Math.pow(2.0D, (double) (j - 12) / 12.0D);
 
         world.a((EntityHuman) null, blockposition, this.b(i), SoundCategory.RECORDS, 3.0F, f);
-        // world.addParticle(EnumParticle.NOTE, (double) blockposition.getX() + 0.5D, (double) blockposition.getY() + 1.2D, (double) blockposition.getZ() + 0.5D, (double) j / 24.0D, 0.0D, 0.0D, new int[0]); // Reaper - Clientside particles
+        // world.addParticle(EnumParticle.NOTE, (double) blockposition.getX() + 0.5D, (double) blockposition.getY() + 1.2D, (double) blockposition.getZ() + 0.5D, (double) j / 24.0D, 0.0D, 0.0D, new int[0]); // Beast - Clientside particles
         return true;
     }
 
diff --git a/src/main/java/net/minecraft/server/BlockObserver.java b/src/main/java/net/minecraft/server/BlockObserver.java
index d5d73f662dafc014676c10c653e4cf5397cdd6e5..295ce543669e1f35f6454718bd97bb649ee7c9e0 100644
--- a/src/main/java/net/minecraft/server/BlockObserver.java
+++ b/src/main/java/net/minecraft/server/BlockObserver.java
@@ -49,7 +49,7 @@ public class BlockObserver extends BlockDirectional {
     public void a(IBlockData iblockdata, World world, BlockPosition blockposition, Block block, BlockPosition blockposition1) {}
 
     public void b(IBlockData iblockdata, World world, BlockPosition blockposition, Block block, BlockPosition blockposition1) {
-        if (blockposition.shift((EnumDirection) iblockdata.get(BlockObserver.FACING)).equals(blockposition1)) { // Reaper - Remove isClientSide check
+        if (blockposition.shift((EnumDirection) iblockdata.get(BlockObserver.FACING)).equals(blockposition1)) { // Beast - Remove isClientSide check
             this.d(iblockdata, world, blockposition);
         }
 
@@ -85,7 +85,7 @@ public class BlockObserver extends BlockDirectional {
     }
 
     public void onPlace(World world, BlockPosition blockposition, IBlockData iblockdata) {
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             if (((Boolean) iblockdata.get(BlockObserver.a)).booleanValue()) {
                 this.b(world, blockposition, iblockdata, world.random);
             }
diff --git a/src/main/java/net/minecraft/server/BlockPiston.java b/src/main/java/net/minecraft/server/BlockPiston.java
index 891f976207ba84dce6b788c6153c7854835cc008..e06741a13a304f25a66e6da4e3569ab8977e0a18 100644
--- a/src/main/java/net/minecraft/server/BlockPiston.java
+++ b/src/main/java/net/minecraft/server/BlockPiston.java
@@ -27,7 +27,7 @@ public class BlockPiston extends BlockDirectional {
     protected static final AxisAlignedBB f = new AxisAlignedBB(0.0D, 0.0D, 0.0D, 1.0D, 0.75D, 1.0D);
     protected static final AxisAlignedBB g = new AxisAlignedBB(0.0D, 0.25D, 0.0D, 1.0D, 1.0D, 1.0D);
     private final boolean sticky;
-    static boolean IS_WORKING = false; // Reaper - Fix rail and carpet dupe
+    static boolean IS_WORKING = false; // Beast - Fix rail and carpet dupe
 
     public BlockPiston(boolean flag) {
         super(Material.PISTON);
@@ -83,21 +83,21 @@ public class BlockPiston extends BlockDirectional {
 
     public void postPlace(World world, BlockPosition blockposition, IBlockData iblockdata, EntityLiving entityliving, ItemStack itemstack) {
         world.setTypeAndData(blockposition, iblockdata.set(BlockPiston.FACING, EnumDirection.a(blockposition, entityliving)), 2);
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             this.e(world, blockposition, iblockdata);
         }
 
     }
 
     public void a(IBlockData iblockdata, World world, BlockPosition blockposition, Block block, BlockPosition blockposition1) {
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             this.e(world, blockposition, iblockdata);
         }
 
     }
 
     public void onPlace(World world, BlockPosition blockposition, IBlockData iblockdata) {
-        if (world.getTileEntity(blockposition) == null) { // Reaper - Remove isClientSide check
+        if (world.getTileEntity(blockposition) == null) { // Beast - Remove isClientSide check
             this.e(world, blockposition, iblockdata);
         }
 
@@ -134,7 +134,7 @@ public class BlockPiston extends BlockDirectional {
     }
 
     private boolean a(World world, BlockPosition blockposition, EnumDirection enumdirection) {
-        EnumDirection[] aenumdirection = EnumDirection.VALUES; // Reaper - Single values array
+        EnumDirection[] aenumdirection = EnumDirection.VALUES; // Beast - Single values array
         int i = aenumdirection.length;
 
         int j;
@@ -151,7 +151,7 @@ public class BlockPiston extends BlockDirectional {
             return true;
         } else {
             BlockPosition blockposition1 = blockposition.up();
-            EnumDirection[] aenumdirection1 = EnumDirection.VALUES; // Reaper - Single values array
+            EnumDirection[] aenumdirection1 = EnumDirection.VALUES; // Beast - Single values array
 
             j = aenumdirection1.length;
 
@@ -170,7 +170,7 @@ public class BlockPiston extends BlockDirectional {
     public boolean a(IBlockData iblockdata, World world, BlockPosition blockposition, int i, int j) {
         EnumDirection enumdirection = (EnumDirection) iblockdata.get(BlockPiston.FACING);
 
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             boolean flag = this.a(world, blockposition, enumdirection);
 
             if (flag && i == 1) {
@@ -358,7 +358,7 @@ public class BlockPiston extends BlockDirectional {
                 aiblockdata[j] = iblockdata;
             }
 
-            IS_WORKING = true; // Reaper - Fix rail and carpet dupe
+            IS_WORKING = true; // Beast - Fix rail and carpet dupe
             for (k = list.size() - 1; k >= 0; --k) {
                 blockposition2 = (BlockPosition) list.get(k);
                 iblockdata = world.getType(blockposition2);
@@ -369,7 +369,7 @@ public class BlockPiston extends BlockDirectional {
                 --j;
                 aiblockdata[j] = iblockdata;
             }
-            IS_WORKING = false; // Reaper - Fix rail and carpet dupe
+            IS_WORKING = false; // Beast - Fix rail and carpet dupe
 
             BlockPosition blockposition3 = blockposition.shift(enumdirection);
 
diff --git a/src/main/java/net/minecraft/server/BlockPortal.java b/src/main/java/net/minecraft/server/BlockPortal.java
index cbd8e8b376e253b28e615ea4235af309372b9121..d0c4ddd3af02b4383b4ddf555460afb3e262f761 100644
--- a/src/main/java/net/minecraft/server/BlockPortal.java
+++ b/src/main/java/net/minecraft/server/BlockPortal.java
@@ -1,6 +1,6 @@
 package net.minecraft.server;
 
-import com.github.ruviolence.reaper.BeastConfig;
+import com.homomc.beast.BeastConfig;
 import com.google.common.cache.LoadingCache;
 import java.util.Random;
 import javax.annotation.Nullable;
@@ -99,13 +99,13 @@ public class BlockPortal extends BlockHalfTransparent {
             blockportal_shape = new BlockPortal.Shape(world, blockposition, EnumDirection.EnumAxis.X);
             if (!blockportal_shape.d() || blockportal_shape.e < blockportal_shape.width * blockportal_shape.height) {
                 world.setTypeUpdate(blockposition, Blocks.AIR.getBlockData());
-                if (BeastConfig.portalTravelInstantExpire) ((WorldServer) world).getTravelAgent().expirePortal(blockposition); // Reaper - Configurable portal travel cache
+                if (BeastConfig.portalTravelInstantExpire) ((WorldServer) world).getTravelAgent().expirePortal(blockposition); // Beast - Configurable portal travel cache
             }
         } else if (enumdirection_enumaxis == EnumDirection.EnumAxis.Z) {
             blockportal_shape = new BlockPortal.Shape(world, blockposition, EnumDirection.EnumAxis.Z);
             if (!blockportal_shape.d() || blockportal_shape.e < blockportal_shape.width * blockportal_shape.height) {
                 world.setTypeUpdate(blockposition, Blocks.AIR.getBlockData());
-                if (BeastConfig.portalTravelInstantExpire) ((WorldServer) world).getTravelAgent().expirePortal(blockposition); // Reaper - Configurable portal travel cache
+                if (BeastConfig.portalTravelInstantExpire) ((WorldServer) world).getTravelAgent().expirePortal(blockposition); // Beast - Configurable portal travel cache
             }
         }
 
@@ -175,10 +175,10 @@ public class BlockPortal extends BlockHalfTransparent {
         if (!blockportal_shape.d()) {
             return new ShapeDetector.ShapeDetectorCollection(blockposition, EnumDirection.NORTH, EnumDirection.UP, loadingcache, 1, 1, 1);
         } else {
-            int[] aint = new int[EnumDirection.EnumAxisDirection.VALUES.length]; // Reaper - Single values array
+            int[] aint = new int[EnumDirection.EnumAxisDirection.VALUES.length]; // Beast - Single values array
             EnumDirection enumdirection = blockportal_shape.c.f();
             BlockPosition blockposition1 = blockportal_shape.position.up(blockportal_shape.a() - 1);
-            EnumDirection.EnumAxisDirection[] aenumdirection_enumaxisdirection = EnumDirection.EnumAxisDirection.VALUES; // Reaper - Single values array
+            EnumDirection.EnumAxisDirection[] aenumdirection_enumaxisdirection = EnumDirection.EnumAxisDirection.VALUES; // Beast - Single values array
             int i = aenumdirection_enumaxisdirection.length;
 
             int j;
@@ -199,7 +199,7 @@ public class BlockPortal extends BlockHalfTransparent {
             }
 
             EnumDirection.EnumAxisDirection enumdirection_enumaxisdirection1 = EnumDirection.EnumAxisDirection.POSITIVE;
-            EnumDirection.EnumAxisDirection[] aenumdirection_enumaxisdirection1 = EnumDirection.EnumAxisDirection.VALUES; // Reaper - Single values array
+            EnumDirection.EnumAxisDirection[] aenumdirection_enumaxisdirection1 = EnumDirection.EnumAxisDirection.VALUES; // Beast - Single values array
 
             j = aenumdirection_enumaxisdirection1.length;
 
diff --git a/src/main/java/net/minecraft/server/BlockPosition.java b/src/main/java/net/minecraft/server/BlockPosition.java
index 3c8f2520c74afcb4e9bc68932401527c03e3f6cf..1abd91a6655baaee625c5e94fbde95c1bb589c41 100644
--- a/src/main/java/net/minecraft/server/BlockPosition.java
+++ b/src/main/java/net/minecraft/server/BlockPosition.java
@@ -39,91 +39,91 @@ public class BlockPosition extends BaseBlockPosition {
     }
 
     public BlockPosition(BaseBlockPosition baseblockposition) {
-        this(baseblockposition.a, baseblockposition.b, baseblockposition.c); // Reaper - Optimize BlockPosition 
+        this(baseblockposition.a, baseblockposition.b, baseblockposition.c); // Beast - Optimize BlockPosition
     }
 
     public BlockPosition add(double x, double y, double z) { return this.a(x, y, z); } // Paper - OBFHELPER
     public BlockPosition a(double d0, double d1, double d2) {
-        return d0 == 0.0D && d1 == 0.0D && d2 == 0.0D ? this : new BlockPosition((double) super.a + d0, (double) super.b + d1, (double) super.c + d2); // Reaper - Optimize BlockPosition 
+        return d0 == 0.0D && d1 == 0.0D && d2 == 0.0D ? this : new BlockPosition((double) super.a + d0, (double) super.b + d1, (double) super.c + d2); // Beast - Optimize BlockPosition
     }
 
     public BlockPosition a(int i, int j, int k) {
-        return i == 0 && j == 0 && k == 0 ? this : new BlockPosition(super.a + i, super.b + j, super.c + k); // Reaper - Optimize BlockPosition 
+        return i == 0 && j == 0 && k == 0 ? this : new BlockPosition(super.a + i, super.b + j, super.c + k); // Beast - Optimize BlockPosition
     }
 
     public BlockPosition a(BaseBlockPosition baseblockposition) {
-        return this.a(baseblockposition.a, baseblockposition.b, baseblockposition.c); // Reaper - Optimize BlockPosition 
+        return this.a(baseblockposition.a, baseblockposition.b, baseblockposition.c); // Beast - Optimize BlockPosition
     }
 
     public BlockPosition b(BaseBlockPosition baseblockposition) {
-        return this.a(-baseblockposition.a, -baseblockposition.b, -baseblockposition.c); // Reaper - Optimize BlockPosition 
+        return this.a(-baseblockposition.a, -baseblockposition.b, -baseblockposition.c); // Beast - Optimize BlockPosition
     }
 
     public BlockPosition up() {
-        return new BlockPosition(super.a, super.b + 1, super.c); // Reaper - Optimize BlockPosition // Paper - Optimize BlockPosition
+        return new BlockPosition(super.a, super.b + 1, super.c); // Beast - Optimize BlockPosition // Paper - Optimize BlockPosition
     }
 
     public BlockPosition up(int i) {
-        return i == 0 ? this : new BlockPosition(super.a, super.b + i, super.c); // Reaper - Optimize BlockPosition  // Paper - Optimize BlockPosition
+        return i == 0 ? this : new BlockPosition(super.a, super.b + i, super.c); // Beast - Optimize BlockPosition  // Paper - Optimize BlockPosition
     }
 
     public BlockPosition down() {
-        return new BlockPosition(super.a, super.b - 1, super.c); // Reaper - Optimize BlockPosition  // Paper - Optimize BlockPosition
+        return new BlockPosition(super.a, super.b - 1, super.c); // Beast - Optimize BlockPosition  // Paper - Optimize BlockPosition
     }
 
     public BlockPosition down(int i) {
-        return i == 0 ? this : new BlockPosition(super.a, super.b - i, super.c); // Reaper - Optimize BlockPosition // Paper - Optimize BlockPosition
+        return i == 0 ? this : new BlockPosition(super.a, super.b - i, super.c); // Beast - Optimize BlockPosition // Paper - Optimize BlockPosition
     }
 
     public BlockPosition north() {
-        return new BlockPosition(super.a, super.b, super.c - 1); // Reaper - Optimize BlockPosition // Paper - Optimize BlockPosition
+        return new BlockPosition(super.a, super.b, super.c - 1); // Beast - Optimize BlockPosition // Paper - Optimize BlockPosition
     }
 
     public BlockPosition north(int i) {
-        return i == 0 ? this : new BlockPosition(super.a, super.b, super.c - i); // Reaper - Optimize BlockPosition // Paper - Optimize BlockPosition
+        return i == 0 ? this : new BlockPosition(super.a, super.b, super.c - i); // Beast - Optimize BlockPosition // Paper - Optimize BlockPosition
     }
 
     public BlockPosition south() {
-        return new BlockPosition(super.a, super.b, super.c + 1); // Reaper - Optimize BlockPosition // Paper - Optimize BlockPosition
+        return new BlockPosition(super.a, super.b, super.c + 1); // Beast - Optimize BlockPosition // Paper - Optimize BlockPosition
     }
 
     public BlockPosition south(int i) {
-        return i == 0 ? this : new BlockPosition(super.a, super.b, super.c + i); // Reaper - Optimize BlockPosition // Paper - Optimize BlockPosition
+        return i == 0 ? this : new BlockPosition(super.a, super.b, super.c + i); // Beast - Optimize BlockPosition // Paper - Optimize BlockPosition
     }
 
     public BlockPosition west() {
-        return new BlockPosition(super.a - 1, super.b, super.c); // Reaper - Optimize BlockPosition // Paper - Optimize BlockPosition
+        return new BlockPosition(super.a - 1, super.b, super.c); // Beast - Optimize BlockPosition // Paper - Optimize BlockPosition
     }
 
     public BlockPosition west(int i) {
-        return i == 0 ? this : new BlockPosition(super.a - i, super.b, super.c); // Reaper - Optimize BlockPosition // Paper - Optimize BlockPosition
+        return i == 0 ? this : new BlockPosition(super.a - i, super.b, super.c); // Beast - Optimize BlockPosition // Paper - Optimize BlockPosition
     }
 
     public BlockPosition east() {
-        return new BlockPosition(super.a + 1, super.b, super.c); // Reaper - Optimize BlockPosition // Paper - Optimize BlockPosition
+        return new BlockPosition(super.a + 1, super.b, super.c); // Beast - Optimize BlockPosition // Paper - Optimize BlockPosition
     }
 
     public BlockPosition east(int i) {
-        return i == 0 ? this : new BlockPosition(super.a + i, super.b, super.c); // Reaper - Optimize BlockPosition // Paper - Optimize BlockPosition
+        return i == 0 ? this : new BlockPosition(super.a + i, super.b, super.c); // Beast - Optimize BlockPosition // Paper - Optimize BlockPosition
     }
 
     public BlockPosition shift(EnumDirection enumdirection) {
         // Paper Start - Optimize BlockPosition
         switch(enumdirection) {
             case UP:
-                return new BlockPosition(super.a, super.b + 1, super.c); // Reaper - Optimize BlockPosition
+                return new BlockPosition(super.a, super.b + 1, super.c); // Beast - Optimize BlockPosition
             case DOWN:
-                return new BlockPosition(super.a, super.b - 1, super.c); // Reaper - Optimize BlockPosition
+                return new BlockPosition(super.a, super.b - 1, super.c); // Beast - Optimize BlockPosition
             case NORTH:
-                return new BlockPosition(super.a, super.b, super.c - 1); // Reaper - Optimize BlockPosition
+                return new BlockPosition(super.a, super.b, super.c - 1); // Beast - Optimize BlockPosition
             case SOUTH:
-                return new BlockPosition(super.a, super.b, super.c + 1); // Reaper - Optimize BlockPosition
+                return new BlockPosition(super.a, super.b, super.c + 1); // Beast - Optimize BlockPosition
             case WEST:
-                return new BlockPosition(super.a - 1, super.b, super.c); // Reaper - Optimize BlockPosition
+                return new BlockPosition(super.a - 1, super.b, super.c); // Beast - Optimize BlockPosition
             case EAST:
-                return new BlockPosition(super.a + 1, super.b, super.c); // Reaper - Optimize BlockPosition
+                return new BlockPosition(super.a + 1, super.b, super.c); // Beast - Optimize BlockPosition
             default:
-                return new BlockPosition(super.a + enumdirection.getAdjacentX(), super.b + enumdirection.getAdjacentY(), super.c + enumdirection.getAdjacentZ()); // Reaper - Optimize BlockPosition
+                return new BlockPosition(super.a + enumdirection.getAdjacentX(), super.b + enumdirection.getAdjacentY(), super.c + enumdirection.getAdjacentZ()); // Beast - Optimize BlockPosition
         }
         // Paper End
     }
@@ -135,19 +135,19 @@ public class BlockPosition extends BaseBlockPosition {
         }
         switch(enumdirection) {
             case UP:
-                return new BlockPosition(super.a, super.b + i, super.c); // Reaper - Optimize BlockPosition
+                return new BlockPosition(super.a, super.b + i, super.c); // Beast - Optimize BlockPosition
             case DOWN:
-                return new BlockPosition(super.a, super.b - i, super.c); // Reaper - Optimize BlockPosition
+                return new BlockPosition(super.a, super.b - i, super.c); // Beast - Optimize BlockPosition
             case NORTH:
-                return new BlockPosition(super.a, super.b, super.c - i); // Reaper - Optimize BlockPosition
+                return new BlockPosition(super.a, super.b, super.c - i); // Beast - Optimize BlockPosition
             case SOUTH:
-                return new BlockPosition(super.a, super.b, super.c + i); // Reaper - Optimize BlockPosition
+                return new BlockPosition(super.a, super.b, super.c + i); // Beast - Optimize BlockPosition
             case WEST:
-                return new BlockPosition(super.a - i, super.b, super.c); // Reaper - Optimize BlockPosition
+                return new BlockPosition(super.a - i, super.b, super.c); // Beast - Optimize BlockPosition
             case EAST:
-                return new BlockPosition(super.a + i, super.b, super.c); // Reaper - Optimize BlockPosition
+                return new BlockPosition(super.a + i, super.b, super.c); // Beast - Optimize BlockPosition
             default:
-                return new BlockPosition(super.a + enumdirection.getAdjacentX() * i, super.b + enumdirection.getAdjacentY() * i, super.c + enumdirection.getAdjacentZ() * i); // Reaper - Optimize BlockPosition
+                return new BlockPosition(super.a + enumdirection.getAdjacentX() * i, super.b + enumdirection.getAdjacentY() * i, super.c + enumdirection.getAdjacentZ() * i); // Beast - Optimize BlockPosition
         }
         // Paper End
     }
@@ -159,22 +159,22 @@ public class BlockPosition extends BaseBlockPosition {
             return this;
 
         case CLOCKWISE_90:
-            return new BlockPosition(-super.c, super.b, super.a); // Reaper - Optimize BlockPosition
+            return new BlockPosition(-super.c, super.b, super.a); // Beast - Optimize BlockPosition
 
         case CLOCKWISE_180:
-            return new BlockPosition(-super.a, super.b, -super.c); // Reaper - Optimize BlockPosition
+            return new BlockPosition(-super.a, super.b, -super.c); // Beast - Optimize BlockPosition
 
         case COUNTERCLOCKWISE_90:
-            return new BlockPosition(super.c, super.b, -super.a); // Reaper - Optimize BlockPosition
+            return new BlockPosition(super.c, super.b, -super.a); // Beast - Optimize BlockPosition
         }
     }
 
     public BlockPosition c(BaseBlockPosition baseblockposition) {
-        return new BlockPosition(super.b * baseblockposition.getZ() - super.c * baseblockposition.getY(), super.c * baseblockposition.getX() - super.a * baseblockposition.getZ(), super.a * baseblockposition.getY() - super.b * baseblockposition.getX()); // Reaper - Optimize BlockPosition
+        return new BlockPosition(super.b * baseblockposition.getZ() - super.c * baseblockposition.getY(), super.c * baseblockposition.getX() - super.a * baseblockposition.getZ(), super.a * baseblockposition.getY() - super.b * baseblockposition.getX()); // Beast - Optimize BlockPosition
     }
 
     public long asLong() {
-        return ((long) super.a & BlockPosition.i) << BlockPosition.h | ((long) super.b & BlockPosition.j) << BlockPosition.g | ((long) super.c & BlockPosition.k); // Reaper - Optimize BlockPosition
+        return ((long) super.a & BlockPosition.i) << BlockPosition.h | ((long) super.b & BlockPosition.j) << BlockPosition.g | ((long) super.c & BlockPosition.k); // Beast - Optimize BlockPosition
     }
 
     public static BlockPosition fromLong(long i) {
@@ -283,10 +283,10 @@ public class BlockPosition extends BaseBlockPosition {
 
     public static final class PooledBlockPosition extends BlockPosition.MutableBlockPosition {
 
-        /* // Reaper start - Deactivate PooledBlockPosition
+        /* // Beast start - Deactivate PooledBlockPosition
         private boolean f;
         private static final List<BlockPosition.PooledBlockPosition> g = Lists.newArrayList();
-        */ // Reaper end
+        */ // Beast end
 
         private PooledBlockPosition(int i, int j, int k) {
             super(i, j, k);
@@ -302,8 +302,8 @@ public class BlockPosition extends BaseBlockPosition {
         }
 
         public static BlockPosition.PooledBlockPosition e(int i, int j, int k) {
-            /* // Reaper start - Deactivate PooledBlockPosition
-            // List list = BlockPosition.PooledBlockPosition.g; // Reaper - Unused
+            /* // Beast start - Deactivate PooledBlockPosition
+            // List list = BlockPosition.PooledBlockPosition.g; // Beast - Unused
 
             synchronized (BlockPosition.PooledBlockPosition.g) {
                 if (!BlockPosition.PooledBlockPosition.g.isEmpty()) {
@@ -316,15 +316,15 @@ public class BlockPosition extends BaseBlockPosition {
                     }
                 }
             }
-            */ // Reaper end
+            */ // Beast end
 
             return new BlockPosition.PooledBlockPosition(i, j, k);
         }
 
         public void free() { t(); } // Paper - OBFHELPER
         public void t() {
-            /* // Reaper start - Deactivate PooledBlockPosition
-            // List list = BlockPosition.PooledBlockPosition.g; // Reaper - Unused
+            /* // Beast start - Deactivate PooledBlockPosition
+            // List list = BlockPosition.PooledBlockPosition.g; // Beast - Unused
 
             synchronized (BlockPosition.PooledBlockPosition.g) {
                 if (BlockPosition.PooledBlockPosition.g.size() < 100) {
@@ -333,16 +333,16 @@ public class BlockPosition extends BaseBlockPosition {
 
                 this.f = true;
             }
-            */ // Reaper end
+            */ // Beast end
         }
 
         public BlockPosition.PooledBlockPosition f(int i, int j, int k) {
-            /* // Reaper start - Deactivate PooledBlockPosition
+            /* // Beast start - Deactivate PooledBlockPosition
             if (this.f) {
                 BlockPosition.b.error("PooledMutableBlockPosition modified after it was released.", new Throwable());
                 this.f = false;
             }
-            */ // Reaper end
+            */ // Beast end
 
             return (BlockPosition.PooledBlockPosition) super.c(i, j, k);
         }
@@ -383,12 +383,12 @@ public class BlockPosition extends BaseBlockPosition {
             return this.f(i, j, k);
         }
 
-        // Reaper start
+        // Beast start
         @Override
         public int hashCode() {
             return (((BaseBlockPosition) this).b + ((BaseBlockPosition) this).c * 31) * 31 + super.a;
         }
-        // Reaper end
+        // Beast end
     }
 
     public static class MutableBlockPosition extends BlockPosition {
@@ -478,11 +478,11 @@ public class BlockPosition extends BaseBlockPosition {
         }
 
         public BlockPosition.MutableBlockPosition c(EnumDirection enumdirection) {
-            return this.c(super.a + enumdirection.getAdjacentX(), ((BaseBlockPosition) this).b + enumdirection.getAdjacentY(), ((BaseBlockPosition) this).c + enumdirection.getAdjacentZ()); // Reaper - Optimize BlockPosition
+            return this.c(super.a + enumdirection.getAdjacentX(), ((BaseBlockPosition) this).b + enumdirection.getAdjacentY(), ((BaseBlockPosition) this).c + enumdirection.getAdjacentZ()); // Beast - Optimize BlockPosition
         }
 
         public BlockPosition.MutableBlockPosition c(EnumDirection enumdirection, int i) {
-            return this.c(super.a + enumdirection.getAdjacentX() * i, ((BaseBlockPosition) this).b + enumdirection.getAdjacentY() * i, ((BaseBlockPosition) this).c + enumdirection.getAdjacentZ() * i); // Reaper - Optimize BlockPosition
+            return this.c(super.a + enumdirection.getAdjacentX() * i, ((BaseBlockPosition) this).b + enumdirection.getAdjacentY() * i, ((BaseBlockPosition) this).c + enumdirection.getAdjacentZ() * i); // Beast - Optimize BlockPosition
         }
 
         public void p(int i) {
@@ -497,11 +497,11 @@ public class BlockPosition extends BaseBlockPosition {
             return super.c(baseblockposition);
         }
 
-        // Reaper start
+        // Beast start
         @Override
         public int hashCode() {
             return (((BaseBlockPosition) this).b + ((BaseBlockPosition) this).c * 31) * 31 + super.a;
         }
-        // Reaper end
+        // Beast end
     }
 }
diff --git a/src/main/java/net/minecraft/server/BlockPressurePlateAbstract.java b/src/main/java/net/minecraft/server/BlockPressurePlateAbstract.java
index 6b1056de7c67babca2769aba02ab33471a515e97..e5bd2fe631911386da641908d318141116a09e25 100644
--- a/src/main/java/net/minecraft/server/BlockPressurePlateAbstract.java
+++ b/src/main/java/net/minecraft/server/BlockPressurePlateAbstract.java
@@ -71,7 +71,7 @@ public abstract class BlockPressurePlateAbstract extends Block {
     public void a(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {}
 
     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             int i = this.getPower(iblockdata);
 
             if (i > 0) {
@@ -82,7 +82,7 @@ public abstract class BlockPressurePlateAbstract extends Block {
     }
 
     public void a(World world, BlockPosition blockposition, IBlockData iblockdata, Entity entity) {
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             int i = this.getPower(iblockdata);
 
             if (i == 0) {
diff --git a/src/main/java/net/minecraft/server/BlockPressurePlateWeighted.java b/src/main/java/net/minecraft/server/BlockPressurePlateWeighted.java
index c245747192cf4acb76feb3efe1572fc4ed12b4a6..c20462dea51ff6cd3403ec9d6431e62e810e33fe 100644
--- a/src/main/java/net/minecraft/server/BlockPressurePlateWeighted.java
+++ b/src/main/java/net/minecraft/server/BlockPressurePlateWeighted.java
@@ -45,7 +45,7 @@ public class BlockPressurePlateWeighted extends BlockPressurePlateAbstract {
         // CraftBukkit end
 
         if (i > 0) {
-            float f = (float) /*Math.min(this.weight, i)*/i / (float) this.weight; // Reaper - Optimize
+            float f = (float) /*Math.min(this.weight, i)*/i / (float) this.weight; // Beast - Optimize
 
             return MathHelper.f(f * 15.0F);
         } else {
diff --git a/src/main/java/net/minecraft/server/BlockPumpkin.java b/src/main/java/net/minecraft/server/BlockPumpkin.java
index c8725bedde674d2add59494b5efa88cc08e801fd..043e9b26621db1315f0ec6086cc30101a8a0180c 100644
--- a/src/main/java/net/minecraft/server/BlockPumpkin.java
+++ b/src/main/java/net/minecraft/server/BlockPumpkin.java
@@ -75,11 +75,11 @@ public class BlockPumpkin extends BlockFacingHorizontal {
                 CriterionTriggers.m.a(entityplayer, (Entity) entitysnowman);
             }
 
-            /* // Reaper start - Clientside particles
+            /* // Beast start - Clientside particles
             for (j = 0; j < 120; ++j) {
                 world.addParticle(EnumParticle.SNOW_SHOVEL, (double) blockposition1.getX() + world.random.nextDouble(), (double) blockposition1.getY() + world.random.nextDouble() * 2.5D, (double) blockposition1.getZ() + world.random.nextDouble(), 0.0D, 0.0D, 0.0D, new int[0]);
             }
-            */ // Reaper end
+            */ // Beast end
 
             for (j = 0; j < this.getDetectorSnowGolem().b(); ++j) {
                 ShapeDetectorBlock shapedetectorblock1 = shapedetector_shapedetectorcollection.a(0, j, 0);
@@ -115,11 +115,11 @@ public class BlockPumpkin extends BlockFacingHorizontal {
                     CriterionTriggers.m.a(entityplayer, (Entity) entityirongolem);
                 }
 
-                /* // Reaper start - Clientside particles
+                /* // Beast start - Clientside particles
                 for (j = 0; j < 120; ++j) {
                     world.addParticle(EnumParticle.SNOWBALL, (double) blockposition2.getX() + world.random.nextDouble(), (double) blockposition2.getY() + world.random.nextDouble() * 3.9D, (double) blockposition2.getZ() + world.random.nextDouble(), 0.0D, 0.0D, 0.0D, new int[0]);
                 }
-                */ // Reaper end
+                */ // Beast end
 
                 for (j = 0; j < this.getDetectorIronGolem().c(); ++j) {
                     for (int l = 0; l < this.getDetectorIronGolem().b(); ++l) {
diff --git a/src/main/java/net/minecraft/server/BlockRedstoneLamp.java b/src/main/java/net/minecraft/server/BlockRedstoneLamp.java
index 54b8f4ce4df363f0e22ae3183e12732c06a8fa50..1f736dea4a27bdf5ce9191a4e5661c9f8f6ae4c9 100644
--- a/src/main/java/net/minecraft/server/BlockRedstoneLamp.java
+++ b/src/main/java/net/minecraft/server/BlockRedstoneLamp.java
@@ -18,7 +18,7 @@ public class BlockRedstoneLamp extends Block {
     }
 
     public void onPlace(World world, BlockPosition blockposition, IBlockData iblockdata) {
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             if (this.a && !world.isBlockIndirectlyPowered(blockposition)) {
                 // CraftBukkit start
                 if (CraftEventFactory.callRedstoneChange(world, blockposition.getX(), blockposition.getY(), blockposition.getZ(), 15, 0).getNewCurrent() != 0) {
@@ -39,7 +39,7 @@ public class BlockRedstoneLamp extends Block {
     }
 
     public void a(IBlockData iblockdata, World world, BlockPosition blockposition, Block block, BlockPosition blockposition1) {
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             if (this.a && !world.isBlockIndirectlyPowered(blockposition)) {
                 world.a(blockposition, (Block) this, 4);
             } else if (!this.a && world.isBlockIndirectlyPowered(blockposition)) {
@@ -55,7 +55,7 @@ public class BlockRedstoneLamp extends Block {
     }
 
     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             if (this.a && !world.isBlockIndirectlyPowered(blockposition)) {
                 // CraftBukkit start
                 if (CraftEventFactory.callRedstoneChange(world, blockposition.getX(), blockposition.getY(), blockposition.getZ(), 15, 0).getNewCurrent() != 0) {
diff --git a/src/main/java/net/minecraft/server/BlockRedstoneOre.java b/src/main/java/net/minecraft/server/BlockRedstoneOre.java
index 95af391644a24a573e7228204a2a885baf1438ec..7e879be392f4eae2776379876cdc0d5425caa748 100644
--- a/src/main/java/net/minecraft/server/BlockRedstoneOre.java
+++ b/src/main/java/net/minecraft/server/BlockRedstoneOre.java
@@ -117,7 +117,7 @@ public class BlockRedstoneOre extends Block {
     }
 
     private void playEffect(World world, BlockPosition blockposition) {
-        if (true) return; // Reaper - Clientside particles
+        if (true) return; // Beast - Clientside particles
         Random random = world.random;
         double d0 = 0.0625D;
 
diff --git a/src/main/java/net/minecraft/server/BlockRedstoneTorch.java b/src/main/java/net/minecraft/server/BlockRedstoneTorch.java
index 06ff48a7ad780a71500b9402a1c0133248eee74f..3df0a243b32be033a946e2b94a70bda1955c1df9 100644
--- a/src/main/java/net/minecraft/server/BlockRedstoneTorch.java
+++ b/src/main/java/net/minecraft/server/BlockRedstoneTorch.java
@@ -52,7 +52,7 @@ public class BlockRedstoneTorch extends BlockTorch {
 
     public void onPlace(World world, BlockPosition blockposition, IBlockData iblockdata) {
         if (this.isOn) {
-            EnumDirection[] aenumdirection = EnumDirection.VALUES; // Reaper - Single values array
+            EnumDirection[] aenumdirection = EnumDirection.VALUES; // Beast - Single values array
             int i = aenumdirection.length;
 
             for (int j = 0; j < i; ++j) {
@@ -66,7 +66,7 @@ public class BlockRedstoneTorch extends BlockTorch {
 
     public void remove(World world, BlockPosition blockposition, IBlockData iblockdata) {
         if (this.isOn) {
-            EnumDirection[] aenumdirection = EnumDirection.VALUES; // Reaper - Single values array
+            EnumDirection[] aenumdirection = EnumDirection.VALUES; // Beast - Single values array
             int i = aenumdirection.length;
 
             for (int j = 0; j < i; ++j) {
@@ -117,7 +117,7 @@ public class BlockRedstoneTorch extends BlockTorch {
         if (this.isOn) {
             if (flag) {
                 // CraftBukkit start
-                if (/*oldCurrent != 0*/true) { // Reaper start - Always true
+                if (/*oldCurrent != 0*/true) { // Beast start - Always true
                     event.setNewCurrent(0);
                     manager.callEvent(event);
                     if (event.getNewCurrent() != 0) {
@@ -129,7 +129,7 @@ public class BlockRedstoneTorch extends BlockTorch {
                 if (this.a(world, blockposition, true)) {
                     world.a((EntityHuman) null, blockposition, SoundEffects.gm, SoundCategory.BLOCKS, 0.5F, 2.6F + (world.random.nextFloat() - world.random.nextFloat()) * 0.8F);
 
-                    /* // Reaper start - Clientside particles
+                    /* // Beast start - Clientside particles
                     for (int i = 0; i < 5; ++i) {
                         double d0 = (double) blockposition.getX() + random.nextDouble() * 0.6D + 0.2D;
                         double d1 = (double) blockposition.getY() + random.nextDouble() * 0.6D + 0.2D;
@@ -137,14 +137,14 @@ public class BlockRedstoneTorch extends BlockTorch {
 
                         world.addParticle(EnumParticle.SMOKE_NORMAL, d0, d1, d2, 0.0D, 0.0D, 0.0D, new int[0]);
                     }
-                    */ // Reaper end
+                    */ // Beast end
 
                     world.a(blockposition, world.getType(blockposition).getBlock(), 160);
                 }
             }
         } else if (!flag && !this.a(world, blockposition, false)) {
             // CraftBukkit start
-            if (/*oldCurrent != 15*/true) { // Reaper start - Always true
+            if (/*oldCurrent != 15*/true) { // Beast start - Always true
                 event.setNewCurrent(15);
                 manager.callEvent(event);
                 if (event.getNewCurrent() != 15) {
diff --git a/src/main/java/net/minecraft/server/BlockRedstoneWire.java b/src/main/java/net/minecraft/server/BlockRedstoneWire.java
index c34d1506b47c3d09bf31156453b95507696e8a3c..69cd54197a0308f1d2f36f7c59bb290d75cd99bc 100644
--- a/src/main/java/net/minecraft/server/BlockRedstoneWire.java
+++ b/src/main/java/net/minecraft/server/BlockRedstoneWire.java
@@ -38,19 +38,19 @@ public class BlockRedstoneWire extends Block {
         boolean flag2 = iblockdata.get(BlockRedstoneWire.SOUTH) != BlockRedstoneWire.EnumRedstoneWireConnection.NONE;
         boolean flag3 = iblockdata.get(BlockRedstoneWire.WEST) != BlockRedstoneWire.EnumRedstoneWireConnection.NONE;
 
-        if (flag || flag2 && /*!flag*/true && !flag1 && !flag3) { // Reaper - Optimize
+        if (flag || flag2 && /*!flag*/true && !flag1 && !flag3) { // Beast - Optimize
             i |= 1 << EnumDirection.NORTH.get2DRotationValue();
         }
 
-        if (flag1 || flag3 && !flag && /*!flag1*/true && !flag2) { // Reaper - Optimize
+        if (flag1 || flag3 && !flag && /*!flag1*/true && !flag2) { // Beast - Optimize
             i |= 1 << EnumDirection.EAST.get2DRotationValue();
         }
 
-        if (flag2 || flag && !flag1 && /*!flag2*/true && !flag3) { // Reaper - Optimize
+        if (flag2 || flag && !flag1 && /*!flag2*/true && !flag3) { // Beast - Optimize
             i |= 1 << EnumDirection.SOUTH.get2DRotationValue();
         }
 
-        if (flag3 || flag1 && !flag && !flag2 && /*!flag3*/true) { // Reaper - Optimize
+        if (flag3 || flag1 && !flag && !flag2 && /*!flag3*/true) { // Beast - Optimize
             i |= 1 << EnumDirection.WEST.get2DRotationValue();
         }
 
@@ -186,7 +186,7 @@ public class BlockRedstoneWire extends Block {
             }
 
             this.B.add(blockposition);
-            EnumDirection[] aenumdirection = EnumDirection.VALUES; // Reaper - Single values array
+            EnumDirection[] aenumdirection = EnumDirection.VALUES; // Beast - Single values array
             int i1 = aenumdirection.length;
 
             for (int j1 = 0; j1 < i1; ++j1) {
@@ -202,7 +202,7 @@ public class BlockRedstoneWire extends Block {
     private void b(World world, BlockPosition blockposition) {
         if (world.getType(blockposition).getBlock() == this) {
             world.applyPhysics(blockposition, this, false);
-            EnumDirection[] aenumdirection = EnumDirection.VALUES; // Reaper - Single values array
+            EnumDirection[] aenumdirection = EnumDirection.VALUES; // Beast - Single values array
             int i = aenumdirection.length;
 
             for (int j = 0; j < i; ++j) {
@@ -215,7 +215,7 @@ public class BlockRedstoneWire extends Block {
     }
 
     public void onPlace(World world, BlockPosition blockposition, IBlockData iblockdata) {
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             this.e(world, blockposition, iblockdata);
             Iterator iterator = EnumDirection.EnumDirectionLimit.VERTICAL.iterator();
 
@@ -251,8 +251,8 @@ public class BlockRedstoneWire extends Block {
 
     public void remove(World world, BlockPosition blockposition, IBlockData iblockdata) {
         super.remove(world, blockposition, iblockdata);
-        if (true) { // Reaper - Remove isClientSide check
-            EnumDirection[] aenumdirection = EnumDirection.VALUES; // Reaper - Single values array
+        if (true) { // Beast - Remove isClientSide check
+            EnumDirection[] aenumdirection = EnumDirection.VALUES; // Beast - Single values array
             int i = aenumdirection.length;
 
             for (int j = 0; j < i; ++j) {
@@ -298,7 +298,7 @@ public class BlockRedstoneWire extends Block {
     }
 
     public void a(IBlockData iblockdata, World world, BlockPosition blockposition, Block block, BlockPosition blockposition1) {
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             if (this.canPlace(world, blockposition)) {
                 this.e(world, blockposition, iblockdata);
             } else {
diff --git a/src/main/java/net/minecraft/server/BlockSapling.java b/src/main/java/net/minecraft/server/BlockSapling.java
index a2ebc6bdcfdaab28b535d2c48bc4f0d84b966126..495e5444d197085cef5571e0d7ef1652ec5a9517 100644
--- a/src/main/java/net/minecraft/server/BlockSapling.java
+++ b/src/main/java/net/minecraft/server/BlockSapling.java
@@ -32,7 +32,7 @@ public class BlockSapling extends BlockPlant implements IBlockFragilePlantElemen
     }
 
     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             super.b(world, blockposition, iblockdata, random);
             if (world.isLightLevel(blockposition.up(), 9) && random.nextInt(Math.max(2, (int) (((100.0F / world.spigotConfig.saplingModifier) * 7) + 0.5F))) == 0) { // Spigot // Paper
                 // CraftBukkit start
@@ -204,7 +204,7 @@ public class BlockSapling extends BlockPlant implements IBlockFragilePlantElemen
     }
 
     public void a(CreativeModeTab creativemodetab, NonNullList<ItemStack> nonnulllist) {
-        BlockWood.EnumLogVariant[] ablockwood_enumlogvariant = BlockWood.EnumLogVariant.VALUES; // Reaper - Single values array
+        BlockWood.EnumLogVariant[] ablockwood_enumlogvariant = BlockWood.EnumLogVariant.VALUES; // Beast - Single values array
         int i = ablockwood_enumlogvariant.length;
 
         for (int j = 0; j < i; ++j) {
diff --git a/src/main/java/net/minecraft/server/BlockShulkerBox.java b/src/main/java/net/minecraft/server/BlockShulkerBox.java
index 238e85d8360f9fa2815ac2323691dd58a1966313..52328810a0642eead80d2d52d86628fea4dce2a0 100644
--- a/src/main/java/net/minecraft/server/BlockShulkerBox.java
+++ b/src/main/java/net/minecraft/server/BlockShulkerBox.java
@@ -33,7 +33,7 @@ public class BlockShulkerBox extends BlockTileEntity {
     }
 
     public boolean interact(World world, BlockPosition blockposition, IBlockData iblockdata, EntityHuman entityhuman, EnumHand enumhand, EnumDirection enumdirection, float f, float f1, float f2) {
-        if (false) { // Reaper - Remove isClientSide check
+        if (false) { // Beast - Remove isClientSide check
             return true;
         } else if (entityhuman.isSpectator()) {
             return true;
@@ -101,7 +101,7 @@ public class BlockShulkerBox extends BlockTileEntity {
 
             if (!tileentityshulkerbox.r() && tileentityshulkerbox.F()) {
                 ItemStack itemstack = new ItemStack(Item.getItemOf(this));
-                NBTTagCompound nbttagcompound = new NBTTagCompound(1); // Reaper - Use initial capacity
+                NBTTagCompound nbttagcompound = new NBTTagCompound(1); // Beast - Use initial capacity
                 NBTTagCompound nbttagcompound1 = new NBTTagCompound();
 
                 nbttagcompound.set("BlockEntityTag", ((TileEntityShulkerBox) tileentity).f(nbttagcompound1));
@@ -132,7 +132,7 @@ public class BlockShulkerBox extends BlockTileEntity {
     }
 
     public void remove(World world, BlockPosition blockposition, IBlockData iblockdata) {
-        /* // Reaper start - Always false
+        /* // Beast start - Always false
         TileEntity tileentity = world.getTileEntity(blockposition);
 
         if (false && tileentity instanceof TileEntityShulkerBox) { // CraftBukkit - moved up
@@ -154,7 +154,7 @@ public class BlockShulkerBox extends BlockTileEntity {
             }
 
         }
-        */ // Reaper end
+        */ // Beast end
         world.updateAdjacentComparators(blockposition, iblockdata.getBlock()); // CraftBukkit - moved down
 
         super.remove(world, blockposition, iblockdata);
diff --git a/src/main/java/net/minecraft/server/BlockSign.java b/src/main/java/net/minecraft/server/BlockSign.java
index 2613f07dc6ec04b5e474d440d2a70c1c01339e14..57e8370e3366b681d02e7049b1d24842f5f4206d 100644
--- a/src/main/java/net/minecraft/server/BlockSign.java
+++ b/src/main/java/net/minecraft/server/BlockSign.java
@@ -49,10 +49,10 @@ public class BlockSign extends BlockTileEntity {
     }
 
     public boolean interact(World world, BlockPosition blockposition, IBlockData iblockdata, EntityHuman entityhuman, EnumHand enumhand, EnumDirection enumdirection, float f, float f1, float f2) {
-        if (false) { // Reaper - Remove isClientSide check
+        if (false) { // Beast - Remove isClientSide check
             return true;
         } else {
-            if (true) return true; // Reaper - Disable sign commands
+            if (true) return true; // Beast - Disable sign commands
             TileEntity tileentity = world.getTileEntity(blockposition);
 
             return tileentity instanceof TileEntitySign ? ((TileEntitySign) tileentity).b(entityhuman) : false;
diff --git a/src/main/java/net/minecraft/server/BlockSkull.java b/src/main/java/net/minecraft/server/BlockSkull.java
index 577f2e0af9b0c266cafca33e8153844627c3fe0f..9161ad8db105b38d04304e2e9d356165b27ee655 100644
--- a/src/main/java/net/minecraft/server/BlockSkull.java
+++ b/src/main/java/net/minecraft/server/BlockSkull.java
@@ -1,6 +1,6 @@
 package net.minecraft.server;
 
-import com.github.ruviolence.reaper.BeastConfig;
+import com.homomc.beast.BeastConfig;
 import com.google.common.base.Predicate;
 import java.util.Iterator;
 import java.util.Random;
@@ -99,14 +99,14 @@ public class BlockSkull extends BlockTileEntity {
                 ItemStack itemstack = this.a(world, blockposition, iblockdata);
 
                 if (tileentityskull.getSkullType() == 3 && tileentityskull.getGameProfile() != null) {
-                    // Reaper start - Optimize
-                    NBTTagCompound itemTag = new NBTTagCompound(1); // Reaper - Use initial capacity
+                    // Beast start - Optimize
+                    NBTTagCompound itemTag = new NBTTagCompound(1); // Beast - Use initial capacity
                     itemstack.setTag(itemTag);
-                    NBTTagCompound nbttagcompound = new NBTTagCompound(3); // Reaper - Use initial capacity
+                    NBTTagCompound nbttagcompound = new NBTTagCompound(3); // Beast - Use initial capacity
 
                     GameProfileSerializer.serialize(nbttagcompound, tileentityskull.getGameProfile());
                     itemTag.set("SkullOwner", nbttagcompound);
-                    // Reaper end
+                    // Beast end
                 }
 
                 a(world, blockposition, itemstack);
@@ -125,7 +125,7 @@ public class BlockSkull extends BlockTileEntity {
     }
 
     public void remove(World world, BlockPosition blockposition, IBlockData iblockdata) {
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             // CraftBukkit start - Drop item in code above, not here
             // if (!((Boolean) iblockdata.get(BlockSkull.NODROP)).booleanValue()) {
             if (false) {
@@ -157,13 +157,13 @@ public class BlockSkull extends BlockTileEntity {
     }
 
     public boolean b(World world, BlockPosition blockposition, ItemStack itemstack) {
-        return itemstack.getData() == 1 && blockposition.getY() >= 2 && world.getDifficulty() != EnumDifficulty.PEACEFUL ? this.e().a(world, blockposition) != null : false; // Reaper - Remove isClientSide check
+        return itemstack.getData() == 1 && blockposition.getY() >= 2 && world.getDifficulty() != EnumDifficulty.PEACEFUL ? this.e().a(world, blockposition) != null : false; // Beast - Remove isClientSide check
     }
 
     public void a(World world, BlockPosition blockposition, TileEntitySkull tileentityskull) {
-        if (!BeastConfig.shapeCheckWither) return; // Reaper
+        if (!BeastConfig.shapeCheckWither) return; // Beast
         if (world.captureBlockStates) return; // CraftBukkit
-        if (tileentityskull.getSkullType() == 1 && blockposition.getY() >= 2 && world.getDifficulty() != EnumDifficulty.PEACEFUL) { // Reaper - Remove isClientSide check
+        if (tileentityskull.getSkullType() == 1 && blockposition.getY() >= 2 && world.getDifficulty() != EnumDifficulty.PEACEFUL) { // Beast - Remove isClientSide check
             ShapeDetector shapedetector = this.g();
             ShapeDetector.ShapeDetectorCollection shapedetector_shapedetectorcollection = shapedetector.a(world, blockposition);
 
@@ -195,7 +195,7 @@ public class BlockSkull extends BlockTileEntity {
                     }
                 }
 
-                // BlockPosition blockposition1 = shapedetector_shapedetectorcollection.a(1, 0, 0).getPosition(); // Reaper - Clientside particles
+                // BlockPosition blockposition1 = shapedetector_shapedetectorcollection.a(1, 0, 0).getPosition(); // Beast - Clientside particles
                 EntityWither entitywither = new EntityWither(world);
                 BlockPosition blockposition2 = shapedetector_shapedetectorcollection.a(1, 2, 0).getPosition();
 
@@ -216,11 +216,11 @@ public class BlockSkull extends BlockTileEntity {
 
                 int k;
 
-                /* // Reaper start - Clientside particles
+                /* // Beast start - Clientside particles
                 for (k = 0; k < 120; ++k) {
                     world.addParticle(EnumParticle.SNOWBALL, (double) blockposition1.getX() + world.random.nextDouble(), (double) (blockposition1.getY() - 2) + world.random.nextDouble() * 3.9D, (double) blockposition1.getZ() + world.random.nextDouble(), 0.0D, 0.0D, 0.0D, new int[0]);
                 }
-                */ // Reaper end
+                */ // Beast end
 
                 for (k = 0; k < shapedetector.c(); ++k) {
                     for (int l = 0; l < shapedetector.b(); ++l) {
diff --git a/src/main/java/net/minecraft/server/BlockSoil.java b/src/main/java/net/minecraft/server/BlockSoil.java
index abffb9e8d6b7bb2e3cc4917583bf8ee997e98385..babb900d94b42c8e407db51d91a94821388d422b 100644
--- a/src/main/java/net/minecraft/server/BlockSoil.java
+++ b/src/main/java/net/minecraft/server/BlockSoil.java
@@ -51,7 +51,7 @@ public class BlockSoil extends Block {
 
     public void fallOn(World world, BlockPosition blockposition, Entity entity, float f) {
         super.fallOn(world, blockposition, entity, f); // CraftBukkit - moved here as game rules / events shouldn't affect fall damage.
-        if (world.random.nextFloat() < f - 0.5F && entity instanceof EntityLiving && (entity instanceof EntityHuman || world.getGameRules().getBoolean("mobGriefing")) && entity.width * entity.width * entity.length > 0.512F) { // Reaper - Remove isClientSide check
+        if (world.random.nextFloat() < f - 0.5F && entity instanceof EntityLiving && (entity instanceof EntityHuman || world.getGameRules().getBoolean("mobGriefing")) && entity.width * entity.width * entity.length > 0.512F) { // Beast - Remove isClientSide check
             // CraftBukkit start - Interact soil
             org.bukkit.event.Cancellable cancellable;
             if (entity instanceof EntityHuman) {
@@ -103,7 +103,7 @@ public class BlockSoil extends Block {
     }
 
     private boolean d(World world, BlockPosition blockposition) {
-        /* // Reaper start - Tuinity: remove abstract block iteration
+        /* // Beast start - Tuinity: remove abstract block iteration
         Iterator iterator = BlockPosition.b(blockposition.a(-4, 0, -4), blockposition.a(4, 1, 4)).iterator();
 
         BlockPosition.MutableBlockPosition blockposition_mutableblockposition;
@@ -137,7 +137,7 @@ public class BlockSoil extends Block {
         }
 
         return false;
-        // Reaper end - Tuinity: remove abstract block iteration
+        // Beast end - Tuinity: remove abstract block iteration
     }
 
     public void a(IBlockData iblockdata, World world, BlockPosition blockposition, Block block, BlockPosition blockposition1) {
diff --git a/src/main/java/net/minecraft/server/BlockSponge.java b/src/main/java/net/minecraft/server/BlockSponge.java
index ea16dc8964f2b4a181c3c2673a3fba6b3f108c76..b4ae5b5752c8c51af2f6b18756f869bdb084939f 100644
--- a/src/main/java/net/minecraft/server/BlockSponge.java
+++ b/src/main/java/net/minecraft/server/BlockSponge.java
@@ -1,6 +1,8 @@
 package net.minecraft.server;
 
 import com.google.common.collect.Lists;
+import com.homomc.beast.event.block.SpongeAbsorbEvent;
+
 import java.util.ArrayList;
 import java.util.LinkedList;
 
@@ -53,15 +55,15 @@ public class BlockSponge extends Block {
 
             blockposition1 = (BlockPosition) tuple.a();
             int j = ((Integer) tuple.b()).intValue();
-            EnumDirection[] aenumdirection = EnumDirection.VALUES; // Reaper - Single values array
+            EnumDirection[] aenumdirection = EnumDirection.VALUES; // Beast - Single values array
             int k = aenumdirection.length;
 
             for (int l = 0; l < k; ++l) {
                 EnumDirection enumdirection = aenumdirection[l];
                 BlockPosition blockposition2 = blockposition1.shift(enumdirection);
 
-                if (!arraylist.contains(blockposition2) && world.getType(blockposition2).getMaterial() == Material.WATER) { // Reaper - Add only unique blocks
-                    // world.setTypeAndData(blockposition2, Blocks.AIR.getBlockData(), 2); // Reaper - moved down
+                if (!arraylist.contains(blockposition2) && world.getType(blockposition2).getMaterial() == Material.WATER) { // Beast - Add only unique blocks
+                    // world.setTypeAndData(blockposition2, Blocks.AIR.getBlockData(), 2); // Beast - moved down
                     arraylist.add(blockposition2);
                     ++i;
                     if (j < 6) {
@@ -75,10 +77,10 @@ public class BlockSponge extends Block {
             }
         }
 
-        // Reaper start - SpongeAbsorbEvent
+        // Beast start - SpongeAbsorbEvent
         if (i == 0) return false;
 
-        if (com.github.ruviolence.reaper.event.block.SpongeAbsorbEvent.getHandlerList().getRegisteredListeners().length != 0) {
+        if (SpongeAbsorbEvent.getHandlerList().getRegisteredListeners().length != 0) {
             org.bukkit.craftbukkit.CraftWorld bWorld = world.getWorld();
             ArrayList<org.bukkit.block.Block> bBlocks = new ArrayList<>(arraylist.size());
 
@@ -87,7 +89,7 @@ public class BlockSponge extends Block {
                 bBlocks.add(bWorld.getBlockAt(pos.getX(), pos.getY(), pos.getZ()));
             }
 
-            com.github.ruviolence.reaper.event.block.SpongeAbsorbEvent event = new com.github.ruviolence.reaper.event.block.SpongeAbsorbEvent(bWorld.getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ()), bBlocks);
+            SpongeAbsorbEvent event = new SpongeAbsorbEvent(bWorld.getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ()), bBlocks);
             world.getServer().getPluginManager().callEvent(event);
 
             if (event.isCancelled()) return false;
@@ -110,7 +112,7 @@ public class BlockSponge extends Block {
         for (int k = 0; k < arraylist.size(); k++) {
             world.applyPhysics((BlockPosition) arraylist.get(k), Blocks.AIR, false);
         }
-        // Reaper end
+        // Beast end
 
         return i > 0;
     }
diff --git a/src/main/java/net/minecraft/server/BlockStainedGlass.java b/src/main/java/net/minecraft/server/BlockStainedGlass.java
index bea41c634831ff13e09e0bce24687a40baf64935..4acb1c8e62784b9128bc08931dcec3d0a170d4c0 100644
--- a/src/main/java/net/minecraft/server/BlockStainedGlass.java
+++ b/src/main/java/net/minecraft/server/BlockStainedGlass.java
@@ -17,7 +17,7 @@ public class BlockStainedGlass extends BlockHalfTransparent {
     }
 
     public void a(CreativeModeTab creativemodetab, NonNullList<ItemStack> nonnulllist) {
-        EnumColor[] aenumcolor = EnumColor.VALUES; // Reaper - Single values array
+        EnumColor[] aenumcolor = EnumColor.VALUES; // Beast - Single values array
         int i = aenumcolor.length;
 
         for (int j = 0; j < i; ++j) {
@@ -49,14 +49,14 @@ public class BlockStainedGlass extends BlockHalfTransparent {
     }
 
     public void onPlace(World world, BlockPosition blockposition, IBlockData iblockdata) {
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             BlockBeacon.c(world, blockposition);
         }
 
     }
 
     public void remove(World world, BlockPosition blockposition, IBlockData iblockdata) {
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             BlockBeacon.c(world, blockposition);
         }
 
diff --git a/src/main/java/net/minecraft/server/BlockStainedGlassPane.java b/src/main/java/net/minecraft/server/BlockStainedGlassPane.java
index b5513b43f3cb28fab8fb541d01f909f2298c87c6..3408cafd89c05668b10606eca9bb40ddeac54261 100644
--- a/src/main/java/net/minecraft/server/BlockStainedGlassPane.java
+++ b/src/main/java/net/minecraft/server/BlockStainedGlassPane.java
@@ -15,7 +15,7 @@ public class BlockStainedGlassPane extends BlockThin {
     }
 
     public void a(CreativeModeTab creativemodetab, NonNullList<ItemStack> nonnulllist) {
-        for (int i = 0; i < EnumColor.VALUES.length; ++i) { // Reaper - Single values array
+        for (int i = 0; i < EnumColor.VALUES.length; ++i) { // Beast - Single values array
             nonnulllist.add(new ItemStack(this, 1, i));
         }
 
@@ -67,14 +67,14 @@ public class BlockStainedGlassPane extends BlockThin {
     }
 
     public void onPlace(World world, BlockPosition blockposition, IBlockData iblockdata) {
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             BlockBeacon.c(world, blockposition);
         }
 
     }
 
     public void remove(World world, BlockPosition blockposition, IBlockData iblockdata) {
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             BlockBeacon.c(world, blockposition);
         }
 
diff --git a/src/main/java/net/minecraft/server/BlockState.java b/src/main/java/net/minecraft/server/BlockState.java
index 36169b3179ad4fa7d17247dd2ed258649f990cd2..0336410457df73025245e57b117c5d08f402e7d3 100644
--- a/src/main/java/net/minecraft/server/BlockState.java
+++ b/src/main/java/net/minecraft/server/BlockState.java
@@ -10,7 +10,7 @@ public abstract class BlockState<T extends Comparable<T>> implements IBlockState
     protected BlockState(String s, Class<T> oclass) {
         this.a = oclass;
         this.b = s;
-        this.hashCode = 31 * this.a.hashCode() + this.b.hashCode(); // Reaper - Move hash calc to the constructor
+        this.hashCode = 31 * this.a.hashCode() + this.b.hashCode(); // Beast - Move hash calc to the constructor
     }
 
     public String a() {
@@ -40,7 +40,7 @@ public abstract class BlockState<T extends Comparable<T>> implements IBlockState
     // Spigot start
     private int hashCode;
     public int hashCode() {
-        return hashCode; // Reaper - Move hash calc to the constructor
+        return hashCode; // Beast - Move hash calc to the constructor
     }
     // Spigot end
 }
diff --git a/src/main/java/net/minecraft/server/BlockStateBoolean.java b/src/main/java/net/minecraft/server/BlockStateBoolean.java
index f42fd1acb03071be815e08a7cc6a093c7d6249e6..c6ef530554b1a5cb7ac29cb4b39c939f5af3802a 100644
--- a/src/main/java/net/minecraft/server/BlockStateBoolean.java
+++ b/src/main/java/net/minecraft/server/BlockStateBoolean.java
@@ -10,7 +10,7 @@ public class BlockStateBoolean extends BlockState<Boolean> {
 
     protected BlockStateBoolean(String s) {
         super(s, Boolean.class);
-        this.hashCode = 31 * super.hashCode() + this.a.hashCode(); // Reaper - Move hash calc to the constructor
+        this.hashCode = 31 * super.hashCode() + this.a.hashCode(); // Beast - Move hash calc to the constructor
     }
 
     public Collection<Boolean> c() {
@@ -44,7 +44,7 @@ public class BlockStateBoolean extends BlockState<Boolean> {
     // Spigot start
     private int hashCode;
     public int hashCode() {
-        return hashCode; // Reaper - Move hash calc to the constructor
+        return hashCode; // Beast - Move hash calc to the constructor
     }
     // Spigot end
 }
diff --git a/src/main/java/net/minecraft/server/BlockStateInteger.java b/src/main/java/net/minecraft/server/BlockStateInteger.java
index 96ea215749fab0142fb77295647b46353688c846..d2a19e9255972faf0558fda29a4b47a187b79a9f 100644
--- a/src/main/java/net/minecraft/server/BlockStateInteger.java
+++ b/src/main/java/net/minecraft/server/BlockStateInteger.java
@@ -24,7 +24,7 @@ public class BlockStateInteger extends BlockState<Integer> {
             }
 
             this.a = ImmutableSet.copyOf(hashset);
-            this.hashCode = 31 * super.hashCode() + this.a.hashCode(); // Reaper - Move hash calc to the constructor
+            this.hashCode = 31 * super.hashCode() + this.a.hashCode(); // Beast - Move hash calc to the constructor
         }
     }
 
@@ -47,7 +47,7 @@ public class BlockStateInteger extends BlockState<Integer> {
     // Spigot start
     private int hashCode;
     public int hashCode() {
-        return hashCode; // Reaper - Move hash calc to the constructor
+        return hashCode; // Beast - Move hash calc to the constructor
     }
     // Spigot end
 
diff --git a/src/main/java/net/minecraft/server/BlockStateList.java b/src/main/java/net/minecraft/server/BlockStateList.java
index 5f0c7dcbfe46f33d3f35139114cc6adc7c8a7e70..da236753f99ce42443b005b07b1de52e89623984 100644
--- a/src/main/java/net/minecraft/server/BlockStateList.java
+++ b/src/main/java/net/minecraft/server/BlockStateList.java
@@ -23,7 +23,7 @@ import java.util.Map;
 import java.util.Map.Entry;
 import java.util.regex.Pattern;
 import javax.annotation.Nullable;
-import com.github.ruviolence.reaper.lithium.ai.pathing.PathNodeDefaults;// Reaper - Lithium: ai/pathing/LandPathNodeMaker
+import com.homomc.beast.lithium.ai.pathing.PathNodeDefaults;// Beast - Lithium: ai/pathing/LandPathNodeMaker
 
 public class BlockStateList {
 
@@ -150,22 +150,22 @@ public class BlockStateList {
         private final Block a;
         private final ImmutableMap<IBlockState<?>, Comparable<?>> b;
         private ImmutableTable<IBlockState<?>, Comparable<?>, IBlockData> c;
-        // Reaper start - Lithium: ai/pathing/LandPathNodeMaker
+        // Beast start - Lithium: ai/pathing/LandPathNodeMaker
         private PathType pathNodeType = PathType.OPEN;
         private PathType pathNodeTypeNeighbor = PathType.OPEN;
-        // Reaper end
+        // Beast end
 
         private BlockData(Block block, ImmutableMap<IBlockState<?>, Comparable<?>> immutablemap) {
             this.a = block;
             this.b = immutablemap;
         }
 
-        // Reaper start - Lithium: ai/pathing/LandPathNodeMaker
+        // Beast start - Lithium: ai/pathing/LandPathNodeMaker
         public void initPathTypeCache() {
             this.pathNodeType = PathNodeDefaults.getNodeType(this);
             this.pathNodeTypeNeighbor = PathNodeDefaults.getNeighborNodeType(getBlock());
         }
-        // Reaper end
+        // Beast end
 
         public Collection<IBlockState<?>> s() {
             return Collections.unmodifiableCollection(this.b.keySet());
@@ -384,7 +384,7 @@ public class BlockStateList {
             this(block, immutablemap);
         }
 
-        // Reaper start - Lithium: ai/pathing/LandPathNodeMaker
+        // Beast start - Lithium: ai/pathing/LandPathNodeMaker
         @Override
         public PathType getPathNodeType() {
             return this.pathNodeType;
@@ -394,6 +394,6 @@ public class BlockStateList {
         public PathType getNeighborPathNodeType() {
             return this.pathNodeTypeNeighbor;
         }
-        // Reaper end
+        // Beast end
     }
 }
diff --git a/src/main/java/net/minecraft/server/BlockStationary.java b/src/main/java/net/minecraft/server/BlockStationary.java
index 3ef5037cb5e329f7ddce498016e2e9bd48e8602d..e2d921bd8d61a453e3f131d5cc247e6efe0a715e 100644
--- a/src/main/java/net/minecraft/server/BlockStationary.java
+++ b/src/main/java/net/minecraft/server/BlockStationary.java
@@ -48,7 +48,7 @@ public class BlockStationary extends BlockFluids {
                         if (block.material == Material.AIR) {
                             if (this.c(world, blockposition1)) {
                                  // CraftBukkit start - Prevent lava putting something on fire
-                                if (/*world.getType(blockposition1) != Blocks.FIRE*/true) { // Reaper start - Always true
+                                if (/*world.getType(blockposition1) != Blocks.FIRE*/true) { // Beast start - Always true
                                     if (CraftEventFactory.callBlockIgniteEvent(world, blockposition1.getX(), blockposition1.getY(), blockposition1.getZ(), blockposition.getX(), blockposition.getY(), blockposition.getZ()).isCancelled()) {
                                         continue;
                                     }
@@ -72,7 +72,7 @@ public class BlockStationary extends BlockFluids {
                         if (world.isEmpty(blockposition2.up()) && this.d(world, blockposition2)) {
                             // CraftBukkit start - Prevent lava putting something on fire
                             BlockPosition up = blockposition2.up();
-                            if (/*world.getType(up) != Blocks.FIRE*/true) { // Reaper start - Always true
+                            if (/*world.getType(up) != Blocks.FIRE*/true) { // Beast start - Always true
                                 if (CraftEventFactory.callBlockIgniteEvent(world, up.getX(), up.getY(), up.getZ(), blockposition.getX(), blockposition.getY(), blockposition.getZ()).isCancelled()) {
                                     continue;
                                 }
@@ -88,7 +88,7 @@ public class BlockStationary extends BlockFluids {
     }
 
     protected boolean c(World world, BlockPosition blockposition) {
-        EnumDirection[] aenumdirection = EnumDirection.VALUES; // Reaper - Single values array
+        EnumDirection[] aenumdirection = EnumDirection.VALUES; // Beast - Single values array
         int i = aenumdirection.length;
 
         for (int j = 0; j < i; ++j) {
diff --git a/src/main/java/net/minecraft/server/BlockStem.java b/src/main/java/net/minecraft/server/BlockStem.java
index ffe9da1ead92539c84fcbd0028e039669717c815..66249aa5535282ffeaa4e727c0c88f71ea80c6b9 100644
--- a/src/main/java/net/minecraft/server/BlockStem.java
+++ b/src/main/java/net/minecraft/server/BlockStem.java
@@ -91,7 +91,7 @@ public class BlockStem extends BlockPlant implements IBlockFragilePlantElement {
 
     public void dropNaturally(World world, BlockPosition blockposition, IBlockData iblockdata, float f, int i) {
         super.dropNaturally(world, blockposition, iblockdata, f, i);
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             Item item = this.e();
 
             if (item != null) {
diff --git a/src/main/java/net/minecraft/server/BlockTNT.java b/src/main/java/net/minecraft/server/BlockTNT.java
index d8ac3bc7d7a43360ec055fcdedf9e5ae8d567912..ced4baae6edd990456b9d1a56839207d0b2c6ffe 100644
--- a/src/main/java/net/minecraft/server/BlockTNT.java
+++ b/src/main/java/net/minecraft/server/BlockTNT.java
@@ -28,7 +28,7 @@ public class BlockTNT extends Block {
     }
 
     public void wasExploded(World world, BlockPosition blockposition, Explosion explosion) {
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             EntityTNTPrimed entitytntprimed = new EntityTNTPrimed(world, (double) ((float) blockposition.getX() + 0.5F), (double) blockposition.getY(), (double) ((float) blockposition.getZ() + 0.5F), explosion.getSource());
 
             entitytntprimed.setFuseTicks((short) (world.random.nextInt(entitytntprimed.getFuseTicks() / 4) + entitytntprimed.getFuseTicks() / 8));
@@ -41,7 +41,7 @@ public class BlockTNT extends Block {
     }
 
     public void a(World world, BlockPosition blockposition, IBlockData iblockdata, EntityLiving entityliving) {
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             if (((Boolean) iblockdata.get(BlockTNT.EXPLODE)).booleanValue()) {
                 EntityTNTPrimed entitytntprimed = new EntityTNTPrimed(world, (double) ((float) blockposition.getX() + 0.5F), (double) blockposition.getY(), (double) ((float) blockposition.getZ() + 0.5F), entityliving);
 
@@ -71,7 +71,7 @@ public class BlockTNT extends Block {
     }
 
     public void a(World world, BlockPosition blockposition, IBlockData iblockdata, Entity entity) {
-        if (entity instanceof EntityArrow) { // Reaper - Remove isClientSide check
+        if (entity instanceof EntityArrow) { // Beast - Remove isClientSide check
             EntityArrow entityarrow = (EntityArrow) entity;
 
             if (entityarrow.isBurning()) {
diff --git a/src/main/java/net/minecraft/server/BlockTallPlant.java b/src/main/java/net/minecraft/server/BlockTallPlant.java
index 49d801f42d286756b44305e7a04d6e73c42665e7..b6390933ef6fba360d4b8cb83d308574b9d193bd 100644
--- a/src/main/java/net/minecraft/server/BlockTallPlant.java
+++ b/src/main/java/net/minecraft/server/BlockTallPlant.java
@@ -107,7 +107,7 @@ public class BlockTallPlant extends BlockPlant implements IBlockFragilePlantElem
     }
 
     public void a(World world, EntityHuman entityhuman, BlockPosition blockposition, IBlockData iblockdata, @Nullable TileEntity tileentity, ItemStack itemstack) {
-        if (itemstack.getItem() != Items.SHEARS || iblockdata.get(BlockTallPlant.HALF) != BlockTallPlant.EnumTallPlantHalf.LOWER || !this.b(world, blockposition, iblockdata, entityhuman)) { // Reaper - Remove isClientSide check
+        if (itemstack.getItem() != Items.SHEARS || iblockdata.get(BlockTallPlant.HALF) != BlockTallPlant.EnumTallPlantHalf.LOWER || !this.b(world, blockposition, iblockdata, entityhuman)) { // Beast - Remove isClientSide check
             super.a(world, entityhuman, blockposition, iblockdata, tileentity, itemstack);
         }
     }
@@ -123,7 +123,7 @@ public class BlockTallPlant extends BlockPlant implements IBlockFragilePlantElem
 
                     if (blocktallplant_enumtallflowervariants != BlockTallPlant.EnumTallFlowerVariants.FERN && blocktallplant_enumtallflowervariants != BlockTallPlant.EnumTallFlowerVariants.GRASS) {
                         world.setAir(blockposition.down(), true);
-                    } else if (false) { // Reaper - Remove isClientSide check
+                    } else if (false) { // Beast - Remove isClientSide check
                         world.setAir(blockposition.down());
                     } else if (!entityhuman.getItemInMainHand().isEmpty() && entityhuman.getItemInMainHand().getItem() == Items.SHEARS) {
                         this.b(world, blockposition, iblockdata1, entityhuman);
@@ -155,7 +155,7 @@ public class BlockTallPlant extends BlockPlant implements IBlockFragilePlantElem
     }
 
     public void a(CreativeModeTab creativemodetab, NonNullList<ItemStack> nonnulllist) {
-        BlockTallPlant.EnumTallFlowerVariants[] ablocktallplant_enumtallflowervariants = BlockTallPlant.EnumTallFlowerVariants.VALUES; // Reaper - Single values array
+        BlockTallPlant.EnumTallFlowerVariants[] ablocktallplant_enumtallflowervariants = BlockTallPlant.EnumTallFlowerVariants.VALUES; // Beast - Single values array
         int i = ablocktallplant_enumtallflowervariants.length;
 
         for (int j = 0; j < i; ++j) {
@@ -235,7 +235,7 @@ public class BlockTallPlant extends BlockPlant implements IBlockFragilePlantElem
         private final int h;
         private final String i;
         private final String j;
-        public static final BlockTallPlant.EnumTallFlowerVariants[] VALUES = values(); // Reaper - Single values array
+        public static final BlockTallPlant.EnumTallFlowerVariants[] VALUES = values(); // Beast - Single values array
 
         private EnumTallFlowerVariants(int i, String s) {
             this(i, s, s);
diff --git a/src/main/java/net/minecraft/server/BlockTileEntity.java b/src/main/java/net/minecraft/server/BlockTileEntity.java
index c6fceed4889f2a8896473a363dd7937c279afb76..d64ab762e5faa20831a63fe20bf266fae519d41a 100644
--- a/src/main/java/net/minecraft/server/BlockTileEntity.java
+++ b/src/main/java/net/minecraft/server/BlockTileEntity.java
@@ -1,5 +1,7 @@
 package net.minecraft.server;
 
+import com.homomc.beast.OldCombatHelper;
+
 import javax.annotation.Nullable;
 
 public abstract class BlockTileEntity extends Block implements ITileEntity {
@@ -33,8 +35,8 @@ public abstract class BlockTileEntity extends Block implements ITileEntity {
     public void a(World world, EntityHuman entityhuman, BlockPosition blockposition, IBlockData iblockdata, @Nullable TileEntity tileentity, ItemStack itemstack) {
         if (tileentity instanceof INamableTileEntity && ((INamableTileEntity) tileentity).hasCustomName()) {
             entityhuman.b(StatisticList.a((Block) this));
-            entityhuman.applyExhaustion(com.github.ruviolence.reaper.OldCombatHelper.EXHAUSTION_BLOCK_BREAK); // Reaper - Old combat
-            if (false) { // Reaper - Remove isClientSide check
+            entityhuman.applyExhaustion(OldCombatHelper.EXHAUSTION_BLOCK_BREAK); // Beast - Old combat
+            if (false) { // Beast - Remove isClientSide check
                 return;
             }
 
diff --git a/src/main/java/net/minecraft/server/BlockTrapdoor.java b/src/main/java/net/minecraft/server/BlockTrapdoor.java
index 1323fdcc0b8f46fc42489114345ab9f1d442aca3..e23353be1bb105a7b6e6f1066033d56cfe116eea 100644
--- a/src/main/java/net/minecraft/server/BlockTrapdoor.java
+++ b/src/main/java/net/minecraft/server/BlockTrapdoor.java
@@ -88,7 +88,7 @@ public class BlockTrapdoor extends Block {
     }
 
     public void a(IBlockData iblockdata, World world, BlockPosition blockposition, Block block, BlockPosition blockposition1) {
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             boolean flag = world.isBlockIndirectlyPowered(blockposition);
 
             if (flag || block.getBlockData().m()) {
diff --git a/src/main/java/net/minecraft/server/BlockTripwire.java b/src/main/java/net/minecraft/server/BlockTripwire.java
index a1aed8d701ec57aef071178bfb32694ef1ae2352..69a283b9f7e064ac44abe4fa18119c1acde336d1 100644
--- a/src/main/java/net/minecraft/server/BlockTripwire.java
+++ b/src/main/java/net/minecraft/server/BlockTripwire.java
@@ -64,7 +64,7 @@ public class BlockTripwire extends Block {
     }
 
     public void a(World world, BlockPosition blockposition, IBlockData iblockdata, EntityHuman entityhuman) {
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             if (!entityhuman.getItemInMainHand().isEmpty() && entityhuman.getItemInMainHand().getItem() == Items.SHEARS) {
                 world.setTypeAndData(blockposition, iblockdata.set(BlockTripwire.DISARMED, Boolean.valueOf(true)), 4);
             }
@@ -104,7 +104,7 @@ public class BlockTripwire extends Block {
     }
 
     public void a(World world, BlockPosition blockposition, IBlockData iblockdata, Entity entity) {
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             if (!((Boolean) iblockdata.get(BlockTripwire.POWERED)).booleanValue()) {
                 this.b(world, blockposition);
             }
@@ -114,7 +114,7 @@ public class BlockTripwire extends Block {
     public void a(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {}
 
     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             if (((Boolean) world.getType(blockposition).get(BlockTripwire.POWERED)).booleanValue()) {
                 this.b(world, blockposition);
             }
diff --git a/src/main/java/net/minecraft/server/BlockVine.java b/src/main/java/net/minecraft/server/BlockVine.java
index c03c9ce1494cfb5e4bda50a8ba76f7377e16cccc..d7ec17771c30649d43a0284a33e9b361fd62061e 100644
--- a/src/main/java/net/minecraft/server/BlockVine.java
+++ b/src/main/java/net/minecraft/server/BlockVine.java
@@ -132,7 +132,7 @@ public class BlockVine extends Block {
     }
 
     public void a(IBlockData iblockdata, World world, BlockPosition blockposition, Block block, BlockPosition blockposition1) {
-        if (!this.e(world, blockposition, iblockdata)) { // Reaper - Remove isClientSide check
+        if (!this.e(world, blockposition, iblockdata)) { // Beast - Remove isClientSide check
             this.b(world, blockposition, iblockdata, 0);
             world.setAir(blockposition);
         }
@@ -140,7 +140,7 @@ public class BlockVine extends Block {
     }
 
     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             if (world.random.nextInt(Math.max(1, (int) (100.0F / world.spigotConfig.vineModifier) * 4)) == 0) { // Spigot
                 boolean flag = true;
                 int i = 5;
@@ -299,7 +299,7 @@ public class BlockVine extends Block {
     }
 
     public void a(World world, EntityHuman entityhuman, BlockPosition blockposition, IBlockData iblockdata, @Nullable TileEntity tileentity, ItemStack itemstack) {
-        if (itemstack.getItem() == Items.SHEARS) { // Reaper - Remove isClientSide check
+        if (itemstack.getItem() == Items.SHEARS) { // Beast - Remove isClientSide check
             entityhuman.b(StatisticList.a((Block) this));
             a(world, blockposition, new ItemStack(Blocks.VINE, 1, 0));
         } else {
diff --git a/src/main/java/net/minecraft/server/BlockWood.java b/src/main/java/net/minecraft/server/BlockWood.java
index e0a3122fb64b80a62c0ad565e2cb9114183587bb..eb3dcaa1361e455dc6d416f910564a610435191a 100644
--- a/src/main/java/net/minecraft/server/BlockWood.java
+++ b/src/main/java/net/minecraft/server/BlockWood.java
@@ -15,7 +15,7 @@ public class BlockWood extends Block {
     }
 
     public void a(CreativeModeTab creativemodetab, NonNullList<ItemStack> nonnulllist) {
-        BlockWood.EnumLogVariant[] ablockwood_enumlogvariant = BlockWood.EnumLogVariant.VALUES; // Reaper - Single values array
+        BlockWood.EnumLogVariant[] ablockwood_enumlogvariant = BlockWood.EnumLogVariant.VALUES; // Beast - Single values array
         int i = ablockwood_enumlogvariant.length;
 
         for (int j = 0; j < i; ++j) {
@@ -51,7 +51,7 @@ public class BlockWood extends Block {
         private final String i;
         private final String j;
         private final MaterialMapColor k;
-        public static final BlockWood.EnumLogVariant[] VALUES = values(); // Reaper - Single values array
+        public static final BlockWood.EnumLogVariant[] VALUES = values(); // Beast - Single values array
 
         private EnumLogVariant(int i, String s, MaterialMapColor materialmapcolor) {
             this(i, s, s, materialmapcolor);
diff --git a/src/main/java/net/minecraft/server/ChatModifier.java b/src/main/java/net/minecraft/server/ChatModifier.java
index 507edfb72cacae4803870ca62509af671b0103ab..e30cc42855ec25e413b3d5dbbf914cee93151529 100644
--- a/src/main/java/net/minecraft/server/ChatModifier.java
+++ b/src/main/java/net/minecraft/server/ChatModifier.java
@@ -309,7 +309,7 @@ public class ChatModifier {
         return chatmodifier;
     }
 
-    // Reaper start
+    // Beast start
     public void reset() {
         this.a = null;
         this.b = null;
@@ -322,7 +322,7 @@ public class ChatModifier {
         this.i = null;
         this.j = null;
     }
-    // Reaper end
+    // Beast end
 
     public static class ChatModifierSerializer implements JsonDeserializer<ChatModifier>, JsonSerializer<ChatModifier> {
 
diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java
index 7591189919e6bc94875be2e97ac488d7c24fa05b..6a224e2e0020e3b38ba51e4605611b4ef410b98d 100644
--- a/src/main/java/net/minecraft/server/Chunk.java
+++ b/src/main/java/net/minecraft/server/Chunk.java
@@ -6,7 +6,7 @@ import java.util.HashMap;
 import java.util.UUID;
 // Paper end
 import com.destroystokyo.paper.exception.ServerInternalException;
-import com.github.ruviolence.reaper.BeastConfig;
+import com.homomc.beast.BeastConfig;
 import com.google.common.base.Predicate;
 import com.google.common.collect.Queues;
 import java.util.Arrays;
@@ -69,8 +69,8 @@ public class Chunk {
             return removed;
         }
     }
-    // final PaperLightingQueue.LightingQueue lightingQueue = new PaperLightingQueue.LightingQueue(this); // Reaper - Remove Paper lighting queue
-    final ReaperLightingQueue.LightingQueue lightingQueue = new ReaperLightingQueue.LightingQueue(this); // Reaper
+    // final PaperLightingQueue.LightingQueue lightingQueue = new PaperLightingQueue.LightingQueue(this); // Beast - Remove Paper lighting queue
+    final BeastLightingQueue.LightingQueue lightingQueue = new BeastLightingQueue.LightingQueue(this); // Beast
     // Paper end
     private boolean done;
     private boolean lit;
@@ -121,7 +121,7 @@ public class Chunk {
     }
     // CraftBukkit end
 
-    // Reaper start - Cache random ticks
+    // Beast start - Cache random ticks
     private int lightningTick;
     boolean shouldDoLightning(Random random) {
         if (this.lightningTick-- <= 0) {
@@ -138,7 +138,7 @@ public class Chunk {
         }
         return false;
     }
-    // Reaper end
+    // Beast end
 
     public Chunk(World world, int i, int j) {
         this.sections = new ChunkSection[16];
@@ -155,15 +155,15 @@ public class Chunk {
         this.heightMap = new int[256];
 
         for (int k = 0; k < this.entitySlices.length; ++k) {
-            this.entitySlices[k] = new com.destroystokyo.paper.util.MapList.ObjectMapList<>(); // Spigot // Reaper - UnsafeList -> ObjectMapList
+            this.entitySlices[k] = new com.destroystokyo.paper.util.MapList.ObjectMapList<>(); // Spigot // Beast - UnsafeList -> ObjectMapList
         }
 
         Arrays.fill(this.h, -999);
         Arrays.fill(this.g, (byte) -1);
-        // Reaper start - Cache random ticks
+        // Beast start - Cache random ticks
         shouldDoLightning(world.random);
         shouldDoIceAndSnow(world.random);
-        // Reaper end
+        // Beast end
         // CraftBukkit start
         this.bukkitChunk = new org.bukkit.craftbukkit.CraftChunk(this);
         this.chunkKey = ChunkCoordIntPair.a(this.locX, this.locZ);
@@ -296,7 +296,7 @@ public class Chunk {
     }
 
     private void h(boolean flag) {
-        // this.world.methodProfiler.a("recheckGaps"); // Reaper - Remove MethodProfiler
+        // this.world.methodProfiler.a("recheckGaps"); // Beast - Remove MethodProfiler
         if (this.areNeighborsLoaded(1)) { // Paper
             for (int i = 0; i < 16; ++i) {
                 for (int j = 0; j < 16; ++j) {
@@ -323,7 +323,7 @@ public class Chunk {
                         }
 
                         if (flag) {
-                            // this.world.methodProfiler.b(); // Reaper - Remove MethodProfiler
+                            // this.world.methodProfiler.b(); // Beast - Remove MethodProfiler
                             return;
                         }
                     }
@@ -333,7 +333,7 @@ public class Chunk {
             this.m = false;
         }
 
-        // this.world.methodProfiler.b(); // Reaper - Remove MethodProfiler
+        // this.world.methodProfiler.b(); // Beast - Remove MethodProfiler
     }
 
     private void b(int i, int j, int k) {
@@ -477,7 +477,7 @@ public class Chunk {
         return getBlockData(i, j, k);
     }
 
-    /* // Reaper start - Optimize unused
+    /* // Beast start - Optimize unused
     public IBlockData unused(final int i, final int j, final int k) {
     // Paper end
         if (this.world.N() == WorldType.DEBUG_ALL_BLOCK_STATES) {
@@ -520,14 +520,14 @@ public class Chunk {
             }
         }
     }
-    */ // Reaper end
+    */ // Beast end
 
-    // Reaper start
+    // Beast start
     @Nullable
     public IBlockData a(BlockPosition blockposition, IBlockData iblockdata) { return setBlockState(blockposition, iblockdata, true, true); }
     @Nullable
     public IBlockData setBlockState(BlockPosition blockposition, IBlockData iblockdata, boolean notify, boolean updateLight) {
-        // Reaper end
+        // Beast end
         int i = blockposition.getX() & 15;
         int j = blockposition.getY();
         int k = blockposition.getZ() & 15;
@@ -560,42 +560,42 @@ public class Chunk {
 
             chunksection.setType(i, j & 15, k, iblockdata);
             if (block1 != block) {
-                if (true) { // Reaper - Remove isClientSide check
-                    if (notify) // Reaper
+                if (true) { // Beast - Remove isClientSide check
+                    if (notify) // Beast
                     block1.remove(this.world, blockposition, iblockdata1);
                 } else if (block1 instanceof ITileEntity) {
                     this.world.s(blockposition);
                 }
-                // Reaper start
+                // Beast start
                 if (!notify && block1 instanceof ITileEntity) {
                     world.s(blockposition);
                 }
-                // Reaper end
+                // Beast end
             }
 
             if (chunksection.getType(i, j & 15, k).getBlock() != block) {
                 return null;
             } else {
-                if (updateLight) // Reaper start
+                if (updateLight) // Beast start
                 if (flag) {
                     this.initLighting();
                 } else {
-                    // this.runOrQueueLightUpdate(() -> { // Reaper - Remove Paper lighting queue // Paper - Queue light update
+                    // this.runOrQueueLightUpdate(() -> { // Beast - Remove Paper lighting queue // Paper - Queue light update
                     int j1 = iblockdata.c();
                     int k1 = iblockdata1.c();
 
                     if (j1 > 0) {
                         if (j >= i1) {
-                            this.runOrQueueLightUpdate(i, j + 1, k, 1); // Reaper
+                            this.runOrQueueLightUpdate(i, j + 1, k, 1); // Beast
                         }
                     } else if (j == i1 - 1) {
-                        this.runOrQueueLightUpdate(i, j, k, 1); // Reaper
+                        this.runOrQueueLightUpdate(i, j, k, 1); // Beast
                     }
 
                     if (j1 != k1 && (j1 < k1 || this.getBrightness(EnumSkyBlock.SKY, blockposition) > 0 || this.getBrightness(EnumSkyBlock.BLOCK, blockposition) > 0)) {
-                        this.runOrQueueLightUpdate(i, 0, k, 2); // Reaper
+                        this.runOrQueueLightUpdate(i, 0, k, 2); // Beast
                     }
-                    // }); // Reaper - Remove Paper lighting queue // Paper
+                    // }); // Beast - Remove Paper lighting queue // Paper
                 }
 
                 TileEntity tileentity;
@@ -608,8 +608,8 @@ public class Chunk {
                 }
 
                 // CraftBukkit - Don't place while processing the BlockPlaceEvent, unless it's a BlockContainer. Prevents blocks such as TNT from activating when cancelled.
-                if (notify) // Reaper
-                if (block1 != block && (!this.world.captureBlockStates || block instanceof BlockTileEntity)) { // Reaper - Remove isClientSide check
+                if (notify) // Beast
+                if (block1 != block && (!this.world.captureBlockStates || block instanceof BlockTileEntity)) { // Beast - Remove isClientSide check
                     block.onPlace(this.world, blockposition, iblockdata);
                 }
 
@@ -749,7 +749,7 @@ public class Chunk {
                 return;
             }
         }
-        for ( EnumCreatureType creatureType : EnumCreatureType.VALUES ) // Reaper - Single values array
+        for ( EnumCreatureType creatureType : EnumCreatureType.VALUES ) // Beast - Single values array
         {
             if ( creatureType.a().isAssignableFrom( entity.getClass() ) )
             {
@@ -795,7 +795,7 @@ public class Chunk {
                 return;
             }
         }
-        for ( EnumCreatureType creatureType : EnumCreatureType.VALUES ) // Reaper - Single values array
+        for ( EnumCreatureType creatureType : EnumCreatureType.VALUES ) // Beast - Single values array
         {
             if ( creatureType.a().isAssignableFrom( entity.getClass() ) )
             {
@@ -861,10 +861,10 @@ public class Chunk {
         tileentity.a(this.world);
         tileentity.setPosition(blockposition);
         if (this.getBlockData(blockposition).getBlock() instanceof ITileEntity) {
-            // Reaper start - Optimize map get
+            // Beast start - Optimize map get
             TileEntity tileEntityO = this.tileEntities.get(blockposition);
             if (tileEntityO != null) tileEntityO.z();
-            // Reaper end
+            // Beast end
 
             tileentity.A();
             this.tileEntities.put(blockposition, tileentity);
@@ -907,7 +907,7 @@ public class Chunk {
 
     public void addEntities() {
         this.j = true;
-        // Reaper start - Optimize
+        // Beast start - Optimize
         if (!this.tileEntities.isEmpty())
         this.world.b(this.tileEntities.values());
         checkHasEntities:
@@ -919,7 +919,7 @@ public class Chunk {
             }
             return;
         }
-        // Reaper end
+        // Beast end
         List[] aentityslice = this.entitySlices; // Spigot
         int i = aentityslice.length;
         List<Entity> toAdd = new java.util.ArrayList<>(32); // Paper
@@ -1076,7 +1076,7 @@ public class Chunk {
                             int l = aentity.length;
 
                             for (int i1 = 0; i1 < l; ++i1) {
-                                Entity entity2 = aentity[i1]; // Reaper - Inline
+                                Entity entity2 = aentity[i1]; // Beast - Inline
 
                                 if (entity2 != entity && entity2.getBoundingBox().c(axisalignedbb) && (predicate == null || predicate.apply(entity2))) {
                                     list.add(entity2);
@@ -1261,7 +1261,7 @@ public class Chunk {
 
     public void b(boolean flag) {
         if (this.m && this.world.worldProvider.m() && !flag) {
-            this.h(false); // Reaper - Remove isClientSide check
+            this.h(false); // Beast - Remove isClientSide check
         }
 
         this.r = true;
@@ -1381,15 +1381,15 @@ public class Chunk {
 
                 ++this.x;
 
-                // Reaper start - Optimize
+                // Beast start - Optimize
                 ChunkSection section = this.sections[j];
                 for (int i1 = 0; i1 < 16; ++i1) {
                     BlockPosition blockposition1 = blockposition.a(k, (j << 4) + i1, l);
                     boolean flag = i1 == 0 || i1 == 15 || k == 0 || k == 15 || l == 0 || l == 15;
 
                     if (section == Chunk.a ? flag : section.getType(k, i1, l).getMaterial() == Material.AIR) {
-                        // Reaper end - Optimize
-                        EnumDirection[] aenumdirection = EnumDirection.VALUES; // Reaper - Single values array
+                        // Beast end - Optimize
+                        EnumDirection[] aenumdirection = EnumDirection.VALUES; // Beast - Single values array
                         int j1 = aenumdirection.length;
 
                         for (int k1 = 0; k1 < j1; ++k1) {
@@ -1457,7 +1457,7 @@ public class Chunk {
         if (this.done) {
             int i;
 
-            // Reaper start - Replace 'if' with 'switch'
+            // Beast start - Replace 'if' with 'switch'
             switch (enumdirection) {
             case EAST:
                 for (i = 0; i < 16; ++i) {
@@ -1480,7 +1480,7 @@ public class Chunk {
                 }
                 break;
             }
-            // Reaper end
+            // Beast end
 
         }
     }
@@ -1588,7 +1588,7 @@ public class Chunk {
 
     // Paper start
     public void runOrQueueLightUpdate(Runnable runnable) {
-        /* // Reaper start - Remove Paper lighting queue
+        /* // Beast start - Remove Paper lighting queue
         if (this.world.paperConfig.queueLightUpdates) {
             lightingQueue.add(runnable);
         } else {
@@ -1596,11 +1596,11 @@ public class Chunk {
         }
         */
         runnable.run();
-        // Reaper end
+        // Beast end
     }
     // Paper end
 
-    // Reaper start
+    // Beast start
     public void runOrQueueLightUpdate(int x, int y, int z, int type) {
         if (BeastConfig.queueLightUpdates
                 && (type != 0 || !BeastConfig.lightThrottlingAllowBlockRelight)) {
@@ -1619,7 +1619,7 @@ public class Chunk {
             this.d(x, z);
         }
     }
-    // Reaper end
+    // Beast end
 
     public static enum EnumTileEntityState {
 
diff --git a/src/main/java/net/minecraft/server/ChunkCache.java b/src/main/java/net/minecraft/server/ChunkCache.java
index 637c495da02117038cc86335396ebebd2c0468a6..fd89581eed8fb64ebb35275cf539f86e62a087b3 100644
--- a/src/main/java/net/minecraft/server/ChunkCache.java
+++ b/src/main/java/net/minecraft/server/ChunkCache.java
@@ -3,7 +3,7 @@ package net.minecraft.server;
 import javax.annotation.Nullable;
 
 public class ChunkCache implements IBlockAccess {
-    private static final IBlockData DEFAULT_BLOCK = Blocks.AIR.getBlockData(); // Reaper - Lithium: ai/pathing/ChunkCache
+    private static final IBlockData DEFAULT_BLOCK = Blocks.AIR.getBlockData(); // Beast - Lithium: ai/pathing/ChunkCache
 
     protected int a;
     protected int b;
@@ -11,13 +11,13 @@ public class ChunkCache implements IBlockAccess {
     protected boolean d;
     protected World e;
 
-    // Reaper start - Lithium: ai/pathing/ChunkCache
+    // Beast start - Lithium: ai/pathing/ChunkCache
     // A 1D view of the chunks available to this cache
     private Chunk[] chunksFlat;
 
     // The x/z length of this cache
     private int xLen, zLen;
-    // Reaper end
+    // Beast end
 
     public ChunkCache(World world, BlockPosition blockposition, BlockPosition blockposition1, int i) {
         this.e = world;
@@ -48,7 +48,7 @@ public class ChunkCache implements IBlockAccess {
             }
         }
 
-        // Reaper start - Lithium: ai/pathing/ChunkCache
+        // Beast start - Lithium: ai/pathing/ChunkCache
         this.xLen = 1 + (blockposition1.getX() >> 4) - (blockposition.getX() >> 4);
         this.zLen = 1 + (blockposition1.getZ() >> 4) - (blockposition.getZ() >> 4);
 
@@ -58,7 +58,7 @@ public class ChunkCache implements IBlockAccess {
         for (int x = 0; x < this.xLen; x++) {
             System.arraycopy(this.c[x], 0, this.chunksFlat, x * this.zLen, this.zLen);
         }
-        // Reaper end
+        // Beast end
     }
 
     @Nullable
@@ -75,7 +75,7 @@ public class ChunkCache implements IBlockAccess {
     }
 
     public IBlockData getType(BlockPosition blockposition) {
-        // Reaper start - Lithium: ai/pathing/ChunkCache
+        // Beast start - Lithium: ai/pathing/ChunkCache
         int y = blockposition.getY();
 
         if (y >= 0 && y < 256) {
@@ -100,7 +100,7 @@ public class ChunkCache implements IBlockAccess {
         }
 
         return DEFAULT_BLOCK;
-        // Reaper end
+        // Beast end
     }
 
     public boolean isEmpty(BlockPosition blockposition) {
@@ -111,7 +111,7 @@ public class ChunkCache implements IBlockAccess {
         return this.getType(blockposition).b(this, blockposition, enumdirection);
     }
 
-    // Reaper start - Lithium: ai/pathing/LandPathNodeMaker
+    // Beast start - Lithium: ai/pathing/LandPathNodeMaker
     @Override
     public Chunk getChunkAt(int x, int z) {
         int chunkX = x - this.a;
@@ -122,5 +122,5 @@ public class ChunkCache implements IBlockAccess {
             return null;
         }
     }
-    // Reaper end
+    // Beast end
 }
diff --git a/src/main/java/net/minecraft/server/ChunkCoordIntPair.java b/src/main/java/net/minecraft/server/ChunkCoordIntPair.java
index d30a320ba76a37d497cc34acf559130d8cc51584..d3b6025dfce46fa16ff36c55232a41616cfcf880 100644
--- a/src/main/java/net/minecraft/server/ChunkCoordIntPair.java
+++ b/src/main/java/net/minecraft/server/ChunkCoordIntPair.java
@@ -4,7 +4,7 @@ public class ChunkCoordIntPair {
 
     public final int x;
     public final int z;
-    private int hashCode = 0; // Reaper - Cache hash code
+    private int hashCode = 0; // Beast - Cache hash code
 
     public ChunkCoordIntPair(int i, int j) {
         this.x = i;
@@ -23,7 +23,7 @@ public class ChunkCoordIntPair {
     }
 
     public int hashCode() {
-        // Reaper start - Cache hash code
+        // Beast start - Cache hash code
         int hash = this.hashCode;
         if (hash == 0) {
             int a1 = 1664525 * this.x + 1013904223;
@@ -32,7 +32,7 @@ public class ChunkCoordIntPair {
             this.hashCode = hash;
         }
         return hash;
-        // Reaper end
+        // Beast end
     }
 
     public boolean equals(Object object) {
diff --git a/src/main/java/net/minecraft/server/ChunkProviderGenerate.java b/src/main/java/net/minecraft/server/ChunkProviderGenerate.java
index a42d12fe331fb8b666a385f6d4a5d1f5cdc055d3..28b60f65b537af88f4aa381d129055ad3b50ff22 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderGenerate.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderGenerate.java
@@ -410,7 +410,7 @@ public class ChunkProviderGenerate implements ChunkGenerator {
         boolean flag = false;
 
         if (this.s.y && this.o && chunk.x() < 3600L) {
-            flag = this.B.a(this.n, this.i, new ChunkCoordIntPair(i, j)); // Reaper - Optimize
+            flag = this.B.a(this.n, this.i, new ChunkCoordIntPair(i, j)); // Beast - Optimize
         }
 
         return flag;
diff --git a/src/main/java/net/minecraft/server/ChunkProviderHell.java b/src/main/java/net/minecraft/server/ChunkProviderHell.java
index 1f5d6477dc0f2b81fb5e5784eb249af35ddc8cf9..f93fe2e47b9bb81f766f904dd38953f41176ec41 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderHell.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderHell.java
@@ -168,7 +168,7 @@ public class ChunkProviderHell implements ChunkGenerator {
                                         iblockdata1 = ChunkProviderHell.b;
                                         if (flag1) {
                                             iblockdata = ChunkProviderHell.e;
-                                            // iblockdata1 = ChunkProviderHell.b; // Reaper - Already assigned
+                                            // iblockdata1 = ChunkProviderHell.b; // Beast - Already assigned
                                         }
 
                                         if (flag) {
@@ -286,7 +286,7 @@ public class ChunkProviderHell implements ChunkGenerator {
                         d8 = d8 * (1.0D - d9) + -10.0D * d9;
                     }
 
-                    if (/*(double) j2 < 0.0D*/false) { // Reaper - Always false
+                    if (/*(double) j2 < 0.0D*/false) { // Beast - Always false
                         d9 = (0.0D - (double) j2) / 4.0D;
                         d9 = MathHelper.a(d9, 0.0D, 1.0D);
                         d8 = d8 * (1.0D - d9) + -10.0D * d9;
diff --git a/src/main/java/net/minecraft/server/ChunkProviderServer.java b/src/main/java/net/minecraft/server/ChunkProviderServer.java
index 19866e26117d353ad03c7b0370e4945b5dcb7dbe..bb23340e6ca870b96e502ddd8fa74c90899a889e 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderServer.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderServer.java
@@ -251,7 +251,7 @@ public class ChunkProviderServer implements IChunkProvider {
 
     public void saveChunk(Chunk chunk, boolean unloaded) { // Spigot
         try {
-            chunk.lightingQueue.processQueueAnyway(); // Reaper
+            chunk.lightingQueue.processQueueAnyway(); // Beast
             chunk.setLastSaved(this.world.getTime());
             this.chunkLoader.saveChunk(this.world, chunk, unloaded); // Spigot
         } catch (IOException ioexception) {
@@ -298,7 +298,7 @@ public class ChunkProviderServer implements IChunkProvider {
             }
         }
 
-        if (!flag) // Reaper - Fix the world not saving
+        if (!flag) // Beast - Fix the world not saving
         if (queueSize > world.paperConfig.queueSizeAutoSaveThreshold){
             return false;
         }
@@ -310,7 +310,7 @@ public class ChunkProviderServer implements IChunkProvider {
             // CraftBukkit end
 
             if (flag) {
-                // this.saveChunkNOP(chunk); // Reaper - Optimize
+                // this.saveChunkNOP(chunk); // Beast - Optimize
             }
 
             if (chunk.a(flag)) {
@@ -414,7 +414,7 @@ public class ChunkProviderServer implements IChunkProvider {
         chunk.removeEntities();
         if (save) {
             this.saveChunk(chunk, true); // Spigot
-            // this.saveChunkNOP(chunk); // Reaper - Optimize
+            // this.saveChunkNOP(chunk); // Beast - Optimize
         }
         this.chunks.remove(chunk.chunkKey);
         return true;
diff --git a/src/main/java/net/minecraft/server/ChunkRegionLoader.java b/src/main/java/net/minecraft/server/ChunkRegionLoader.java
index 524dd487f11fce760b503aca7660b4a592f3e317..c881032deb6d6d989c9dc39c72d92bbd0d39a14a 100644
--- a/src/main/java/net/minecraft/server/ChunkRegionLoader.java
+++ b/src/main/java/net/minecraft/server/ChunkRegionLoader.java
@@ -136,8 +136,8 @@ public class ChunkRegionLoader implements IChunkLoader, IAsyncChunkSaver {
         world.checkSession();
 
         try {
-            NBTTagCompound nbttagcompound = new NBTTagCompound(2); // Reaper - Use initial capacity
-            NBTTagCompound nbttagcompound1 = new NBTTagCompound(12); // Reaper - Use initial capacity
+            NBTTagCompound nbttagcompound = new NBTTagCompound(2); // Beast - Use initial capacity
+            NBTTagCompound nbttagcompound1 = new NBTTagCompound(12); // Beast - Use initial capacity
 
             nbttagcompound.set("Level", nbttagcompound1);
             nbttagcompound.setInt("DataVersion", 1343);
@@ -178,7 +178,7 @@ public class ChunkRegionLoader implements IChunkLoader, IAsyncChunkSaver {
         return this.processSaveQueueEntry(false);
     }
 
-    private /*synchronized*/ boolean processSaveQueueEntry(boolean logCompletion) { // Reaper - Remove unnecessary synchronization
+    private /*synchronized*/ boolean processSaveQueueEntry(boolean logCompletion) { // Beast - Remove unnecessary synchronization
         // CraftBukkit start
         // Paper start - Chunk queue improvements
         QueuedChunk chunk = queue.poll();
@@ -294,7 +294,7 @@ public class ChunkRegionLoader implements IChunkLoader, IAsyncChunkSaver {
         nbttagcompound.setBoolean("LightPopulated", chunk.v());
         nbttagcompound.setLong("InhabitedTime", chunk.x());
         ChunkSection[] achunksection = chunk.getSections();
-        NBTTagList nbttaglist = new NBTTagList(achunksection.length); // Reaper - Use initial capacity
+        NBTTagList nbttaglist = new NBTTagList(achunksection.length); // Beast - Use initial capacity
         boolean flag = worldHasSkyLight; // Spigot
         ChunkSection[] achunksection1 = achunksection;
         int i = achunksection.length;
@@ -302,10 +302,10 @@ public class ChunkRegionLoader implements IChunkLoader, IAsyncChunkSaver {
         NBTTagCompound nbttagcompound1;
 
         for (int j = 0; j < i; ++j) {
-            ChunkSection chunksection = achunksection[j]; // Reaper - Inline
+            ChunkSection chunksection = achunksection[j]; // Beast - Inline
 
             if (chunksection != Chunk.a) {
-                nbttagcompound1 = new NBTTagCompound(7); // Reaper - Use initial capacity
+                nbttagcompound1 = new NBTTagCompound(7); // Beast - Use initial capacity
                 nbttagcompound1.setByte("Y", (byte) (chunksection.getYPosition() >> 4 & 255));
                 byte[] abyte = new byte[4096];
                 NibbleArray nibblearray = new NibbleArray();
@@ -318,7 +318,7 @@ public class ChunkRegionLoader implements IChunkLoader, IAsyncChunkSaver {
                 }
 
                 nbttagcompound1.setByteArray("BlockLight", chunksection.getEmittedLightArray().asBytes());
-                if (worldHasSkyLight) { // Reaper - Inline
+                if (worldHasSkyLight) { // Beast - Inline
                     nbttagcompound1.setByteArray("SkyLight", chunksection.getSkyLightArray().asBytes());
                 } else {
                     nbttagcompound1.setByteArray("SkyLight", new byte[chunksection.getEmittedLightArray().asBytes().length]);
@@ -399,7 +399,7 @@ public class ChunkRegionLoader implements IChunkLoader, IAsyncChunkSaver {
                 NBTTagCompound nbttagcompound2 = new NBTTagCompound();
                 MinecraftKey minecraftkey = (MinecraftKey) Block.REGISTRY.b(nextticklistentry.a());
 
-                nbttagcompound2.setString("i", /*minecraftkey == null*/false ? "" : minecraftkey.toString()); // Reaper - Always false
+                nbttagcompound2.setString("i", /*minecraftkey == null*/false ? "" : minecraftkey.toString()); // Beast - Always false
                 nbttagcompound2.setInt("x", nextticklistentry.a.getX());
                 nbttagcompound2.setInt("y", nextticklistentry.a.getY());
                 nbttagcompound2.setInt("z", nextticklistentry.a.getZ());
diff --git a/src/main/java/net/minecraft/server/ChunkSection.java b/src/main/java/net/minecraft/server/ChunkSection.java
index 1562a450aaaedf29e2ed0bf88ab56328bd5bd7de..243646567141f48aa13974d885e1503005a3aae3 100644
--- a/src/main/java/net/minecraft/server/ChunkSection.java
+++ b/src/main/java/net/minecraft/server/ChunkSection.java
@@ -132,9 +132,9 @@ public class ChunkSection {
         this.skyLight = nibblearray;
     }
 
-    // Reaper start - Lithium: ai/pathing/LandPathNodeMaker
+    // Beast start - Lithium: ai/pathing/LandPathNodeMaker
     public boolean isEmpty() {
         return this.nonEmptyBlockCount == 0;
     }
-    // Reaper end
+    // Beast end
 }
diff --git a/src/main/java/net/minecraft/server/CombatTracker.java b/src/main/java/net/minecraft/server/CombatTracker.java
index 4193f6f71e4c27037169b270b5aa57a5ecacbefa..5fa84d4c4abbce1a4cd90d657c7040e03b094b9d 100644
--- a/src/main/java/net/minecraft/server/CombatTracker.java
+++ b/src/main/java/net/minecraft/server/CombatTracker.java
@@ -156,7 +156,7 @@ public class CombatTracker {
 
         if (f1 > 5.0F && combatentry != null) {
             return combatentry;
-        } else if (f > 5.0F && /*combatentry1 != null*/true) { // Reaper - Optimize
+        } else if (f > 5.0F && /*combatentry1 != null*/true) { // Beast - Optimize
             return combatentry1;
         } else {
             return null;
diff --git a/src/main/java/net/minecraft/server/CommandAbstract.java b/src/main/java/net/minecraft/server/CommandAbstract.java
index 779efa3f770a6b1c424ea0cfc26f4e390fed7833..8d40cabd65725dd0eadd3db2c115778aa16f3af9 100644
--- a/src/main/java/net/minecraft/server/CommandAbstract.java
+++ b/src/main/java/net/minecraft/server/CommandAbstract.java
@@ -51,7 +51,7 @@ public abstract class CommandAbstract implements ICommand {
             ItemStack itemstack = ((EntityHuman) entity).inventory.getItemInHand();
 
             if (!itemstack.isEmpty()) {
-                nbttagcompound.set("SelectedItem", itemstack.save(new NBTTagCompound(4))); // Reaper - Use initial capacity
+                nbttagcompound.set("SelectedItem", itemstack.save(new NBTTagCompound(4))); // Beast - Use initial capacity
             }
         }
 
@@ -187,7 +187,7 @@ public abstract class CommandAbstract implements ICommand {
     private static EntityPlayer a(MinecraftServer minecraftserver, @Nullable EntityPlayer entityplayer, String s) throws CommandException {
         if (entityplayer == null) {
             try {
-                entityplayer = minecraftserver.getPlayerList().a(com.eatthepath.uuid.FastUUID.parseUUID(s)); // Reaper - Use FastUUID
+                entityplayer = minecraftserver.getPlayerList().a(com.eatthepath.uuid.FastUUID.parseUUID(s)); // Beast - Use FastUUID
             } catch (IllegalArgumentException illegalargumentexception) {
                 ;
             }
@@ -217,7 +217,7 @@ public abstract class CommandAbstract implements ICommand {
 
         if (object == null) {
             try {
-                UUID uuid = com.eatthepath.uuid.FastUUID.parseUUID(s); // Reaper - Use FastUUID
+                UUID uuid = com.eatthepath.uuid.FastUUID.parseUUID(s); // Beast - Use FastUUID
 
                 object = minecraftserver.a(uuid);
                 if (object == null) {
@@ -571,7 +571,7 @@ public abstract class CommandAbstract implements ICommand {
             if (i > 0) {
                 if (i == list.size() - 1) {
                     chatcomponenttext.a(" and ");
-                } else if (/*i > 0*/true) { // Reaper - Optimize
+                } else if (/*i > 0*/true) { // Beast - Optimize
                     chatcomponenttext.a(", ");
                 }
             }
diff --git a/src/main/java/net/minecraft/server/CommandBlockListenerAbstract.java b/src/main/java/net/minecraft/server/CommandBlockListenerAbstract.java
index 3398ba1f6e1896f8cafff27992107bbd3c3c0ef5..88e196bcbe90e3a36c8b40691fc3f57a403a8334 100644
--- a/src/main/java/net/minecraft/server/CommandBlockListenerAbstract.java
+++ b/src/main/java/net/minecraft/server/CommandBlockListenerAbstract.java
@@ -106,7 +106,7 @@ public abstract class CommandBlockListenerAbstract implements ICommandListener {
     }
 
     public boolean a(World world) {
-        if (world.getTime() != this.b) { // Reaper - Remove isClientSide check
+        if (world.getTime() != this.b) { // Beast - Remove isClientSide check
             if ("Searge".equalsIgnoreCase(this.g)) {
                 this.f = new ChatComponentText("#itzlipofutzli");
                 this.d = 1;
@@ -274,7 +274,7 @@ public abstract class CommandBlockListenerAbstract implements ICommandListener {
                     CommandBlockListenerAbstract listener = (CommandBlockListenerAbstract) sender;
                     MinecraftServer.getServer().server.getLogger().log(Level.WARNING, String.format("CommandBlock at (%d,%d,%d) failed to handle command", listener.getChunkCoordinates().getX(), listener.getChunkCoordinates().getY(), listener.getChunkCoordinates().getZ()), exception);
                 } else {
-                    MinecraftServer.getServer().server.getLogger().log(Level.WARNING, "Unknown CommandBlock failed to handle command", exception); // Reaper - Optimize
+                    MinecraftServer.getServer().server.getLogger().log(Level.WARNING, "Unknown CommandBlock failed to handle command", exception); // Beast - Optimize
                 }
             }
         }
@@ -335,7 +335,7 @@ public abstract class CommandBlockListenerAbstract implements ICommandListener {
     }
 
     public void sendMessage(IChatBaseComponent ichatbasecomponent) {
-        if (this.e && this.getWorld() != null) { // Reaper - Remove isClientSide check
+        if (this.e && this.getWorld() != null) { // Beast - Remove isClientSide check
             this.f = (new ChatComponentText("[" + CommandBlockListenerAbstract.a.format(new Date()) + "] ")).addSibling(ichatbasecomponent);
             this.i();
         }
@@ -370,7 +370,7 @@ public abstract class CommandBlockListenerAbstract implements ICommandListener {
         if (!entityhuman.isCreativeAndOp()) {
             return false;
         } else {
-            if (false) { // Reaper - Remove isClientSide check
+            if (false) { // Beast - Remove isClientSide check
                 entityhuman.a(this);
             }
 
diff --git a/src/main/java/net/minecraft/server/CommandDebug.java b/src/main/java/net/minecraft/server/CommandDebug.java
index a3467e928a1e5356b661f4ce0d5427b1ade01361..3b40b8f461cb9ac7f793439cd8716531a672b3e4 100644
--- a/src/main/java/net/minecraft/server/CommandDebug.java
+++ b/src/main/java/net/minecraft/server/CommandDebug.java
@@ -35,7 +35,7 @@ public class CommandDebug extends CommandAbstract {
 
     public void execute(MinecraftServer minecraftserver, ICommandListener icommandlistener, String[] astring) throws CommandException {
         // CraftBukkit start - only allow use when enabled (so that no blank profile results occur)
-        /* // Reaper start - Remove MethodProfiler
+        /* // Beast start - Remove MethodProfiler
         if (!minecraftserver.methodProfiler.ENABLED) {
             icommandlistener.sendMessage(new ChatComponentText("Vanilla debug profiling is disabled."));
             icommandlistener.sendMessage(new ChatComponentText("To enable, restart the server with `-DenableDebugMethodProfiler=true' before `-jar'."));
@@ -79,11 +79,11 @@ public class CommandDebug extends CommandAbstract {
             }
 
         }
-        */ // Reaper end
+        */ // Beast end
     }
 
     private void a(long i, int j, MinecraftServer minecraftserver) {
-        /* // Reaper start - Remove MethodProfiler
+        /* // Beast start - Remove MethodProfiler
         File file = new File(minecraftserver.d("debug"), "profile-results-" + (new SimpleDateFormat("yyyy-MM-dd_HH.mm.ss")).format(new Date()) + ".txt");
 
         file.getParentFile().mkdirs();
@@ -97,12 +97,12 @@ public class CommandDebug extends CommandAbstract {
         } finally {
             IOUtils.closeQuietly(outputstreamwriter);
         }
-        */ // Reaper end
+        */ // Beast end
 
     }
 
     private String b(long i, int j, MinecraftServer minecraftserver) {
-        // Reaper start - Remove MethodProfiler
+        // Beast start - Remove MethodProfiler
         return "";
         /*
         StringBuilder stringbuilder = new StringBuilder();
@@ -118,11 +118,11 @@ public class CommandDebug extends CommandAbstract {
         this.a(0, "root", stringbuilder, minecraftserver);
         stringbuilder.append("--- END PROFILE DUMP ---\n\n");
         return stringbuilder.toString();
-        */ // Reaper end
+        */ // Beast end
     }
 
     private void a(int i, String s, StringBuilder stringbuilder, MinecraftServer minecraftserver) {
-        /* // Reaper start - Remove MethodProfiler
+        /* // Beast start - Remove MethodProfiler
         List list = minecraftserver.methodProfiler.b(s);
 
         if (list != null && list.size() >= 3) {
@@ -146,11 +146,11 @@ public class CommandDebug extends CommandAbstract {
             }
 
         }
-        */ // Reaper end
+        */ // Beast end
     }
 
     private static String d() {
-        // Reaper start - Remove MethodProfiler
+        // Beast start - Remove MethodProfiler
         return "";
         /*
         String[] astring = new String[] { "Shiny numbers!", "Am I not running fast enough? :(", "I\'m working as hard as I can!", "Will I ever be good enough for you? :(", "Speedy. Zoooooom!", "Hello world", "40% better than a crash report.", "Now with extra numbers", "Now with less numbers", "Now with the same numbers", "You should add flames to things, it makes them go faster!", "Do you feel the need for... optimization?", "*cracks redstone whip*", "Maybe if you treated it better then it\'ll have more motivation to work faster! Poor server."};
@@ -160,7 +160,7 @@ public class CommandDebug extends CommandAbstract {
         } catch (Throwable throwable) {
             return "Witty comment unavailable :(";
         }
-        */ // Reaper end
+        */ // Beast end
     }
 
     public List<String> tabComplete(MinecraftServer minecraftserver, ICommandListener icommandlistener, String[] astring, @Nullable BlockPosition blockposition) {
diff --git a/src/main/java/net/minecraft/server/CommandExecute.java b/src/main/java/net/minecraft/server/CommandExecute.java
index 92f87f3b6f6286021df3c7aa19e3adbcbb33a671..80fec447e579b55b0bd571a27358b1b8bb0c1e94 100644
--- a/src/main/java/net/minecraft/server/CommandExecute.java
+++ b/src/main/java/net/minecraft/server/CommandExecute.java
@@ -64,7 +64,7 @@ public class CommandExecute extends CommandAbstract {
 
             String s = a(astring, b0);
             CommandListenerWrapper commandlistenerwrapper = CommandListenerWrapper.a(icommandlistener).a(entity, new Vec3D(d0, d1, d2)).a(minecraftserver.worlds.get(0).getGameRules().getBoolean("commandBlockOutput")); // CraftBukkit
-            // ICommandHandler icommandhandler = minecraftserver.getCommandHandler(); // Reaper - Unused
+            // ICommandHandler icommandhandler = minecraftserver.getCommandHandler(); // Beast - Unused
 
             try {
                 // CraftBukkit start
diff --git a/src/main/java/net/minecraft/server/CommandGamemode.java b/src/main/java/net/minecraft/server/CommandGamemode.java
index bad8fba54321bb387e52fc4a69719248d063a4c0..93a56f41538c5cb88b9d93e128c772f0a4fe02c1 100644
--- a/src/main/java/net/minecraft/server/CommandGamemode.java
+++ b/src/main/java/net/minecraft/server/CommandGamemode.java
@@ -52,7 +52,7 @@ public class CommandGamemode extends CommandAbstract {
     protected EnumGamemode c(ICommandListener icommandlistener, String s) throws ExceptionInvalidNumber {
         EnumGamemode enumgamemode = EnumGamemode.a(s, EnumGamemode.NOT_SET);
 
-        return enumgamemode == EnumGamemode.NOT_SET ? WorldSettings.a(a(s, 0, EnumGamemode.VALUES.length - 2)) : enumgamemode; // Reaper - Single values array
+        return enumgamemode == EnumGamemode.NOT_SET ? WorldSettings.a(a(s, 0, EnumGamemode.VALUES.length - 2)) : enumgamemode; // Beast - Single values array
     }
 
     public List<String> tabComplete(MinecraftServer minecraftserver, ICommandListener icommandlistener, String[] astring, @Nullable BlockPosition blockposition) {
diff --git a/src/main/java/net/minecraft/server/CommandSpreadPlayers.java b/src/main/java/net/minecraft/server/CommandSpreadPlayers.java
index 69b2ab3eb1f157e3a2c0810f138e2d7bcbea0d3c..0221f8e5fe96ee30cc51119fec85cf9d482e8c66 100644
--- a/src/main/java/net/minecraft/server/CommandSpreadPlayers.java
+++ b/src/main/java/net/minecraft/server/CommandSpreadPlayers.java
@@ -167,7 +167,7 @@ public class CommandSpreadPlayers extends CommandAbstract {
                 int i1 = acommandspreadplayers_location2d.length;
 
                 for (j = 0; j < i1; ++j) {
-                    commandspreadplayers_location2d1 = acommandspreadplayers_location2d[j]; // Reaper - Inline
+                    commandspreadplayers_location2d1 = acommandspreadplayers_location2d[j]; // Beast - Inline
                     if (!commandspreadplayers_location2d1.b(world)) {
                         commandspreadplayers_location2d1.a(random, d1, d2, d3, d4);
                         flag1 = true;
@@ -210,7 +210,7 @@ public class CommandSpreadPlayers extends CommandAbstract {
             int k = acommandspreadplayers_location2d.length;
 
             for (int l = 0; l < k; ++l) {
-                CommandSpreadPlayers.Location2D commandspreadplayers_location2d1 = acommandspreadplayers_location2d[l]; // Reaper - Inline
+                CommandSpreadPlayers.Location2D commandspreadplayers_location2d1 = acommandspreadplayers_location2d[l]; // Beast - Inline
 
                 if (commandspreadplayers_location2d != commandspreadplayers_location2d1) {
                     double d2 = commandspreadplayers_location2d.a(commandspreadplayers_location2d1);
diff --git a/src/main/java/net/minecraft/server/Container.java b/src/main/java/net/minecraft/server/Container.java
index 205140ce92f94b634dc85eef7105fbda273056f5..bf684956d9919e54c8ccd7a3b152c1cf8454c9bc 100644
--- a/src/main/java/net/minecraft/server/Container.java
+++ b/src/main/java/net/minecraft/server/Container.java
@@ -18,10 +18,10 @@ import org.bukkit.event.inventory.InventoryType;
 import org.bukkit.inventory.InventoryView;
 // CraftBukkit end
 
-// Reaper start - FastUtil optimization
+// Beast start - FastUtil optimization
 import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
 import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;
-// Reaper end
+// Beast end
 
 public abstract class Container {
 
@@ -158,7 +158,7 @@ public abstract class Container {
                     l = playerinventory.getCarried().getCount();
                     Iterator iterator = this.h.iterator();
 
-                    Int2ObjectMap<ItemStack> draggedSlots = new Int2ObjectOpenHashMap<>(); // CraftBukkit - Store slots from drag in map (raw slot id -> new stack) // Reaper - FastUtil optimization
+                    Int2ObjectMap<ItemStack> draggedSlots = new Int2ObjectOpenHashMap<>(); // CraftBukkit - Store slots from drag in map (raw slot id -> new stack) // Beast - FastUtil optimization
                     while (iterator.hasNext()) {
                         Slot slot1 = (Slot) iterator.next();
                         ItemStack itemstack3 = playerinventory.getCarried();
@@ -184,8 +184,8 @@ public abstract class Container {
                     org.bukkit.inventory.ItemStack newcursor = CraftItemStack.asCraftMirror(itemstack2);
                     newcursor.setAmount(l);
                     Map<Integer, org.bukkit.inventory.ItemStack> eventmap = new HashMap<Integer, org.bukkit.inventory.ItemStack>();
-                    for (Int2ObjectMap.Entry<ItemStack> ditem : draggedSlots.int2ObjectEntrySet()) { // Reaper - FastUtil optimization
-                        eventmap.put(ditem.getIntKey(), CraftItemStack.asBukkitCopy(ditem.getValue())); // Reaper - FastUtil optimization
+                    for (Int2ObjectMap.Entry<ItemStack> ditem : draggedSlots.int2ObjectEntrySet()) { // Beast - FastUtil optimization
+                        eventmap.put(ditem.getIntKey(), CraftItemStack.asBukkitCopy(ditem.getValue())); // Beast - FastUtil optimization
                     }
 
                     // It's essential that we set the cursor to the new value here to prevent item duplication if a plugin closes the inventory.
@@ -199,8 +199,8 @@ public abstract class Container {
                     boolean needsUpdate = event.getResult() != Result.DEFAULT;
 
                     if (event.getResult() != Result.DENY) {
-                        for (Int2ObjectMap.Entry<ItemStack> dslot : draggedSlots.int2ObjectEntrySet()) { // Reaper - FastUtil optimization
-                            view.setItem(dslot.getIntKey(), CraftItemStack.asBukkitCopy(dslot.getValue())); // Reaper - FastUtil optimization
+                        for (Int2ObjectMap.Entry<ItemStack> dslot : draggedSlots.int2ObjectEntrySet()) { // Beast - FastUtil optimization
+                            view.setItem(dslot.getIntKey(), CraftItemStack.asBukkitCopy(dslot.getValue())); // Beast - FastUtil optimization
                         }
                         // The only time the carried item will be set to null is if the inventory is closed by the server.
                         // If the inventory is closed by the server, then the cursor items are dropped.  This is why we change the cursor early.
@@ -634,7 +634,7 @@ public abstract class Container {
     }
 
     protected void a(World world, EntityHuman entityhuman, InventoryCrafting inventorycrafting, InventoryCraftResult inventorycraftresult) {
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             EntityPlayer entityplayer = (EntityPlayer) entityhuman;
             ItemStack itemstack = ItemStack.a;
             IRecipe irecipe = CraftingManager.b(inventorycrafting, world);
diff --git a/src/main/java/net/minecraft/server/ContainerAnvil.java b/src/main/java/net/minecraft/server/ContainerAnvil.java
index 1e90178125910222e459d8b246726b073a1347a7..ab49bfedcb782545f73c49bc8161e57e6ad4b3c6 100644
--- a/src/main/java/net/minecraft/server/ContainerAnvil.java
+++ b/src/main/java/net/minecraft/server/ContainerAnvil.java
@@ -2,6 +2,8 @@ package net.minecraft.server;
 
 import java.util.Iterator;
 import java.util.Map;
+
+import com.homomc.beast.event.inventory.PlayerAnvilDamageEvent;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
@@ -70,11 +72,11 @@ public class ContainerAnvil extends Container {
                 ContainerAnvil.this.levelCost = 0;
                 IBlockData iblockdata = world.getType(blockposition);
 
-                if (!entityhuman.abilities.canInstantlyBuild && iblockdata.getBlock() == Blocks.ANVIL && entityhuman.getRandom().nextFloat() < 0.12F) { // Reaper - Remove isClientSide check
+                if (!entityhuman.abilities.canInstantlyBuild && iblockdata.getBlock() == Blocks.ANVIL && entityhuman.getRandom().nextFloat() < 0.12F) { // Beast - Remove isClientSide check
                     int i = ((Integer) iblockdata.get(BlockAnvil.DAMAGE)).intValue();
 
                     ++i;
-                    if (new com.github.ruviolence.reaper.event.inventory.PlayerAnvilDamageEvent(getBukkitView(), world.getWorld().getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ()), i).callEvent()) // Reaper - PlayerAnvilDamageEvent
+                    if (new PlayerAnvilDamageEvent(getBukkitView(), world.getWorld().getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ()), i).callEvent()) // Beast - PlayerAnvilDamageEvent
                     if (i > 2) {
                         world.setAir(blockposition);
                         world.triggerEffect(1029, blockposition, 0);
@@ -82,7 +84,7 @@ public class ContainerAnvil extends Container {
                         world.setTypeAndData(blockposition, iblockdata.set(BlockAnvil.DAMAGE, Integer.valueOf(i)), 2);
                         world.triggerEffect(1030, blockposition, 0);
                     }
-                } else if (true) { // Reaper - Remove isClientSide check
+                } else if (true) { // Beast - Remove isClientSide check
                     world.triggerEffect(1030, blockposition, 0);
                 }
 
@@ -185,10 +187,10 @@ public class ContainerAnvil extends Container {
                         Enchantment enchantment = (Enchantment) iterator.next();
 
                         if (enchantment != null) {
-                            // Reaper start - Optimize
+                            // Beast start - Optimize
                             Object l1O = map.get(enchantment);
                             int l1 = l1O != null ? (Integer) l1O : 0;
-                            // Reaper end
+                            // Beast end
                             int i2 = ((Integer) map1.get(enchantment)).intValue();
 
                             i2 = l1 == i2 ? i2 + 1 : Math.max(i2, l1);
@@ -309,7 +311,7 @@ public class ContainerAnvil extends Container {
 
     public void b(EntityHuman entityhuman) {
         super.b(entityhuman);
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             this.a(entityhuman, this.i, this.h);
         }
     }
@@ -334,7 +336,7 @@ public class ContainerAnvil extends Container {
 
                 slot.a(itemstack1, itemstack);
             } else if (i != 0 && i != 1) {
-                if (/*i >= 3*/true && i < 39 && !this.a(itemstack1, 0, 2, false)) { // Reaper - Optimize
+                if (/*i >= 3*/true && i < 39 && !this.a(itemstack1, 0, 2, false)) { // Beast - Optimize
                     return ItemStack.a;
                 }
             } else if (!this.a(itemstack1, 3, 39, false)) {
diff --git a/src/main/java/net/minecraft/server/ContainerBeacon.java b/src/main/java/net/minecraft/server/ContainerBeacon.java
index c5746c6c58dec6aa63270c534e921d201fc94218..6c29f3f150893112e1a71e3dc8f0e20f34ca3b5a 100644
--- a/src/main/java/net/minecraft/server/ContainerBeacon.java
+++ b/src/main/java/net/minecraft/server/ContainerBeacon.java
@@ -44,7 +44,7 @@ public class ContainerBeacon extends Container {
 
     public void b(EntityHuman entityhuman) {
         super.b(entityhuman);
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             ItemStack itemstack = this.f.a(this.f.getMaxStackSize());
 
             if (!itemstack.isEmpty()) {
@@ -77,11 +77,11 @@ public class ContainerBeacon extends Container {
                 if (!this.a(itemstack1, 0, 1, false)) {
                     return ItemStack.a;
                 }
-            } else if (/*i >= 1*/true && i < 28) { // Reaper - Optimize
+            } else if (/*i >= 1*/true && i < 28) { // Beast - Optimize
                 if (!this.a(itemstack1, 28, 37, false)) {
                     return ItemStack.a;
                 }
-            } else if (/*i >= 28*/true && i < 37) { // Reaper - Optimize
+            } else if (/*i >= 28*/true && i < 37) { // Beast - Optimize
                 if (!this.a(itemstack1, 1, 28, false)) {
                     return ItemStack.a;
                 }
diff --git a/src/main/java/net/minecraft/server/ContainerBrewingStand.java b/src/main/java/net/minecraft/server/ContainerBrewingStand.java
index fc9d68d54f6ba8f4221da98207101c0bbf368d6d..de632c4babf32befbc2a5139e0077f70f1c2c529 100644
--- a/src/main/java/net/minecraft/server/ContainerBrewingStand.java
+++ b/src/main/java/net/minecraft/server/ContainerBrewingStand.java
@@ -77,7 +77,7 @@ public class ContainerBrewingStand extends Container {
             ItemStack itemstack1 = slot.getItem();
 
             itemstack = itemstack1.cloneItemStack();
-            if ((/*i < 0*/false || i > 2) && i != 3 && i != 4) { // Reaper - Optimize
+            if ((/*i < 0*/false || i > 2) && i != 3 && i != 4) { // Beast - Optimize
                 if (this.f.isAllowed(itemstack1)) {
                     if (!this.a(itemstack1, 3, 4, false)) {
                         return ItemStack.a;
@@ -90,11 +90,11 @@ public class ContainerBrewingStand extends Container {
                     if (!this.a(itemstack1, 4, 5, false)) {
                         return ItemStack.a;
                     }
-                } else if (/*i >= 5*/true && i < 32) { // Reaper - Optimize
+                } else if (/*i >= 5*/true && i < 32) { // Beast - Optimize
                     if (!this.a(itemstack1, 32, 41, false)) {
                         return ItemStack.a;
                     }
-                } else if (/*i >= 32*/true && i < 41) { // Reaper - Optimize
+                } else if (/*i >= 32*/true && i < 41) { // Beast - Optimize
                     if (!this.a(itemstack1, 5, 32, false)) {
                         return ItemStack.a;
                     }
diff --git a/src/main/java/net/minecraft/server/ContainerEnchantTable.java b/src/main/java/net/minecraft/server/ContainerEnchantTable.java
index 1fb64160e6d1bed01d927bee46d5fe254bcd5529..822e6281c98246cdcb62653a41d130edf49137d6 100644
--- a/src/main/java/net/minecraft/server/ContainerEnchantTable.java
+++ b/src/main/java/net/minecraft/server/ContainerEnchantTable.java
@@ -118,7 +118,7 @@ public class ContainerEnchantTable extends Container {
             int i;
 
             if (!itemstack.isEmpty()) { // CraftBukkit - relax condition
-                if (true) { // Reaper - Remove isClientSide check
+                if (true) { // Beast - Remove isClientSide check
                     i = 0;
 
                     int j;
@@ -170,7 +170,7 @@ public class ContainerEnchantTable extends Container {
                         if (this.costs[j] > 0) {
                             List list = this.a(itemstack, j, this.costs[j]);
 
-                            if (/*list != null*/true && !list.isEmpty()) { // Reaper - Optimize
+                            if (/*list != null*/true && !list.isEmpty()) { // Beast - Optimize
                                 WeightedRandomEnchant weightedrandomenchant = (WeightedRandomEnchant) list.get(this.l.nextInt(list.size()));
 
                                 this.h[j] = Enchantment.getId(weightedrandomenchant.enchantment);
@@ -235,7 +235,7 @@ public class ContainerEnchantTable extends Container {
         if ((itemstack1.isEmpty() || itemstack1.getCount() < j) && !entityhuman.abilities.canInstantlyBuild) {
             return false;
         } else if (this.costs[i] > 0 && !itemstack.isEmpty() && (entityhuman.expLevel >= j && entityhuman.expLevel >= this.costs[i] || entityhuman.abilities.canInstantlyBuild)) {
-            if (true) { // Reaper - Remove isClientSide check
+            if (true) { // Beast - Remove isClientSide check
                 List list = this.a(itemstack, i, this.costs[i]);
 
                 // CraftBukkit start
@@ -327,7 +327,7 @@ public class ContainerEnchantTable extends Container {
             this.world = entityhuman.getWorld();
         }
         // CraftBukkit end
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             this.a(entityhuman, entityhuman.world, this.enchantSlots);
         }
     }
diff --git a/src/main/java/net/minecraft/server/ContainerFurnace.java b/src/main/java/net/minecraft/server/ContainerFurnace.java
index 45afd16bfaa5c0a256adc0b086f4d6c7d06c0463..b28236afc7e18be29ce7c9d2c9928da063957d19 100644
--- a/src/main/java/net/minecraft/server/ContainerFurnace.java
+++ b/src/main/java/net/minecraft/server/ContainerFurnace.java
@@ -112,11 +112,11 @@ public class ContainerFurnace extends Container {
                     if (!this.a(itemstack1, 1, 2, false)) {
                         return ItemStack.a;
                     }
-                } else if (/*i >= 3*/true && i < 30) { // Reaper - Optimize
+                } else if (/*i >= 3*/true && i < 30) { // Beast - Optimize
                     if (!this.a(itemstack1, 30, 39, false)) {
                         return ItemStack.a;
                     }
-                } else if (/*i >= 30*/true && i < 39 && !this.a(itemstack1, 3, 30, false)) { // Reaper - Optimize
+                } else if (/*i >= 30*/true && i < 39 && !this.a(itemstack1, 3, 30, false)) { // Beast - Optimize
                     return ItemStack.a;
                 }
             } else if (!this.a(itemstack1, 3, 39, false)) {
diff --git a/src/main/java/net/minecraft/server/ContainerHorse.java b/src/main/java/net/minecraft/server/ContainerHorse.java
index ccf1db6c75687e7d7265f0c047ef174b6a129dbc..3ebac2a1eb1c2fdae9851a4aaee70d3909f7c469 100644
--- a/src/main/java/net/minecraft/server/ContainerHorse.java
+++ b/src/main/java/net/minecraft/server/ContainerHorse.java
@@ -71,7 +71,7 @@ public class ContainerHorse extends Container {
     }
 
     public boolean canUse(EntityHuman entityhuman) {
-        return this.a.a(entityhuman) && this.f.isAlive() && this.f.valid && this.f.g((Entity) entityhuman) < 8.0F; // Reaper - Fix MC-161754
+        return this.a.a(entityhuman) && this.f.isAlive() && this.f.valid && this.f.g((Entity) entityhuman) < 8.0F; // Beast - Fix MC-161754
     }
 
     public ItemStack shiftClick(EntityHuman entityhuman, int i) {
diff --git a/src/main/java/net/minecraft/server/ContainerMerchant.java b/src/main/java/net/minecraft/server/ContainerMerchant.java
index 5656c47116b60f1202dbe06923f365beb4cd77a5..345775836cc71bb40ce0e6d9decba14b3c958c2c 100644
--- a/src/main/java/net/minecraft/server/ContainerMerchant.java
+++ b/src/main/java/net/minecraft/server/ContainerMerchant.java
@@ -76,11 +76,11 @@ public class ContainerMerchant extends Container {
 
                 slot.a(itemstack1, itemstack);
             } else if (i != 0 && i != 1) {
-                if (/*i >= 3*/true && i < 30) { // Reaper - Optimize
+                if (/*i >= 3*/true && i < 30) { // Beast - Optimize
                     if (!this.a(itemstack1, 30, 39, false)) {
                         return ItemStack.a;
                     }
-                } else if (/*i >= 30*/true && i < 39 && !this.a(itemstack1, 3, 30, false)) { // Reaper - Optimize
+                } else if (/*i >= 30*/true && i < 39 && !this.a(itemstack1, 3, 30, false)) { // Beast - Optimize
                     return ItemStack.a;
                 }
             } else if (!this.a(itemstack1, 3, 39, false)) {
@@ -107,7 +107,7 @@ public class ContainerMerchant extends Container {
         super.b(entityhuman);
         this.merchant.setTradingPlayer((EntityHuman) null);
         super.b(entityhuman);
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             ItemStack itemstack = this.f.splitWithoutUpdate(0);
 
             if (!itemstack.isEmpty()) {
diff --git a/src/main/java/net/minecraft/server/ContainerPlayer.java b/src/main/java/net/minecraft/server/ContainerPlayer.java
index 60465890d99b2a972c7a9145afaf3e1d16ca7754..4b1211947b487736f6c1977dfb5d7945049998f6 100644
--- a/src/main/java/net/minecraft/server/ContainerPlayer.java
+++ b/src/main/java/net/minecraft/server/ContainerPlayer.java
@@ -8,8 +8,8 @@ import org.bukkit.craftbukkit.inventory.CraftInventoryView;
 public class ContainerPlayer extends Container {
 
     private static final EnumItemSlot[] h = new EnumItemSlot[] { EnumItemSlot.HEAD, EnumItemSlot.CHEST, EnumItemSlot.LEGS, EnumItemSlot.FEET};
-    public InventoryCrafting craftInventory; // Reaper - Optimize
-    public InventoryCraftResult resultInventory; // Reaper - Optimize
+    public InventoryCrafting craftInventory; // Beast - Optimize
+    public InventoryCraftResult resultInventory; // Beast - Optimize
     public boolean g;
     private final EntityHuman owner;
     // CraftBukkit start
@@ -78,7 +78,7 @@ public class ContainerPlayer extends Container {
     public void b(EntityHuman entityhuman) {
         super.b(entityhuman);
         this.resultInventory.clear();
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             this.a(entityhuman, entityhuman.world, this.craftInventory);
         }
     }
@@ -103,11 +103,11 @@ public class ContainerPlayer extends Container {
                 }
 
                 slot.a(itemstack1, itemstack);
-            } else if (/*i >= 1*/true && i < 5) { // Reaper - Optimize
+            } else if (/*i >= 1*/true && i < 5) { // Beast - Optimize
                 if (!this.a(itemstack1, 9, 45, false)) {
                     return ItemStack.a;
                 }
-            } else if (/*i >= 5*/true && i < 9) { // Reaper - Optimize
+            } else if (/*i >= 5*/true && i < 9) { // Beast - Optimize
                 if (!this.a(itemstack1, 9, 45, false)) {
                     return ItemStack.a;
                 }
@@ -121,11 +121,11 @@ public class ContainerPlayer extends Container {
                 if (!this.a(itemstack1, 45, 46, false)) {
                     return ItemStack.a;
                 }
-            } else if (/*i >= 9*/true && i < 36) { // Reaper - Optimize
+            } else if (/*i >= 9*/true && i < 36) { // Beast - Optimize
                 if (!this.a(itemstack1, 36, 45, false)) {
                     return ItemStack.a;
                 }
-            } else if (/*i >= 36*/true && i < 45) { // Reaper - Optimize
+            } else if (/*i >= 36*/true && i < 45) { // Beast - Optimize
                 if (!this.a(itemstack1, 9, 36, false)) {
                     return ItemStack.a;
                 }
diff --git a/src/main/java/net/minecraft/server/ContainerWorkbench.java b/src/main/java/net/minecraft/server/ContainerWorkbench.java
index 3364b19bca7af4b40986ac39ac69b98e168c72be..e072db0b76def729005d3f7d8b14baf2ca464709 100644
--- a/src/main/java/net/minecraft/server/ContainerWorkbench.java
+++ b/src/main/java/net/minecraft/server/ContainerWorkbench.java
@@ -56,7 +56,7 @@ public class ContainerWorkbench extends Container {
 
     public void b(EntityHuman entityhuman) {
         super.b(entityhuman);
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             this.a(entityhuman, this.g, this.craftInventory);
         }
     }
diff --git a/src/main/java/net/minecraft/server/CrashReport.java b/src/main/java/net/minecraft/server/CrashReport.java
index afdf2d48cc35a3e4cea616d9adeae5075b9bdba3..cab9f80f207464ea72dfab9ac8a3890bfd2c9166 100644
--- a/src/main/java/net/minecraft/server/CrashReport.java
+++ b/src/main/java/net/minecraft/server/CrashReport.java
@@ -187,7 +187,7 @@ public class CrashReport {
             ((Throwable) object).setStackTrace(this.c.getStackTrace());
         }
 
-        String s /*= ((Throwable) object).toString()*/; // Reaper - Optimize
+        String s /*= ((Throwable) object).toString()*/; // Beast - Optimize
 
         try {
             stringwriter = new StringWriter();
@@ -279,7 +279,7 @@ public class CrashReport {
                 System.out.println("Negative index in crash report handler (" + astacktraceelement.length + "/" + j + ")");
             }
 
-            if (/*astacktraceelement != null*/true && 0 <= k && k < astacktraceelement.length) { // Reaper - Optimize
+            if (/*astacktraceelement != null*/true && 0 <= k && k < astacktraceelement.length) { // Beast - Optimize
                 stacktraceelement = astacktraceelement[k];
                 if (astacktraceelement.length + 1 - j < astacktraceelement.length) {
                     stacktraceelement1 = astacktraceelement[astacktraceelement.length + 1 - j];
@@ -291,7 +291,7 @@ public class CrashReport {
                 CrashReportSystemDetails crashreportsystemdetails1 = (CrashReportSystemDetails) this.e.get(this.e.size() - 1);
 
                 crashreportsystemdetails1.b(j);
-            } else if (/*astacktraceelement != null*/true && astacktraceelement.length >= j && 0 <= k && k < astacktraceelement.length) { // Reaper - Optimize
+            } else if (/*astacktraceelement != null*/true && astacktraceelement.length >= j && 0 <= k && k < astacktraceelement.length) { // Beast - Optimize
                 this.h = new StackTraceElement[k];
                 System.arraycopy(astacktraceelement, 0, this.h, 0, this.h.length);
             } else {
diff --git a/src/main/java/net/minecraft/server/DamageSource.java b/src/main/java/net/minecraft/server/DamageSource.java
index 455119e26a0d5b04507c48aba54bac361224c56c..4c6f22bc138172fa2167063b5ae86e024a250d7e 100644
--- a/src/main/java/net/minecraft/server/DamageSource.java
+++ b/src/main/java/net/minecraft/server/DamageSource.java
@@ -1,5 +1,7 @@
 package net.minecraft.server;
 
+import com.homomc.beast.OldCombatHelper;
+
 import javax.annotation.Nullable;
 
 public class DamageSource {
@@ -27,7 +29,7 @@ public class DamageSource {
     private boolean v;
     private boolean w;
     private boolean x;
-    private float y = com.github.ruviolence.reaper.OldCombatHelper.EXHAUSTION_HURT; // Reaper - Old combat
+    private float y = OldCombatHelper.EXHAUSTION_HURT; // Beast - Old combat
     private boolean z;
     private boolean A;
     private boolean B;
diff --git a/src/main/java/net/minecraft/server/DataPaletteBlock.java b/src/main/java/net/minecraft/server/DataPaletteBlock.java
index ff3a3cad408fb61a4e239c452d02398467606dba..9c5d9553a43bc47b109aa283d348f3f532073125 100644
--- a/src/main/java/net/minecraft/server/DataPaletteBlock.java
+++ b/src/main/java/net/minecraft/server/DataPaletteBlock.java
@@ -6,7 +6,7 @@ public class DataPaletteBlock implements DataPaletteExpandable {
 
     private static final DataPalette d = new DataPaletteGlobal();
     protected static final IBlockData a = Blocks.AIR.getBlockData(); public static final IBlockData DEFAULT_BLOCK_DATA = DataPaletteBlock.a; // Paper - OBFHELPER
-    protected DataBits b; public DataBits getDataBits() { return this.b; } // Reaper
+    protected DataBits b; public DataBits getDataBits() { return this.b; } // Beast
     protected DataPalette c;
     private int e;
 
@@ -67,7 +67,7 @@ public class DataPaletteBlock implements DataPaletteExpandable {
         return this.a(b(i, j, k));
     }
 
-    public IBlockData a(int i) { // Reaper - protected -> public
+    public IBlockData a(int i) { // Beast - protected -> public
         IBlockData iblockdata = this.c.a(this.b.a(i));
 
         return iblockdata == null ? DataPaletteBlock.a : iblockdata;
@@ -116,7 +116,7 @@ public class DataPaletteBlock implements DataPaletteExpandable {
             IBlockData data = Block.REGISTRY_ID.fromId(j1);
             if (data == null) {
                 Block block = Block.getById(j1 >> 4);
-                if (/*block != null*/true) { // Reaper - Optimize
+                if (/*block != null*/true) { // Beast - Optimize
                     try {
                         data = block.fromLegacyData(j1 & 0xF);
                     } catch (Exception ignored) {
diff --git a/src/main/java/net/minecraft/server/DataWatcher.java b/src/main/java/net/minecraft/server/DataWatcher.java
index 1099a27b24a598b7986c8b4fce0c68896fdd2d61..68662576e50066d065b775ec0fb42cb146acb119 100644
--- a/src/main/java/net/minecraft/server/DataWatcher.java
+++ b/src/main/java/net/minecraft/server/DataWatcher.java
@@ -17,17 +17,17 @@ import org.apache.commons.lang3.ObjectUtils;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-// Reaper start - FastUtil optimization
+// Beast start - FastUtil optimization
 import it.unimi.dsi.fastutil.objects.Object2IntMap;
 import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;
-// Reaper end
+// Beast end
 
 public class DataWatcher {
 
     private static final Logger a = LogManager.getLogger();
-    private static final Object2IntMap<Class<? extends Entity>> b = new Object2IntOpenHashMap<>(); // Reaper - FastUtil optimization
+    private static final Object2IntMap<Class<? extends Entity>> b = new Object2IntOpenHashMap<>(); // Beast - FastUtil optimization
     private final Entity c;
-    private final Int2ObjectOpenHashMap<DataWatcher.Item<?>> d = new Int2ObjectOpenHashMap<>(); // Paper // Reaper - FastUtil optimization
+    private final Int2ObjectOpenHashMap<DataWatcher.Item<?>> d = new Int2ObjectOpenHashMap<>(); // Paper // Beast - FastUtil optimization
     // private final ReadWriteLock e = new ReentrantReadWriteLock(); // Spigot - not required // PAIL
     private boolean f = true;
     private boolean g;
@@ -52,7 +52,7 @@ public class DataWatcher {
         int i;
 
         if (DataWatcher.b.containsKey(oclass)) {
-            i = DataWatcher.b.getInt(oclass) + 1; // Reaper - FastUtil optimization
+            i = DataWatcher.b.getInt(oclass) + 1; // Beast - FastUtil optimization
         } else {
             int j = 0;
             Class oclass2 = oclass;
@@ -60,7 +60,7 @@ public class DataWatcher {
             while (oclass2 != Entity.class) {
                 oclass2 = oclass2.getSuperclass();
                 if (DataWatcher.b.containsKey(oclass2)) {
-                    j = DataWatcher.b.getInt(oclass2) + 1; // Reaper - FastUtil optimization
+                    j = DataWatcher.b.getInt(oclass2) + 1; // Beast - FastUtil optimization
                     break;
                 }
             }
@@ -83,7 +83,7 @@ public class DataWatcher {
 
         if (i > 254) {
             throw new IllegalArgumentException("Data value id is too big with " + i + "! (Max is " + 254 + ")");
-        } else if (this.d.containsKey(i)) { // Reaper - FastUtil optimization
+        } else if (this.d.containsKey(i)) { // Beast - FastUtil optimization
             throw new IllegalArgumentException("Duplicate id value for " + i + "!");
         } else if (DataWatcherRegistry.b(datawatcherobject.b()) < 0) {
             throw new IllegalArgumentException("Unregistered serializer " + datawatcherobject.b() + " for " + i + "!");
@@ -96,7 +96,7 @@ public class DataWatcher {
         DataWatcher.Item datawatcher_item = new DataWatcher.Item(datawatcherobject, t0);
 
         // this.e.writeLock().lock(); // Spigot - not required
-        this.d.put(datawatcherobject.a(), datawatcher_item); // Reaper - FastUtil optimization
+        this.d.put(datawatcherobject.a(), datawatcher_item); // Beast - FastUtil optimization
         this.f = false;
         // this.e.writeLock().unlock(); // Spigot - not required
     }
@@ -109,7 +109,7 @@ public class DataWatcher {
         DataWatcher.Item datawatcher_item;
 
         try {
-            datawatcher_item = this.d.get(datawatcherobject.a()); // Reaper - FastUtil optimization
+            datawatcher_item = this.d.get(datawatcherobject.a()); // Beast - FastUtil optimization
         } catch (Throwable throwable) {
             CrashReport crashreport = CrashReport.a(throwable, "Getting synched entity data");
             CrashReportSystemDetails crashreportsystemdetails = crashreport.a("Synched entity data");
diff --git a/src/main/java/net/minecraft/server/DedicatedPlayerList.java b/src/main/java/net/minecraft/server/DedicatedPlayerList.java
index cdb28adbcec0411e161f248d810a96e77fb7989f..64bbdac536087491b84ba95923338d5114abc48f 100644
--- a/src/main/java/net/minecraft/server/DedicatedPlayerList.java
+++ b/src/main/java/net/minecraft/server/DedicatedPlayerList.java
@@ -14,7 +14,7 @@ public class DedicatedPlayerList extends PlayerList {
         this.a(dedicatedserver.a("view-distance", 10));
         this.maxPlayers = dedicatedserver.a("max-players", 20);
         this.setHasWhitelist(dedicatedserver.a("white-list", false));
-        if (/*!dedicatedserver.R()*/true) { // Reaper - Remove singleplayer code
+        if (/*!dedicatedserver.R()*/true) { // Beast - Remove singleplayer code
             this.getProfileBans().a(true);
             this.getIPBans().a(true);
         }
diff --git a/src/main/java/net/minecraft/server/DedicatedServer.java b/src/main/java/net/minecraft/server/DedicatedServer.java
index f1d0d2ea5a152dd6503f0498e5332c27493981db..a6bdc909e595bc4435d7acae8ae07b038ffa119b 100644
--- a/src/main/java/net/minecraft/server/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/DedicatedServer.java
@@ -1,6 +1,6 @@
 package net.minecraft.server;
 
-import com.github.ruviolence.reaper.BeastConfig;
+import com.homomc.beast.BeastConfig;
 import com.mojang.authlib.GameProfileRepository;
 import com.mojang.authlib.minecraft.MinecraftSessionService;
 import com.mojang.authlib.yggdrasil.YggdrasilAuthenticationService;
@@ -32,7 +32,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
     public final RemoteControlCommandListener remoteControlCommandListener = new RemoteControlCommandListener(this);
     private RemoteControlListener p;
     public PropertyManager propertyManager;
-    // private EULA r; // Reaper - Unused
+    // private EULA r; // Beast - Unused
     private boolean generateStructures;
     private EnumGamemode t;
     private boolean u;
@@ -133,7 +133,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
 
         DedicatedServer.LOGGER.info("Loading properties");
         this.propertyManager = new PropertyManager(this.options); // CraftBukkit - CLI argument support
-        EULA r = new EULA(new File("eula.txt")); // Reaper
+        EULA r = new EULA(new File("eula.txt")); // Beast
         // Spigot Start
         boolean eulaAgreed = Boolean.getBoolean( "com.mojang.eula.agree" );
         if ( eulaAgreed )
@@ -143,12 +143,12 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
             System.err.println( "If you do not agree to the above EULA please stop your server and remove this flag immediately." );
         }
         // Spigot End
-        if (!r.a() && !eulaAgreed) { // Reaper // Spigot
+        if (!r.a() && !eulaAgreed) { // Beast // Spigot
             DedicatedServer.LOGGER.info("You need to agree to the EULA in order to run the server. Go to eula.txt for more info.");
-            r.b(); // Reaper
+            r.b(); // Beast
             return false;
         } else {
-            if (/*this.R()*/false) { // Reaper - Remove singleplayer code
+            if (/*this.R()*/false) { // Beast - Remove singleplayer code
                 this.c("127.0.0.1");
             } else {
                 this.setOnlineMode(this.propertyManager.getBoolean("online-mode", true));
@@ -194,7 +194,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
             com.destroystokyo.paper.PaperConfig.registerCommands();
             com.destroystokyo.paper.VersionHistoryManager.INSTANCE.getClass(); // load version history now
             // Paper end
-            BeastConfig.registerCommands(); // Reaper
+            BeastConfig.registerCommands(); // Beast
 
             DedicatedServer.LOGGER.info("Generating keypair");
             this.a(MinecraftEncryption.b());
@@ -219,7 +219,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
 
             if (!this.getOnlineMode()) {
                 DedicatedServer.LOGGER.warn("**** SERVER IS RUNNING IN OFFLINE/INSECURE MODE!");
-                /* // Reaper start - Reduce offline mode warn
+                /* // Beast start - Reduce offline mode warn
                 DedicatedServer.LOGGER.warn("The server will make no attempt to authenticate usernames. Beware.");
                 // Spigot start
                 if (org.spigotmc.SpigotConfig.bungee) {
@@ -230,7 +230,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
                 }
                 // Spigot end
                 DedicatedServer.LOGGER.warn("To change this, set \"online-mode\" to \"true\" in the server.properties file.");
-                */ // Reaper end
+                */ // Beast end
             }
 
             if (this.aS()) {
@@ -272,7 +272,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
 
                 this.getEnableCommandBlock();
                 this.q();
-                // this.getSnooperEnabled(); // Reaper - Remove snooper
+                // this.getSnooperEnabled(); // Beast - Remove snooper
                 this.aG();
                 this.c(this.propertyManager.getInt("max-build-height", 256));
                 this.c((this.getMaxBuildHeight() + 8) / 16 * 16);
@@ -429,15 +429,15 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
     }
 
     public void a(MojangStatisticsGenerator mojangstatisticsgenerator) {
-        /* // Reaper start - Remove snooper
+        /* // Beast start - Remove snooper
         mojangstatisticsgenerator.a("whitelist_enabled", Boolean.valueOf(this.aQ().getHasWhitelist()));
         mojangstatisticsgenerator.a("whitelist_count", Integer.valueOf(this.aQ().getWhitelisted().length));
         super.a(mojangstatisticsgenerator);
-        */ // Reaper end
+        */ // Beast end
     }
 
     public boolean getSnooperEnabled() {
-        return false; // Reaper - Remove snooper
+        return false; // Beast - Remove snooper
     }
 
     public void issueCommand(String s, ICommandListener icommandlistener) {
diff --git a/src/main/java/net/minecraft/server/DefinedStructure.java b/src/main/java/net/minecraft/server/DefinedStructure.java
index dd0bcb3173a1d017acaabb7fdde62c94008a8aff..7360eeb10ee2b221101d1df6ce2f67210538f090 100644
--- a/src/main/java/net/minecraft/server/DefinedStructure.java
+++ b/src/main/java/net/minecraft/server/DefinedStructure.java
@@ -529,7 +529,7 @@ public class DefinedStructure {
         int i = aint.length;
 
         for (int j = 0; j < i; ++j) {
-            int k = aint[j]; // Reaper - Inline
+            int k = aint[j]; // Beast - Inline
 
             nbttaglist.add(new NBTTagInt(k));
         }
@@ -543,7 +543,7 @@ public class DefinedStructure {
         int i = adouble.length;
 
         for (int j = 0; j < i; ++j) {
-            double d0 = adouble[j]; // Reaper - Inline
+            double d0 = adouble[j]; // Beast - Inline
 
             nbttaglist.add(new NBTTagDouble(d0));
         }
diff --git a/src/main/java/net/minecraft/server/DispenseBehaviorItem.java b/src/main/java/net/minecraft/server/DispenseBehaviorItem.java
index 646b6d6c3f10d0f1754dfd58e18663264be48130..742e5e955a95c609502373378d057d31b4742cff 100644
--- a/src/main/java/net/minecraft/server/DispenseBehaviorItem.java
+++ b/src/main/java/net/minecraft/server/DispenseBehaviorItem.java
@@ -19,7 +19,7 @@ public class DispenseBehaviorItem implements IDispenseBehavior {
 
     protected ItemStack b(ISourceBlock isourceblock, ItemStack itemstack) {
         EnumDirection enumdirection = (EnumDirection) isourceblock.e().get(BlockDispenser.FACING);
-        // IPosition iposition = BlockDispenser.a(isourceblock); // Reaper - Unused
+        // IPosition iposition = BlockDispenser.a(isourceblock); // Beast - Unused
         ItemStack itemstack1 = itemstack.cloneAndSubtract(1);
 
         // CraftBukkit start
diff --git a/src/main/java/net/minecraft/server/DispenserRegistry.java b/src/main/java/net/minecraft/server/DispenserRegistry.java
index 3b976e3765bc7700ac8dc9e424582bcc71844d83..4d7bee71e8c83972f4befb5b609a9d1e988e5f69 100644
--- a/src/main/java/net/minecraft/server/DispenserRegistry.java
+++ b/src/main/java/net/minecraft/server/DispenserRegistry.java
@@ -23,7 +23,7 @@ public class DispenserRegistry {
     private static boolean c;
     public static boolean b;
     private static final Logger d = LogManager.getLogger();
-    public static boolean isBlocksInitialized = false;// Reaper - Lithium: ai/pathing/LandPathNodeMaker
+    public static boolean isBlocksInitialized = false;// Beast - Lithium: ai/pathing/LandPathNodeMaker
 
     public static boolean a() {
         return DispenserRegistry.c;
@@ -147,7 +147,7 @@ public class DispenserRegistry {
                     }
                 }
 
-                // itemstack1 = CraftItemStack.asNMSCopy(event.getItem()); // Reaper - Unused
+                // itemstack1 = CraftItemStack.asNMSCopy(event.getItem()); // Beast - Unused
 
                 Entity entity = ItemMonsterEgg.spawnCreature(isourceblock.getWorld(), ItemMonsterEgg.h(itemstack), event.getVelocity().getX(), event.getVelocity().getY(), event.getVelocity().getZ(), org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.DISPENSE_EGG);
 
@@ -466,7 +466,7 @@ public class DispenserRegistry {
                     // CraftBukkit end
 
                     if (ItemDye.a(itemstack, world, blockposition)) {
-                        if (true) { // Reaper - Remove isClientSide check
+                        if (true) { // Beast - Remove isClientSide check
                             world.triggerEffect(2005, blockposition, 0);
                         }
                     } else {
@@ -573,7 +573,7 @@ public class DispenserRegistry {
 
                 this.b = true;
                 if (world.isEmpty(blockposition) && blockskull.b(world, blockposition, itemstack)) {
-                    if (true) { // Reaper - Remove isClientSide check
+                    if (true) { // Beast - Remove isClientSide check
                         world.setTypeAndData(blockposition, blockskull.getBlockData().set(BlockSkull.FACING, EnumDirection.UP), 3);
                         TileEntity tileentity = world.getTileEntity(blockposition);
 
@@ -645,7 +645,7 @@ public class DispenserRegistry {
 
                 this.b = true;
                 if (world.isEmpty(blockposition) && blockpumpkin.b(world, blockposition)) {
-                    if (true) { // Reaper - Remove isClientSide check
+                    if (true) { // Beast - Remove isClientSide check
                         world.setTypeAndData(blockposition, blockpumpkin.getBlockData(), 3);
                     }
 
@@ -758,10 +758,10 @@ public class DispenserRegistry {
                 EnumDirection enumdirection1 = world.isEmpty(blockposition.down()) ? enumdirection : EnumDirection.UP;
                 IBlockData iblockdata = block.getBlockData().set(BlockShulkerBox.a, enumdirection1);
 
-                // Reaper start
+                // Beast start
                 boolean wasPlaced = world.setTypeUpdate(blockposition, iblockdata);
                 if (!wasPlaced) return itemstack;
-                // Reaper end
+                // Beast end
                 TileEntity tileentity = world.getTileEntity(blockposition);
                 ItemStack itemstack1 = itemstack.cloneAndSubtract(1);
 
diff --git a/src/main/java/net/minecraft/server/DragonControllerLandedFlame.java b/src/main/java/net/minecraft/server/DragonControllerLandedFlame.java
index 5d6e1d9759d0b2446a252a22811333619480b219..3c91be647bd29be4a09a0efc4234b350aa5e930b 100644
--- a/src/main/java/net/minecraft/server/DragonControllerLandedFlame.java
+++ b/src/main/java/net/minecraft/server/DragonControllerLandedFlame.java
@@ -11,7 +11,7 @@ public class DragonControllerLandedFlame extends AbstractDragonControllerLanded
     }
 
     public void b() {
-        if (true) return; // Reaper - Clientside particles
+        if (true) return; // Beast - Clientside particles
         ++this.b;
         if (this.b % 2 == 0 && this.b < 10) {
             Vec3D vec3d = this.a.a(1.0F).a();
diff --git a/src/main/java/net/minecraft/server/DragonControllerLanding.java b/src/main/java/net/minecraft/server/DragonControllerLanding.java
index 8c754ef287515af9246035f81722629b4ad28070..f94a90a69151e51ca589244d931486551752e592 100644
--- a/src/main/java/net/minecraft/server/DragonControllerLanding.java
+++ b/src/main/java/net/minecraft/server/DragonControllerLanding.java
@@ -11,7 +11,7 @@ public class DragonControllerLanding extends AbstractDragonController {
     }
 
     public void b() {
-        if (true) return; // Reaper - Clientside particles
+        if (true) return; // Beast - Clientside particles
         Vec3D vec3d = this.a.a(1.0F).a();
 
         vec3d.b(-0.7853982F);
diff --git a/src/main/java/net/minecraft/server/DragonControllerManager.java b/src/main/java/net/minecraft/server/DragonControllerManager.java
index 7711a05d1402ea518c9835b31507f6a5235cc2dc..59e2269fa02432f3a14ebe2f10aa0e48aef6eb82 100644
--- a/src/main/java/net/minecraft/server/DragonControllerManager.java
+++ b/src/main/java/net/minecraft/server/DragonControllerManager.java
@@ -39,11 +39,11 @@ public class DragonControllerManager {
             // CraftBukkit end
 
             this.currentDragonController = this.b(dragoncontrollerphase);
-            if (true) { // Reaper - Remove isClientSide check
+            if (true) { // Beast - Remove isClientSide check
                 this.enderDragon.getDataWatcher().set(EntityEnderDragon.PHASE, Integer.valueOf(dragoncontrollerphase.b()));
             }
 
-            DragonControllerManager.a.debug("Dragon is now in phase {} on the server", dragoncontrollerphase); // Reaper - Remove isClientSide check
+            DragonControllerManager.a.debug("Dragon is now in phase {} on the server", dragoncontrollerphase); // Beast - Remove isClientSide check
             this.currentDragonController.d();
         }
     }
diff --git a/src/main/java/net/minecraft/server/DragonControllerStrafe.java b/src/main/java/net/minecraft/server/DragonControllerStrafe.java
index f31d777a3c6a40b23bc3bde85a1820bcbeea963e..21ba17b11717f9ff148924995796480e8a576983 100644
--- a/src/main/java/net/minecraft/server/DragonControllerStrafe.java
+++ b/src/main/java/net/minecraft/server/DragonControllerStrafe.java
@@ -63,7 +63,7 @@ public class DragonControllerStrafe extends AbstractDragonController {
                         double d10 = this.f.locY + (double) (this.f.length / 2.0F) - (d7 + (double) (this.a.bw.length / 2.0F));
                         double d11 = this.f.locZ - d8;
 
-                        this.a.world.a((EntityHuman) null, 1017, this.a.blockPos, 0); // Reaper - Cache current block pos
+                        this.a.world.a((EntityHuman) null, 1017, this.a.blockPos, 0); // Beast - Cache current block pos
                         EntityDragonFireball entitydragonfireball = new EntityDragonFireball(this.a.world, this.a, d9, d10, d11);
 
                         entitydragonfireball.setPositionRotation(d6, d7, d8, 0.0F, 0.0F);
diff --git a/src/main/java/net/minecraft/server/Enchantment.java b/src/main/java/net/minecraft/server/Enchantment.java
index 213e5e156bcf0809279388f5186737859a17c126..d4fec5b5717e9540f2b76ae3969b6e8ac12d8b92 100644
--- a/src/main/java/net/minecraft/server/Enchantment.java
+++ b/src/main/java/net/minecraft/server/Enchantment.java
@@ -153,8 +153,8 @@ public abstract class Enchantment {
         Enchantment.enchantments.a(51, new MinecraftKey("infinity"), new EnchantmentInfiniteArrows(Enchantment.Rarity.VERY_RARE, new EnumItemSlot[] { EnumItemSlot.MAINHAND}));
         Enchantment.enchantments.a(61, new MinecraftKey("luck_of_the_sea"), new EnchantmentLootBonus(Enchantment.Rarity.RARE, EnchantmentSlotType.FISHING_ROD, new EnumItemSlot[] { EnumItemSlot.MAINHAND}));
         Enchantment.enchantments.a(62, new MinecraftKey("lure"), new EnchantmentLure(Enchantment.Rarity.RARE, EnchantmentSlotType.FISHING_ROD, new EnumItemSlot[] { EnumItemSlot.MAINHAND}));
-        Enchantment.enchantments.a(70, new MinecraftKey("mending"), new EnchantmentMending(Enchantment.Rarity.RARE, EnumItemSlot.VALUES)); // Reaper - Single values array
-        Enchantment.enchantments.a(71, new MinecraftKey("vanishing_curse"), new EnchantmentVanishing(Enchantment.Rarity.VERY_RARE, EnumItemSlot.VALUES)); // Reaper - Single values array
+        Enchantment.enchantments.a(70, new MinecraftKey("mending"), new EnchantmentMending(Enchantment.Rarity.RARE, EnumItemSlot.VALUES)); // Beast - Single values array
+        Enchantment.enchantments.a(71, new MinecraftKey("vanishing_curse"), new EnchantmentVanishing(Enchantment.Rarity.VERY_RARE, EnumItemSlot.VALUES)); // Beast - Single values array
         // CraftBukkit start
         for (Object enchantment : Enchantment.enchantments) {
             org.bukkit.enchantments.Enchantment.registerEnchantment(new org.bukkit.craftbukkit.enchantments.CraftEnchantment((Enchantment) enchantment));
diff --git a/src/main/java/net/minecraft/server/EnchantmentManager.java b/src/main/java/net/minecraft/server/EnchantmentManager.java
index 60716ccaf5b59860ea188bbbdc3b08e5e497d832..563ebe80ef1317b67c0518be8de7b4c3be5f2dca 100644
--- a/src/main/java/net/minecraft/server/EnchantmentManager.java
+++ b/src/main/java/net/minecraft/server/EnchantmentManager.java
@@ -1,6 +1,6 @@
 package net.minecraft.server;
 
-import com.github.ruviolence.reaper.BeastConfig;
+import com.homomc.beast.BeastConfig;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import java.util.ArrayList;
@@ -63,7 +63,7 @@ public class EnchantmentManager {
 
             if (enchantment != null) {
                 int i = ((Integer) entry.getValue()).intValue();
-                NBTTagCompound nbttagcompound = new NBTTagCompound(2); // Reaper - Use initial capacity
+                NBTTagCompound nbttagcompound = new NBTTagCompound(2); // Beast - Use initial capacity
 
                 nbttagcompound.setShort("id", (short) Enchantment.getId(enchantment));
                 nbttagcompound.setShort("lvl", (short) i);
@@ -112,12 +112,12 @@ public class EnchantmentManager {
     }
 
     public static int a(Iterable<ItemStack> iterable, DamageSource damagesource) {
-        // Reaper start - Old combat
+        // Beast start - Old combat
         if (BeastConfig.oldCombatEnabled) {
             EnchantmentManager.a.a = 0;
             EnchantmentManager.a.b = damagesource;
             a(EnchantmentManager.a, iterable);
-            EnchantmentManager.a.b = null; // Reaper - Fix MC-128547
+            EnchantmentManager.a.b = null; // Beast - Fix MC-128547
             if (EnchantmentManager.a.a > 25) {
                 EnchantmentManager.a.a = 25;
             } else if (EnchantmentManager.a.a < 0) {
@@ -125,11 +125,11 @@ public class EnchantmentManager {
             }
             return (EnchantmentManager.a.a + 1 >> 1) + BeastConfig.oldCombatRandom.nextInt((EnchantmentManager.a.a >> 1) + 1);
         }
-        // Reaper end
+        // Beast end
         EnchantmentManager.a.a = 0;
         EnchantmentManager.a.b = damagesource;
         a((EnchantmentManager.EnchantmentModifier) EnchantmentManager.a, iterable);
-        EnchantmentManager.a.b = null; // Reaper - Fix MC-128547
+        EnchantmentManager.a.b = null; // Beast - Fix MC-128547
         return EnchantmentManager.a.a;
     }
 
@@ -157,10 +157,10 @@ public class EnchantmentManager {
             a((EnchantmentManager.EnchantmentModifier) EnchantmentManager.c, entityliving.getItemInMainHand());
         }
 
-        // Reaper start - Fix MC-128547
+        // Beast start - Fix MC-128547
         EnchantmentManager.c.b = null;
         EnchantmentManager.c.a = null;
-        // Reaper end
+        // Beast end
     }
 
     public static void b(EntityLiving entityliving, Entity entity) {
@@ -174,10 +174,10 @@ public class EnchantmentManager {
             a((EnchantmentManager.EnchantmentModifier) EnchantmentManager.d, entityliving.getItemInMainHand());
         }
 
-        // Reaper start - Fix MC-128547
+        // Beast start - Fix MC-128547
         EnchantmentManager.d.b = null;
         EnchantmentManager.d.a = null;
-        // Reaper end
+        // Beast end
     }
 
     public static int a(Enchantment enchantment, EntityLiving entityliving) {
diff --git a/src/main/java/net/minecraft/server/EnchantmentProtection.java b/src/main/java/net/minecraft/server/EnchantmentProtection.java
index 048d4091c39cef805d766bde16f3b2d8e22dbc73..2cde19e52faba64c9dd2da61108024c95b574c7c 100644
--- a/src/main/java/net/minecraft/server/EnchantmentProtection.java
+++ b/src/main/java/net/minecraft/server/EnchantmentProtection.java
@@ -1,6 +1,6 @@
 package net.minecraft.server;
 
-import com.github.ruviolence.reaper.BeastConfig;
+import com.homomc.beast.BeastConfig;
 
 public class EnchantmentProtection extends Enchantment {
 
@@ -28,7 +28,7 @@ public class EnchantmentProtection extends Enchantment {
     }
 
     public int a(int i, DamageSource damagesource) {
-        // Reaper start - Old combat
+        // Beast start - Old combat
         if (BeastConfig.oldCombatEnabled) {
             if (damagesource.ignoresInvulnerability()) return 0;
             float lvl = (6 + i * i) / 3.0F;
@@ -44,7 +44,7 @@ public class EnchantmentProtection extends Enchantment {
                 return this.a == EnchantmentProtection.DamageType.PROJECTILE && damagesource.a() ? MathHelper.d(lvl * 1.5F) : 0;
             }
         }
-        // Reaper end
+        // Beast end
         return damagesource.ignoresInvulnerability() ? 0 : (this.a == EnchantmentProtection.DamageType.ALL ? i : (this.a == EnchantmentProtection.DamageType.FIRE && damagesource.o() ? i * 2 : (this.a == EnchantmentProtection.DamageType.FALL && damagesource == DamageSource.FALL ? i * 3 : (this.a == EnchantmentProtection.DamageType.EXPLOSION && damagesource.isExplosion() ? i * 2 : (this.a == EnchantmentProtection.DamageType.PROJECTILE && damagesource.a() ? i * 2 : 0)))));
     }
 
diff --git a/src/main/java/net/minecraft/server/EnchantmentSlotType.java b/src/main/java/net/minecraft/server/EnchantmentSlotType.java
index 560ec6db932b5e1a001682a2aa66855de3b6f9a1..99e067c07124cccc3ad114470137d994f7c22f40 100644
--- a/src/main/java/net/minecraft/server/EnchantmentSlotType.java
+++ b/src/main/java/net/minecraft/server/EnchantmentSlotType.java
@@ -4,7 +4,7 @@ public enum EnchantmentSlotType {
 
     ALL {;
         public boolean canEnchant(Item item) {
-            EnchantmentSlotType[] aenchantmentslottype = EnchantmentSlotType.VALUES; // Reaper - Single values array
+            EnchantmentSlotType[] aenchantmentslottype = EnchantmentSlotType.VALUES; // Beast - Single values array
             int i = aenchantmentslottype.length;
 
             for (int j = 0; j < i; ++j) {
@@ -64,7 +64,7 @@ public enum EnchantmentSlotType {
         return item instanceof ItemArmor || item instanceof ItemElytra || item instanceof ItemSkull || flag;
     }
 };
-    public static final EnchantmentSlotType[] VALUES = values(); // Reaper - Single values array
+    public static final EnchantmentSlotType[] VALUES = values(); // Beast - Single values array
 
     private EnchantmentSlotType() {}
 
diff --git a/src/main/java/net/minecraft/server/EnchantmentThorns.java b/src/main/java/net/minecraft/server/EnchantmentThorns.java
index cd29ad7a7b50cac39fec66c1c6c1d3dcce929b7b..7daedff0d19c09be2da2f0c542596583fdbd532e 100644
--- a/src/main/java/net/minecraft/server/EnchantmentThorns.java
+++ b/src/main/java/net/minecraft/server/EnchantmentThorns.java
@@ -30,7 +30,7 @@ public class EnchantmentThorns extends Enchantment {
         ItemStack itemstack = EnchantmentManager.b(Enchantments.THORNS, entityliving);
 
         if (entity != null && a(i, random)) { // CraftBukkit
-            if (/*entity != null*/true) { // Reaper - Optimize
+            if (/*entity != null*/true) { // Beast - Optimize
                 entity.damageEntity(DamageSource.a(entityliving), (float) b(i, random));
             }
 
diff --git a/src/main/java/net/minecraft/server/EnchantmentWeaponDamage.java b/src/main/java/net/minecraft/server/EnchantmentWeaponDamage.java
index 5ce2cc6d00351b7ff9961955605fa831044cf7ee..2a2fc6854810ef203c8293c9e8102f29662f3176 100644
--- a/src/main/java/net/minecraft/server/EnchantmentWeaponDamage.java
+++ b/src/main/java/net/minecraft/server/EnchantmentWeaponDamage.java
@@ -1,6 +1,6 @@
 package net.minecraft.server;
 
-import com.github.ruviolence.reaper.BeastConfig;
+import com.homomc.beast.BeastConfig;
 
 public class EnchantmentWeaponDamage extends Enchantment {
 
@@ -28,7 +28,7 @@ public class EnchantmentWeaponDamage extends Enchantment {
     }
 
     public float a(int i, EnumMonsterType enummonstertype) {
-        if (this.a == 0 && BeastConfig.oldCombatEnabled) return i * 1.25F; // Reaper - Old pvp
+        if (this.a == 0 && BeastConfig.oldCombatEnabled) return i * 1.25F; // Beast - Old pvp
         return this.a == 0 ? 1.0F + (float) Math.max(0, i - 1) * 0.5F : (this.a == 1 && enummonstertype == EnumMonsterType.UNDEAD ? (float) i * 2.5F : (this.a == 2 && enummonstertype == EnumMonsterType.ARTHROPOD ? (float) i * 2.5F : 0.0F));
     }
 
diff --git a/src/main/java/net/minecraft/server/EnderDragonBattle.java b/src/main/java/net/minecraft/server/EnderDragonBattle.java
index c37e3c743d845e4bdb3dc4f384baecab1fc9efb1..4f03b132414b0d0eb93e3ffcf1664a9c3ff0e213 100644
--- a/src/main/java/net/minecraft/server/EnderDragonBattle.java
+++ b/src/main/java/net/minecraft/server/EnderDragonBattle.java
@@ -414,7 +414,7 @@ public class EnderDragonBattle {
             Entity entity = this.d.getEntity(this.m);
 
             if (entity instanceof EntityEnderDragon) {
-                ((EntityEnderDragon) entity).a(entityendercrystal, entityendercrystal.blockPos, damagesource); // Reaper - Cache current block pos
+                ((EntityEnderDragon) entity).a(entityendercrystal, entityendercrystal.blockPos, damagesource); // Beast - Cache current block pos
             }
         }
 
diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index 5801f67907339489a9d64ee095c9c63e6c0ca14f..48b61992a45784c7e6201be373e36104face7b85 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -1,6 +1,6 @@
 package net.minecraft.server;
 
-import com.github.ruviolence.reaper.BeastConfig;
+import com.homomc.beast.BeastConfig;
 import com.google.common.collect.Iterables;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Sets;
@@ -115,7 +115,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
     public float lastYaw;
     public float lastPitch;
     private AxisAlignedBB boundingBox;
-    public BlockPosition blockPos; // Reaper - Cache current block pos
+    public BlockPosition blockPos; // Beast - Cache current block pos
     public boolean onGround;
     public boolean positionChanged;
     public boolean B;
@@ -194,13 +194,13 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
         return this.yaw;
     }
     // CraftBukkit end
-    // Reaper start - Cache isInLava result
+    // Beast start - Cache isInLava result
     private boolean isInLava;
     private int lastLavaCheck = -1;
-    // Reaper end
-    public EnumMoveType moveType; // Reaper - EntityMoveEvent
+    // Beast end
+    public EnumMoveType moveType; // Beast - EntityMoveEvent
 
-    // Reaper start - Cache current block pos
+    // Beast start - Cache current block pos
     void resetBlockPos() {
         resetBlockPos(locX, locY, locZ);
     }
@@ -213,13 +213,13 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
             this.blockPos = new BlockPosition(blockX, blockY, blockZ);
         }
     }
-    // Reaper end
+    // Beast end
 
     public Entity(World world) {
         this.id = Entity.entityCount++;
         this.passengers = Lists.newArrayList();
         this.boundingBox = Entity.c;
-        this.blockPos = BlockPosition.ZERO; // Reaper - Cache current block pos
+        this.blockPos = BlockPosition.ZERO; // Beast - Cache current block pos
         this.width = 0.6F;
         this.length = 1.8F;
         this.ax = 1;
@@ -228,7 +228,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
         this.fireTicks = -this.getMaxFireTicks();
         this.justCreated = true;
         this.uniqueID = MathHelper.a(this.random);
-        this.ar = com.eatthepath.uuid.FastUUID.toString(this.uniqueID); // Reaper - Use FastUUID
+        this.ar = com.eatthepath.uuid.FastUUID.toString(this.uniqueID); // Beast - Use FastUUID
         this.aG = new CommandObjectiveExecutor();
         this.aH = Sets.newHashSet();
         this.aJ = new double[] { 0.0D, 0.0D, 0.0D};
@@ -319,7 +319,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
             AxisAlignedBB axisalignedbb = this.getBoundingBox();
 
             this.a(new AxisAlignedBB(axisalignedbb.a, axisalignedbb.b, axisalignedbb.c, axisalignedbb.a + (double) this.width, axisalignedbb.b + (double) this.length, axisalignedbb.c + (double) this.width));
-            if (this.width > f2 && !this.justCreated) { // Reaper - Remove isClientSide check
+            if (this.width > f2 && !this.justCreated) { // Beast - Remove isClientSide check
                 this.move(EnumMoveType.SELF, (double) (f2 - this.width), 0.0D, (double) (f2 - this.width));
             }
         }
@@ -364,14 +364,14 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
         this.locZ = d2;
         float f = this.width / 2.0F;
         float f1 = this.length;
-        resetBlockPos(d0, d1, d2); // Reaper - Cache current block pos
+        resetBlockPos(d0, d1, d2); // Beast - Cache current block pos
 
         this.a(new AxisAlignedBB(d0 - (double) f, d1, d2 - (double) f, d0 + (double) f, d1 + (double) f1, d2 + (double) f));
         if (valid) world.entityJoinedWorld(this, false); // CraftBukkit
     }
 
     public void B_() {
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             this.setFlag(6, this.aW());
         }
 
@@ -381,8 +381,8 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
     // CraftBukkit start
     public void postTick() {
         // No clean way to break out of ticking once the entity has been copied to a new world, so instead we move the portalling later in the tick cycle
-        if (this.world instanceof WorldServer) { // Reaper - Remove isClientSide check
-            // this.world.methodProfiler.a("portal"); // Reaper - Remove MethodProfiler
+        if (this.world instanceof WorldServer) { // Beast - Remove isClientSide check
+            // this.world.methodProfiler.a("portal"); // Beast - Remove MethodProfiler
             if (this.ak) {
                 MinecraftServer minecraftserver = this.world.getMinecraftServer();
 
@@ -418,13 +418,13 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
             }
 
             this.I();
-            // this.world.methodProfiler.b(); // Reaper - Remove MethodProfiler
+            // this.world.methodProfiler.b(); // Beast - Remove MethodProfiler
         }
     }
     // CraftBukkit end
 
     public void Y() {
-        // this.world.methodProfiler.a("entityBaseTick"); // Reaper - Remove MethodProfiler
+        // this.world.methodProfiler.a("entityBaseTick"); // Beast - Remove MethodProfiler
         if (this.isPassenger() && this.bJ().dead) {
             this.stopRiding();
         }
@@ -484,7 +484,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
 
         this.as();
         this.aq();
-        if (false) { // Reaper - Remove isClientSide check
+        if (false) { // Beast - Remove isClientSide check
             this.extinguish();
         } else if (this.fireTicks > 0) {
             if (this.fireProof) {
@@ -516,12 +516,12 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
         this.checkAndDoHeightDamage();
         // Paper end
 
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             this.setFlag(0, this.fireTicks > 0);
         }
 
         this.justCreated = false;
-        // this.world.methodProfiler.b(); // Reaper - Remove MethodProfiler
+        // this.world.methodProfiler.b(); // Beast - Remove MethodProfiler
     }
 
     // Paper start - Configurable top of nether void damage
@@ -608,7 +608,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
     }
 
     public void move(EnumMoveType enummovetype, double d0, double d1, double d2) {
-        this.moveType = enummovetype; // Reaper - EntityMoveEvent
+        this.moveType = enummovetype; // Beast - EntityMoveEvent
         if (this.noclip) {
             this.a(this.getBoundingBox().d(d0, d1, d2));
             this.recalcPosition();
@@ -671,7 +671,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
                 }
             }
 
-            // this.world.methodProfiler.a("move"); // Reaper - Remove MethodProfiler
+            // this.world.methodProfiler.a("move"); // Beast - Remove MethodProfiler
             double d4 = this.locX;
             double d5 = this.locY;
             double d6 = this.locZ;
@@ -864,8 +864,8 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
                 }
             }
 
-            // this.world.methodProfiler.b(); // Reaper - Remove MethodProfiler
-            // this.world.methodProfiler.a("rest"); // Reaper - Remove MethodProfiler
+            // this.world.methodProfiler.b(); // Beast - Remove MethodProfiler
+            // this.world.methodProfiler.a("rest"); // Beast - Remove MethodProfiler
             this.recalcPosition();
             this.positionChanged = d7 != d0 || d9 != d2;
             this.B = d1 != d8; // CraftBukkit - decompile error
@@ -953,7 +953,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
 
                         this.a(this.ae(), f1, 1.0F + (this.random.nextFloat() - this.random.nextFloat()) * 0.4F);
                     } else {
-                        if (BeastConfig.stepSounds) // Reaper
+                        if (BeastConfig.stepSounds) // Beast
                         this.a(blockposition, block1);
                     }
                 } else if (this.K > this.ay && this.ah() && iblockdata.getMaterial() == Material.AIR) {
@@ -990,7 +990,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
                             this.setOnFire(event.getDuration());
                         }
                         // CraftBukkit end
-                    } else if (BeastConfig.oldCombatFireCombust) this.setOnFire(8); // Reaper - Old combat
+                    } else if (BeastConfig.oldCombatFireCombust) this.setOnFire(8); // Beast - Old combat
                 }
             } else if (this.fireTicks <= 0) {
                 this.fireTicks = -this.getMaxFireTicks();
@@ -1001,7 +1001,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
                 this.fireTicks = -this.getMaxFireTicks();
             }
 
-            // this.world.methodProfiler.b(); // Reaper - Remove MethodProfiler
+            // this.world.methodProfiler.b(); // Beast - Remove MethodProfiler
         }
     }
 
@@ -1011,7 +1011,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
         this.locX = (axisalignedbb.a + axisalignedbb.d) / 2.0D;
         this.locY = axisalignedbb.b;
         this.locZ = (axisalignedbb.c + axisalignedbb.f) / 2.0D;
-        resetBlockPos(); // Reaper - Cache current block pos
+        resetBlockPos(); // Beast - Cache current block pos
         if (valid) world.entityJoinedWorld(this, false); // CraftBukkit
     }
 
@@ -1195,7 +1195,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
     }
 
     protected void ar() {
-        // Reaper start - Optimize
+        // Beast start - Optimize
         Entity entity;
         if (this.isVehicle()) {
             entity = this.bE();
@@ -1205,7 +1205,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
         } else {
             entity = this;
         }
-        // Reaper end
+        // Beast end
         float f = entity == this ? 0.2F : 0.9F;
         float f1 = MathHelper.sqrt(entity.motX * entity.motX * 0.20000000298023224D + entity.motY * entity.motY + entity.motZ * entity.motZ * 0.20000000298023224D) * f;
 
@@ -1214,7 +1214,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
         }
 
         this.a(this.af(), f1, 1.0F + (this.random.nextFloat() - this.random.nextFloat()) * 0.4F);
-        /* // Reaper start - Clientside particles
+        /* // Beast start - Clientside particles
         float f2 = (float) MathHelper.floor(this.getBoundingBox().b);
 
         int i;
@@ -1232,12 +1232,12 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
             f4 = (this.random.nextFloat() * 2.0F - 1.0F) * this.width;
             this.world.addParticle(EnumParticle.WATER_SPLASH, this.locX + (double) f3, (double) (f2 + 1.0F), this.locZ + (double) f4, this.motX, this.motY, this.motZ, new int[0]);
         }
-        */ // Reaper end
+        */ // Beast end
 
     }
 
     public void as() {
-        if (true) return; // Reaper - Clientside particles
+        if (true) return; // Beast - Clientside particles
         if (this.isSprinting() && !this.isInWater()) {
             this.at();
         }
@@ -1245,7 +1245,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
     }
 
     protected void at() {
-        if (true) return; // Reaper - Clientside particles
+        if (true) return; // Beast - Clientside particles
         int i = MathHelper.floor(this.locX);
         int j = MathHelper.floor(this.locY - 0.20000000298023224D);
         int k = MathHelper.floor(this.locZ);
@@ -1279,14 +1279,14 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
     }
 
     public boolean au() {
-        // Reaper start - Cache isInLava result
+        // Beast start - Cache isInLava result
         int currentTick = MinecraftServer.currentTick;
         if (this.lastLavaCheck != currentTick) {
             this.lastLavaCheck = currentTick;
             this.isInLava = this.world.a(this.getBoundingBox().grow(-0.10000000149011612D, -0.4000000059604645D, -0.10000000149011612D), Material.LAVA);
         }
         return this.isInLava;
-        // Reaper end
+        // Beast end
     }
 
     public void b(float f, float f1, float f2, float f3) {
@@ -1567,7 +1567,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
 
     public NBTTagCompound save(NBTTagCompound nbttagcompound) {
         try {
-            // Reaper start
+            // Beast start
             double locX = this.locX;
             double locY = this.locY;
             double locZ = this.locZ;
@@ -1575,7 +1575,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
             if (Double.isNaN(locY)) locY = 0;
             if (Double.isNaN(locZ)) locZ = 0;
             nbttagcompound.set("Pos", this.a(new double[] {locX, locY, locZ}));
-            // Reaper end
+            // Beast end
             nbttagcompound.set("Motion", this.a(new double[] { this.motX, this.motY, this.motZ}));
 
             // CraftBukkit start - Checking for NaN pitch/yaw and resetting to zero
@@ -1623,7 +1623,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
             }
 
             if (this.glowing) {
-                nbttagcompound.setBoolean("Glowing", /*this.glowing*/true); // Reaper - Optimize
+                nbttagcompound.setBoolean("Glowing", /*this.glowing*/true); // Beast - Optimize
             }
 
             NBTTagList nbttaglist;
@@ -1741,7 +1741,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
             this.portalCooldown = nbttagcompound.getInt("PortalCooldown");
             if (nbttagcompound.b("UUID")) {
                 this.uniqueID = nbttagcompound.a("UUID");
-                this.ar = com.eatthepath.uuid.FastUUID.toString(this.uniqueID); // Reaper - Use FastUUID
+                this.ar = com.eatthepath.uuid.FastUUID.toString(this.uniqueID); // Beast - Use FastUUID
             }
 
             this.setPosition(this.locX, this.locY, this.locZ);
@@ -1809,7 +1809,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
             // CraftBukkit start - Reset world
             if (this instanceof EntityPlayer) {
                 Server server = Bukkit.getServer();
-                org.bukkit.World bworld /*= null*/; // Reaper - Optimize
+                org.bukkit.World bworld /*= null*/; // Beast - Optimize
 
                 // TODO: Remove World related checks, replaced with WorldUID
                 String worldName = nbttagcompound.getString("world");
@@ -1919,7 +1919,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
         int i = adouble.length;
 
         for (int j = 0; j < i; ++j) {
-            double d0 = adouble[j]; // Reaper - Inline
+            double d0 = adouble[j]; // Beast - Inline
 
             nbttaglist.add(new NBTTagDouble(d0));
         }
@@ -1933,7 +1933,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
         int i = afloat.length;
 
         for (int j = 0; j < i; ++j) {
-            float f = afloat[j]; // Reaper - Inline
+            float f = afloat[j]; // Beast - Inline
 
             nbttaglist.add(new NBTTagFloat(f));
         }
@@ -2114,7 +2114,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
                 return;
             }
             // Spigot end
-            if (entity instanceof EntityHuman && !(this.bE() instanceof EntityHuman)) { // Reaper - Remove isClientSide check
+            if (entity instanceof EntityHuman && !(this.bE() instanceof EntityHuman)) { // Beast - Remove isClientSide check
                 this.passengers.add(0, entity);
             } else {
                 this.passengers.add(entity);
@@ -2157,7 +2157,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
     }
 
     protected boolean q(Entity entity) {
-        return this.isPassengersEmpty(); // Reaper
+        return this.isPassengersEmpty(); // Beast
     }
 
     public float aI() {
@@ -2172,7 +2172,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
         if (this.portalCooldown > 0) {
             this.portalCooldown = this.aM();
         } else {
-            if (!blockposition.equals(this.an)) { // Reaper - Remove isClientSide check
+            if (!blockposition.equals(this.an)) { // Beast - Remove isClientSide check
                 this.an = new BlockPosition(blockposition);
                 ShapeDetector.ShapeDetectorCollection shapedetector_shapedetectorcollection = Blocks.PORTAL.c(this.world, this.an);
                 double d0 = shapedetector_shapedetectorcollection.getFacing().k() == EnumDirection.EnumAxis.X ? (double) shapedetector_shapedetectorcollection.a().getZ() : (double) shapedetector_shapedetectorcollection.a().getX();
@@ -2208,7 +2208,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
     public void setEquipment(EnumItemSlot enumitemslot, ItemStack itemstack) {}
 
     public boolean isBurning() {
-        boolean flag = false; // Reaper - Remove isClientSide check
+        boolean flag = false; // Beast - Remove isClientSide check
 
         return !this.fireProof && (this.fireTicks > 0 || flag && this.getFlag(0));
     }
@@ -2218,7 +2218,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
     }
 
     public boolean isVehicle() {
-        return !this.isPassengersEmpty(); // Reaper
+        return !this.isPassengersEmpty(); // Beast
     }
 
     public boolean isSneaking() {
@@ -2238,12 +2238,12 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
     }
 
     public boolean aW() {
-        return this.glowing || false && this.getFlag(6); // Reaper - Remove isClientSide check
+        return this.glowing || false && this.getFlag(6); // Beast - Remove isClientSide check
     }
 
     public void g(boolean flag) {
         this.glowing = flag;
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             this.setFlag(6, this.glowing);
         }
 
@@ -2445,7 +2445,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
     }
 
     public String toString() {
-        return String.format("%s[\'%s\'/%d, uuid=\'%s\', l=\'%s\', x=%.2f, y=%.2f, z=%.2f, cx=%d, cd=%d, tl=%d, v=%b, d=%b]", new Object[] { this.getClass().getSimpleName(), this.getName(), Integer.valueOf(this.id), com.eatthepath.uuid.FastUUID.toString(this.uniqueID), this.world == null ? "~NULL~" : this.world.getWorldData().getName(), Double.valueOf(this.locX), Double.valueOf(this.locY), Double.valueOf(this.locZ), getChunkX(), getChunkZ(), this.ticksLived, this.valid, this.dead}); // Paper - add more information // Reaper - Use FastUUID
+        return String.format("%s[\'%s\'/%d, uuid=\'%s\', l=\'%s\', x=%.2f, y=%.2f, z=%.2f, cx=%d, cd=%d, tl=%d, v=%b, d=%b]", new Object[] { this.getClass().getSimpleName(), this.getName(), Integer.valueOf(this.id), com.eatthepath.uuid.FastUUID.toString(this.uniqueID), this.world == null ? "~NULL~" : this.world.getWorldData().getName(), Double.valueOf(this.locX), Double.valueOf(this.locY), Double.valueOf(this.locZ), getChunkX(), getChunkZ(), this.ticksLived, this.valid, this.dead}); // Paper - add more information // Beast - Use FastUUID
     }
 
     public boolean isInvulnerable(DamageSource damagesource) {
@@ -2477,8 +2477,8 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
 
     @Nullable
     public Entity b(int i) {
-        if (!this.dead) { // Reaper - Remove isClientSide check
-            // this.world.methodProfiler.a("changeDimension"); // Reaper - Remove MethodProfiler
+        if (!this.dead) { // Beast - Remove isClientSide check
+            // this.world.methodProfiler.a("changeDimension"); // Beast - Remove MethodProfiler
             MinecraftServer minecraftserver = this.C_();
             // CraftBukkit start - Move logic into new function "teleportTo(Location,boolean)"
             // int j = this.dimension;
@@ -2525,7 +2525,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
 
             // Need to make sure the profiler state is reset afterwards (but we still want to time the call)
             Entity entity = this.teleportTo(exit, true);
-            // this.world.methodProfiler.b(); // Reaper - Remove MethodProfiler
+            // this.world.methodProfiler.b(); // Beast - Remove MethodProfiler
             return entity;
         }
         return null;
@@ -2548,7 +2548,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
 
             this.world.removeEntity(this); // Paper - Fully remove entity, can't have dupes in the UUID map
             this.dead = false;
-            // this.world.methodProfiler.a("reposition"); // Reaper - Remove MethodProfiler
+            // this.world.methodProfiler.a("reposition"); // Beast - Remove MethodProfiler
             /* CraftBukkit start - Handled in calculateTarget
             BlockPosition blockposition;
 
@@ -2584,7 +2584,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
             worldserver1.getMinecraftServer().getPlayerList().repositionEntity(this, exit, portal);
             // worldserver.entityJoinedWorld(this, false); // Handled in repositionEntity
             // CraftBukkit end
-            // this.world.methodProfiler.c("reloading"); // Reaper - Remove MethodProfiler
+            // this.world.methodProfiler.c("reloading"); // Beast - Remove MethodProfiler
             Entity entity = EntityTypes.a(this.getClass(), (World) worldserver1);
 
             if (entity != null) {
@@ -2616,7 +2616,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
             }
 
             this.dead = true;
-            // this.world.methodProfiler.b(); // Reaper - Remove MethodProfiler
+            // this.world.methodProfiler.b(); // Beast - Remove MethodProfiler
             worldserver.m();
             worldserver1.m();
             // this.world.methodProfiler.b(); // CraftBukkit: Moved up to keep balanced
@@ -2700,7 +2700,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
     public void setUUID(UUID uuid) { a(uuid); } // Paper - OBFHELPER
     public void a(UUID uuid) {
         this.uniqueID = uuid;
-        this.ar = com.eatthepath.uuid.FastUUID.toString(this.uniqueID); // Reaper - Use FastUUID
+        this.ar = com.eatthepath.uuid.FastUUID.toString(this.uniqueID); // Beast - Use FastUUID
     }
 
     public UUID getUniqueID() {
@@ -2799,7 +2799,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
                 e = axisalignedbb.e,
                 f = axisalignedbb.f;
         double len = axisalignedbb.d - axisalignedbb.a;
-        // Reaper start - Optimize
+        // Beast start - Optimize
         boolean broken = false;
         if (len < 0) { d = a; broken = true; }
         if (len > 64) { d = a + 64.0; broken = true; }
@@ -2812,7 +2812,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
         if (len < 0) { f = c; broken = true; }
         if (len > 64) { f = c + 64.0; broken = true; }
         this.boundingBox = broken ? new AxisAlignedBB(a, b, c, d, e, f) : axisalignedbb;
-        // Reaper end
+        // Beast end
         // CraftBukkit end
     }
 
@@ -2859,7 +2859,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
     }
 
     public void a(CommandObjectiveExecutor.EnumCommandResult commandobjectiveexecutor_enumcommandresult, int i) {
-        if (this.world != null) { // Reaper - Remove isClientSide check
+        if (this.world != null) { // Beast - Remove isClientSide check
             this.aG.a(this.world.getMinecraftServer(), this, commandobjectiveexecutor_enumcommandresult, i);
         }
 
@@ -2947,10 +2947,10 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
         return null;
     }
 
-    // Reaper start
+    // Beast start
     public boolean isPassengersEmpty() { return this.passengers.isEmpty(); }
     public int getPassengersAmount() { return this.passengers.size(); }
-    // Reaper end
+    // Beast end
     public List<Entity> bF() {
         return (List) (this.passengers.isEmpty() ? Collections.emptyList() : Lists.newArrayList(this.passengers));
     }
@@ -3033,7 +3033,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
     public boolean bI() {
         Entity entity = this.bE();
 
-        return entity instanceof EntityHuman ? ((EntityHuman) entity).cZ() : true; // Reaper - Remove isClientSide check
+        return entity instanceof EntityHuman ? ((EntityHuman) entity).cZ() : true; // Beast - Remove isClientSide check
     }
 
     @Nullable Entity getVehicleDirect() { return this.bJ(); } // Paper - OBFHELPER
diff --git a/src/main/java/net/minecraft/server/EntityAgeable.java b/src/main/java/net/minecraft/server/EntityAgeable.java
index f89bce9dba8a902d5c9a3d08617f5a4ce946744e..1a3e429c2ec24d88f2b675eef40bc8d3797461ae 100644
--- a/src/main/java/net/minecraft/server/EntityAgeable.java
+++ b/src/main/java/net/minecraft/server/EntityAgeable.java
@@ -17,7 +17,7 @@ public abstract class EntityAgeable extends EntityCreature {
     public void inactiveTick()
     {
         super.inactiveTick();
-        if ( this.ageLocked ) // Reaper - Remove isClientSide check
+        if ( this.ageLocked ) // Beast - Remove isClientSide check
         { // CraftBukkit
             this.a( this.isBaby() );
         } else
@@ -48,7 +48,7 @@ public abstract class EntityAgeable extends EntityCreature {
         ItemStack itemstack = entityhuman.b(enumhand);
 
         if (itemstack.getItem() == Items.SPAWN_EGG) {
-            if (true) { // Reaper - Remove isClientSide check
+            if (true) { // Beast - Remove isClientSide check
                 Class oclass = (Class) EntityTypes.b.get(ItemMonsterEgg.h(itemstack));
 
                 if (oclass != null && this.getClass() == oclass) {
@@ -91,7 +91,7 @@ public abstract class EntityAgeable extends EntityCreature {
     }
 
     public int getAge() {
-        return false ? (((Boolean) this.datawatcher.get(EntityAgeable.bx)).booleanValue() ? -1 : 1) : this.a; // Reaper - Remove isClientSide check
+        return false ? (((Boolean) this.datawatcher.get(EntityAgeable.bx)).booleanValue() ? -1 : 1) : this.a; // Beast - Remove isClientSide check
     }
 
     public void setAge(int i, boolean flag) {
@@ -156,13 +156,13 @@ public abstract class EntityAgeable extends EntityCreature {
 
     public void n() {
         super.n();
-        if (ageLocked) { // CraftBukkit // Reaper - Remove isClientSide check
+        if (ageLocked) { // CraftBukkit // Beast - Remove isClientSide check
             if (this.c > 0) {
-                /* // Reaper start - Clientside particles
+                /* // Beast start - Clientside particles
                 if (this.c % 4 == 0) {
                     this.world.addParticle(EnumParticle.VILLAGER_HAPPY, this.locX + (double) (this.random.nextFloat() * this.width * 2.0F) - (double) this.width, this.locY + 0.5D + (double) (this.random.nextFloat() * this.length), this.locZ + (double) (this.random.nextFloat() * this.width * 2.0F) - (double) this.width, 0.0D, 0.0D, 0.0D, new int[0]);
                 }
-                */ // Reaper end
+                */ // Beast end
 
                 --this.c;
             }
diff --git a/src/main/java/net/minecraft/server/EntityAnimal.java b/src/main/java/net/minecraft/server/EntityAnimal.java
index 54697148c6fefbaf94a243d3da72ebc3a2741199..0d91634f2ef9d6712f202090fcadff790e22ae70 100644
--- a/src/main/java/net/minecraft/server/EntityAnimal.java
+++ b/src/main/java/net/minecraft/server/EntityAnimal.java
@@ -31,7 +31,7 @@ public abstract class EntityAnimal extends EntityAgeable implements IAnimal {
 
         if (this.bx > 0) {
             --this.bx;
-            /* // Reaper start - Clientside particles
+            /* // Beast start - Clientside particles
             if (this.bx % 10 == 0) {
                 double d0 = this.random.nextGaussian() * 0.02D;
                 double d1 = this.random.nextGaussian() * 0.02D;
@@ -39,7 +39,7 @@ public abstract class EntityAnimal extends EntityAgeable implements IAnimal {
 
                 this.world.addParticle(EnumParticle.HEART, this.locX + (double) (this.random.nextFloat() * this.width * 2.0F) - (double) this.width, this.locY + 0.5D + (double) (this.random.nextFloat() * this.length), this.locZ + (double) (this.random.nextFloat() * this.width * 2.0F) - (double) this.width, d0, d1, d2, new int[0]);
             }
-            */ // Reaper end
+            */ // Beast end
         }
 
     }
diff --git a/src/main/java/net/minecraft/server/EntityAreaEffectCloud.java b/src/main/java/net/minecraft/server/EntityAreaEffectCloud.java
index e95da9f281d5dfeddb433bdf14fe4002b30998d2..afe96d6d5a89687fbbc082b381b3dcbf3b239672 100644
--- a/src/main/java/net/minecraft/server/EntityAreaEffectCloud.java
+++ b/src/main/java/net/minecraft/server/EntityAreaEffectCloud.java
@@ -70,7 +70,7 @@ public class EntityAreaEffectCloud extends Entity {
 
         this.setSize(f * 2.0F, 0.5F);
         this.setPosition(d0, d1, d2);
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             this.getDataWatcher().set(EntityAreaEffectCloud.a, Float.valueOf(f));
         }
 
@@ -181,7 +181,7 @@ public class EntityAreaEffectCloud extends Entity {
         }
         // Paper end
 
-        if (false) { // Reaper - Remove isClientSide check
+        if (false) { // Beast - Remove isClientSide check
             EnumParticle enumparticle = this.getParticle();
             int[] aint = new int[enumparticle.d()];
 
@@ -462,7 +462,7 @@ public class EntityAreaEffectCloud extends Entity {
             while (iterator.hasNext()) {
                 MobEffect mobeffect = (MobEffect) iterator.next();
 
-                nbttaglist.add(mobeffect.a(new NBTTagCompound(5))); // Reaper - Use initial capacity
+                nbttaglist.add(mobeffect.a(new NBTTagCompound(5))); // Beast - Use initial capacity
             }
 
             nbttagcompound.set("Effects", nbttaglist);
diff --git a/src/main/java/net/minecraft/server/EntityArmorStand.java b/src/main/java/net/minecraft/server/EntityArmorStand.java
index ad9e6f19954805cc8462ec62ad54b6b9f83ec726..8ca07428dbecd8f8c006bdf0cae8eff8e5e7f477 100644
--- a/src/main/java/net/minecraft/server/EntityArmorStand.java
+++ b/src/main/java/net/minecraft/server/EntityArmorStand.java
@@ -91,7 +91,7 @@ public class EntityArmorStand extends EntityLiving {
     }
 
     public boolean cC() {
-        return /*super.cC() &&*/ !this.isNoGravity(); // Reaper - Remove isClientSide check
+        return /*super.cC() &&*/ !this.isNoGravity(); // Beast - Remove isClientSide check
     }
 
     protected void i() {
@@ -182,7 +182,7 @@ public class EntityArmorStand extends EntityLiving {
         for (Iterator iterator = this.bz.iterator(); iterator.hasNext(); nbttaglist.add(nbttagcompound1)) {
             ItemStack itemstack = (ItemStack) iterator.next();
 
-            nbttagcompound1 = new NBTTagCompound(4); // Reaper - Use initial capacity
+            nbttagcompound1 = new NBTTagCompound(4); // Beast - Use initial capacity
             if (!itemstack.isEmpty()) {
                 itemstack.save(nbttagcompound1);
             }
@@ -196,7 +196,7 @@ public class EntityArmorStand extends EntityLiving {
         for (Iterator iterator1 = this.by.iterator(); iterator1.hasNext(); nbttaglist1.add(nbttagcompound2)) {
             ItemStack itemstack1 = (ItemStack) iterator1.next();
 
-            nbttagcompound2 = new NBTTagCompound(4); // Reaper - Use initial capacity
+            nbttagcompound2 = new NBTTagCompound(4); // Beast - Use initial capacity
             if (!itemstack1.isEmpty()) {
                 itemstack1.save(nbttagcompound2);
             }
@@ -328,7 +328,7 @@ public class EntityArmorStand extends EntityLiving {
         ItemStack itemstack = entityhuman.b(enumhand);
 
         if (!this.isMarker() && itemstack.getItem() != Items.NAME_TAG) {
-            if (!entityhuman.isSpectator()) { // Reaper - Remove isClientSide check
+            if (!entityhuman.isSpectator()) { // Beast - Remove isClientSide check
                 EnumItemSlot enumitemslot = EntityInsentient.d(itemstack);
 
                 if (itemstack.isEmpty()) {
@@ -429,7 +429,7 @@ public class EntityArmorStand extends EntityLiving {
             return false;
         }
         // CraftBukkit end
-        if (!this.dead) { // Reaper - Remove isClientSide check
+        if (!this.dead) { // Beast - Remove isClientSide check
             if (DamageSource.OUT_OF_WORLD.equals(damagesource)) {
                 this.killEntity(); // CraftBukkit - this.die() -> this.killEntity()
                 return false;
diff --git a/src/main/java/net/minecraft/server/EntityArrow.java b/src/main/java/net/minecraft/server/EntityArrow.java
index 2c14d45ffa0f72af4fcf96e9668ac4a1b17370f5..c446b23d03f02f099abe3b450b32676877b7db8d 100644
--- a/src/main/java/net/minecraft/server/EntityArrow.java
+++ b/src/main/java/net/minecraft/server/EntityArrow.java
@@ -1,12 +1,13 @@
 package net.minecraft.server;
 
-import com.github.ruviolence.reaper.BeastConfig;
+import com.homomc.beast.BeastConfig;
 import com.google.common.base.Predicate;
 import com.google.common.base.Predicates;
 import java.util.List;
 import javax.annotation.Nullable;
 
 // CraftBukkit start
+import com.homomc.beast.event.entity.EntityArrowStuckEvent;
 import org.bukkit.entity.LivingEntity;
 import org.bukkit.event.entity.EntityCombustByEntityEvent;
 import org.bukkit.event.entity.EntityCombustEvent;
@@ -87,13 +88,13 @@ public abstract class EntityArrow extends Entity implements IProjectile {
         float f7 = MathHelper.cos(f1 * 0.017453292F) * MathHelper.cos(f * 0.017453292F);
 
         this.shoot((double) f5, (double) f6, (double) f7, f3, f4);
-        if (BeastConfig.relativeArrowMotion) { // Reaper start
+        if (BeastConfig.relativeArrowMotion) { // Beast start
         this.motX += entity.motX;
         this.motZ += entity.motZ;
         if (!entity.onGround) {
             this.motY += entity.motY;
         }
-        } // Reaper end
+        } // Beast end
 
     }
 
@@ -206,13 +207,13 @@ public abstract class EntityArrow extends Entity implements IProjectile {
                 this.a(movingobjectposition);
             }
 
-            /* // Reaper start - Clientside particles
+            /* // Beast start - Clientside particles
             if (this.isCritical()) {
                 for (int j = 0; j < 4; ++j) {
                     this.world.addParticle(EnumParticle.CRIT, this.locX + this.motX * (double) j / 4.0D, this.locY + this.motY * (double) j / 4.0D, this.locZ + this.motZ * (double) j / 4.0D, -this.motX, -this.motY + 0.2D, -this.motZ, new int[0]);
                 }
             }
-            */ // Reaper end
+            */ // Beast end
 
             this.locX += this.motX;
             this.locY += this.motY;
@@ -243,13 +244,13 @@ public abstract class EntityArrow extends Entity implements IProjectile {
             float f3 = 0.05F;
 
             if (this.isInWater()) {
-                /* // Reaper start - Clientside particles
+                /* // Beast start - Clientside particles
                 for (int k = 0; k < 4; ++k) {
                     float f4 = 0.25F;
 
                     this.world.addParticle(EnumParticle.WATER_BUBBLE, this.locX - this.motX * 0.25D, this.locY - this.motY * 0.25D, this.locZ - this.motZ * 0.25D, this.motX, this.motY, this.motZ, new int[0]);
                 }
-                */ // Reaper end
+                */ // Beast end
 
                 f2 = 0.6F;
             }
@@ -303,8 +304,8 @@ public abstract class EntityArrow extends Entity implements IProjectile {
                 if (entity instanceof EntityLiving) {
                     EntityLiving entityliving = (EntityLiving) entity;
 
-                    if (true) { // Reaper - Remove isClientSide check
-                        if (new com.github.ruviolence.reaper.event.entity.EntityArrowStuckEvent(entityliving.getBukkitEntity()).callEvent()) // Reaper - Add EntityArrowStuckEvent
+                    if (true) { // Beast - Remove isClientSide check
+                        if (new EntityArrowStuckEvent(entityliving.getBukkitEntity()).callEvent()) // Beast - Add EntityArrowStuckEvent
                         entityliving.setArrowCount(entityliving.getArrowCount() + 1);
                     }
 
@@ -338,7 +339,7 @@ public abstract class EntityArrow extends Entity implements IProjectile {
                 this.yaw += 180.0F;
                 this.lastYaw += 180.0F;
                 this.ay = 0;
-                if (this.motX * this.motX + this.motY * this.motY + this.motZ * this.motZ < 0.0010000000474974513D) { // Reaper - Remove isClientSide check
+                if (this.motX * this.motX + this.motY * this.motY + this.motZ * this.motZ < 0.0010000000474974513D) { // Beast - Remove isClientSide check
                     if (this.fromPlayer == EntityArrow.PickupStatus.ALLOWED) {
                         this.a(this.j(), 0.1F);
                     }
@@ -364,7 +365,7 @@ public abstract class EntityArrow extends Entity implements IProjectile {
             this.locX -= this.motX / (double) f2 * 0.05000000074505806D;
             this.locY -= this.motY / (double) f2 * 0.05000000074505806D;
             this.locZ -= this.motZ / (double) f2 * 0.05000000074505806D;
-            resetBlockPos(); // Reaper - Cache current block pos
+            resetBlockPos(); // Beast - Cache current block pos
             this.a(SoundEffects.u, 1.0F, 1.2F / (this.random.nextFloat() * 0.2F + 0.9F));
             this.inGround = true;
             this.shake = 7;
@@ -428,7 +429,7 @@ public abstract class EntityArrow extends Entity implements IProjectile {
         nbttagcompound.setShort("life", (short) this.ax);
         MinecraftKey minecraftkey = (MinecraftKey) Block.REGISTRY.b(this.av);
 
-        nbttagcompound.setString("inTile", /*minecraftkey == null*/false ? "" : minecraftkey.toString()); // Reaper - Optimize
+        nbttagcompound.setString("inTile", /*minecraftkey == null*/false ? "" : minecraftkey.toString()); // Beast - Optimize
         nbttagcompound.setByte("inData", (byte) this.aw);
         nbttagcompound.setByte("shake", (byte) this.shake);
         nbttagcompound.setByte("inGround", (byte) (this.inGround ? 1 : 0));
@@ -465,7 +466,7 @@ public abstract class EntityArrow extends Entity implements IProjectile {
     }
 
     public void d(EntityHuman entityhuman) {
-        if (this.inGround && this.shake <= 0) { // Reaper - Remove isClientSide check
+        if (this.inGround && this.shake <= 0) { // Beast - Remove isClientSide check
             // CraftBukkit start
             ItemStack itemstack = this.j(); // PAIL: rename
             EntityItem item = new EntityItem(this.world, this.locX, this.locY, this.locZ, itemstack);
@@ -565,16 +566,16 @@ public abstract class EntityArrow extends Entity implements IProjectile {
     public static enum PickupStatus {
 
         DISALLOWED, ALLOWED, CREATIVE_ONLY;
-        public static final EntityArrow.PickupStatus[] VALUES = values(); // Reaper - Single values array
+        public static final EntityArrow.PickupStatus[] VALUES = values(); // Beast - Single values array
 
         private PickupStatus() {}
 
         public static EntityArrow.PickupStatus a(int i) {
-            if (i < 0 || i > VALUES.length) { // Reaper - Single values array
+            if (i < 0 || i > VALUES.length) { // Beast - Single values array
                 i = 0;
             }
 
-            return VALUES[i]; // Reaper - Single values array
+            return VALUES[i]; // Beast - Single values array
         }
     }
 }
diff --git a/src/main/java/net/minecraft/server/EntityBat.java b/src/main/java/net/minecraft/server/EntityBat.java
index 318433dc08cc71115736aae60e90d9e61e4761a3..a8e6422c6a81af7cdb3fb1b3407fd09a9995b083 100644
--- a/src/main/java/net/minecraft/server/EntityBat.java
+++ b/src/main/java/net/minecraft/server/EntityBat.java
@@ -1,6 +1,6 @@
 package net.minecraft.server;
 
-import com.github.ruviolence.reaper.BeastConfig;
+import com.homomc.beast.BeastConfig;
 
 import java.util.Calendar;
 import javax.annotation.Nullable;
@@ -85,7 +85,7 @@ public class EntityBat extends EntityAmbient {
 
     protected void M() {
         super.M();
-        BlockPosition blockposition = this.blockPos; // Reaper - Cache current block pos
+        BlockPosition blockposition = this.blockPos; // Beast - Cache current block pos
         BlockPosition blockposition1 = blockposition.up();
 
         if (this.isAsleep()) {
@@ -146,7 +146,7 @@ public class EntityBat extends EntityAmbient {
         if (this.isInvulnerable(damagesource)) {
             return false;
         } else {
-            if (this.isAsleep()) { // Reaper - Remove isClientSide check
+            if (this.isAsleep()) { // Beast - Remove isClientSide check
                 this.setAsleep(false);
             }
 
@@ -177,7 +177,7 @@ public class EntityBat extends EntityAmbient {
             int i = this.world.getLightLevel(blockposition);
             byte b0 = 4;
 
-            if (BeastConfig.halloweenMobFeature && this.a(this.world.ae())) { // Reaper
+            if (BeastConfig.halloweenMobFeature && this.a(this.world.ae())) { // Beast
                 b0 = 7;
             } else if (this.random.nextBoolean()) {
                 return false;
diff --git a/src/main/java/net/minecraft/server/EntityBoat.java b/src/main/java/net/minecraft/server/EntityBoat.java
index ed124c113e830301fcf2e6c4f3ef731668703cd2..d7fe47b42477a71ac8b8095f7f34933b3102e2f0 100644
--- a/src/main/java/net/minecraft/server/EntityBoat.java
+++ b/src/main/java/net/minecraft/server/EntityBoat.java
@@ -26,7 +26,7 @@ public class EntityBoat extends Entity {
     private float h;
     private float at;
     private int au;
-    /* // Reaper start - Optimize unused
+    /* // Beast start - Optimize unused
     private double av;
     private double aw;
     private double ax;
@@ -36,7 +36,7 @@ public class EntityBoat extends Entity {
     private boolean aB;
     private boolean aC;
     private boolean aD;
-    */ // Reaper end
+    */ // Beast end
     private double aE;
     private float aF;
     private EntityBoat.EnumStatus aG;
@@ -110,7 +110,7 @@ public class EntityBoat extends Entity {
     public boolean damageEntity(DamageSource damagesource, float f) {
         if (this.isInvulnerable(damagesource)) {
             return false;
-        } else if (!this.dead) { // Reaper - Remove isClientSide check
+        } else if (!this.dead) { // Beast - Remove isClientSide check
             if (damagesource instanceof EntityDamageSourceIndirect && damagesource.getEntity() != null && this.w(damagesource.getEntity())) {
                 return false;
             } else {
@@ -225,7 +225,7 @@ public class EntityBoat extends Entity {
             ++this.h;
         }
 
-        if (this.h >= 60.0F) { // Reaper - Remove isClientSide check
+        if (this.h >= 60.0F) { // Beast - Remove isClientSide check
             this.ejectPassengers();
         }
 
@@ -242,12 +242,12 @@ public class EntityBoat extends Entity {
         super.B_();
         this.t();
         if (this.bI()) {
-            if (this.isPassengersEmpty() || !(this.bF().get(0) instanceof EntityHuman)) { // Reaper
+            if (this.isPassengersEmpty() || !(this.bF().get(0) instanceof EntityHuman)) { // Beast
                 this.a(false, false);
             }
 
             this.x();
-            if (false) { // Reaper - Remove isClientSide check
+            if (false) { // Beast - Remove isClientSide check
                 this.y();
                 this.world.a((Packet) (new PacketPlayInBoatMove(this.a(0), this.a(1))));
             }
@@ -299,13 +299,13 @@ public class EntityBoat extends Entity {
         List list = this.world.getEntities(this, this.getBoundingBox().grow(0.20000000298023224D, -0.009999999776482582D, 0.20000000298023224D), IEntitySelector.a(this));
 
         if (!list.isEmpty()) {
-            boolean flag = !(this.bE() instanceof EntityHuman); // Reaper - Remove isClientSide check
+            boolean flag = !(this.bE() instanceof EntityHuman); // Beast - Remove isClientSide check
 
             for (int j = 0; j < list.size(); ++j) {
                 Entity entity = (Entity) list.get(j);
 
                 if (!entity.w(this)) {
-                    if (flag && this.getPassengersAmount() < 2 && !entity.isPassenger() && entity.width < this.width && entity instanceof EntityLiving && !(entity instanceof EntityWaterAnimal) && !(entity instanceof EntityHuman)) { // Reaper
+                    if (flag && this.getPassengersAmount() < 2 && !entity.isPassenger() && entity.width < this.width && entity instanceof EntityLiving && !(entity instanceof EntityWaterAnimal) && !(entity instanceof EntityHuman)) { // Beast
                         entity.startRiding(this);
                     } else {
                         this.collide(entity);
@@ -335,7 +335,7 @@ public class EntityBoat extends Entity {
 
     private void t() {
         if (this.au > 0 && !this.bI()) {
-            // Reaper start - Optimize unused
+            // Beast start - Optimize unused
             double d0 = this.locX + (this.locX) / (double) this.au;
             double d1 = this.locY + (this.locY) / (double) this.au;
             double d2 = this.locZ + (this.locZ) / (double) this.au;
@@ -343,7 +343,7 @@ public class EntityBoat extends Entity {
 
             this.yaw = (float) ((double) this.yaw + d3 / (double) this.au);
             this.pitch = (float) ((double) this.pitch + ((double) this.pitch) / (double) this.au);
-            // Reaper end
+            // Beast end
             --this.au;
             this.setPosition(d0, d1, d2);
             this.setYawPitch(this.yaw, this.pitch);
@@ -351,10 +351,10 @@ public class EntityBoat extends Entity {
     }
 
     public void a(boolean flag, boolean flag1) {
-        /* // Reaper start - Optimize unused
+        /* // Beast start - Optimize unused
         this.datawatcher.set(EntityBoat.e[0], Boolean.valueOf(flag));
         this.datawatcher.set(EntityBoat.e[1], Boolean.valueOf(flag1));
-        */ // Reaper end
+        */ // Beast end
     }
 
     private EntityBoat.EnumStatus u() {
@@ -554,7 +554,7 @@ public class EntityBoat extends Entity {
             this.aI = 0.0D;
             this.aG = EntityBoat.EnumStatus.IN_WATER;
         } else {
-            // Reaper start - Replace 'if' with 'switch'
+            // Beast start - Replace 'if' with 'switch'
             switch (this.aG) {
             case IN_WATER:
                 d2 = (this.aE - this.getBoundingBox().b) / (double) this.length;
@@ -578,7 +578,7 @@ public class EntityBoat extends Entity {
                 }
                 break;
             }
-            // Reaper end
+            // Beast end
 
             this.motX *= (double) this.g;
             this.motZ *= (double) this.g;
@@ -600,7 +600,7 @@ public class EntityBoat extends Entity {
         if (this.isVehicle()) {
             float f = 0.0F;
 
-            // Reaper start - Optimize unused
+            // Beast start - Optimize unused
             /*
             if (this.aA) {
                 this.at += -1.0F;
@@ -629,7 +629,7 @@ public class EntityBoat extends Entity {
             this.motX += (double) (MathHelper.sin(-this.yaw * 0.017453292F) * f);
             this.motZ += (double) (MathHelper.cos(this.yaw * 0.017453292F) * f);
             this.a(false, false);
-            // Reaper end
+            // Beast end
         }
     }
 
@@ -638,7 +638,7 @@ public class EntityBoat extends Entity {
             float f = 0.0F;
             float f1 = (float) ((this.dead ? 0.009999999776482582D : this.aG()) + entity.aF());
 
-            if (this.getPassengersAmount() > 1) { // Reaper
+            if (this.getPassengersAmount() > 1) { // Beast
                 int i = this.bF().indexOf(entity);
 
                 if (i == 0) {
@@ -658,7 +658,7 @@ public class EntityBoat extends Entity {
             entity.yaw += this.at;
             entity.setHeadRotation(entity.getHeadRotation() + this.at);
             this.a(entity);
-            if (entity instanceof EntityAnimal && this.getPassengersAmount() > 1) { // Reaper
+            if (entity instanceof EntityAnimal && this.getPassengersAmount() > 1) { // Beast
                 int j = entity.getId() % 2 == 0 ? 90 : 270;
 
                 entity.h(((EntityAnimal) entity).aN + (float) j);
@@ -693,7 +693,7 @@ public class EntityBoat extends Entity {
         if (entityhuman.isSneaking()) {
             return false;
         } else {
-            if (this.h < 60.0F) { // Reaper - Remove isClientSide check
+            if (this.h < 60.0F) { // Beast - Remove isClientSide check
                 entityhuman.startRiding(this);
             }
 
@@ -712,7 +712,7 @@ public class EntityBoat extends Entity {
                     }
 
                     this.e(this.fallDistance, 1.0F);
-                    if (!this.dead) { // Reaper - Remove isClientSide check
+                    if (!this.dead) { // Beast - Remove isClientSide check
                     // CraftBukkit start
                     Vehicle vehicle = (Vehicle) this.getBukkitEntity();
                     VehicleDestroyEvent destroyEvent = new VehicleDestroyEvent(vehicle, null);
@@ -735,7 +735,7 @@ public class EntityBoat extends Entity {
                 }
 
                 this.fallDistance = 0.0F;
-            } else if (this.world.getType((this.blockPos).down()).getMaterial() != Material.WATER && d0 < 0.0D) { // Reaper - Cache current block pos
+            } else if (this.world.getType((this.blockPos).down()).getMaterial() != Material.WATER && d0 < 0.0D) { // Beast - Cache current block pos
                 this.fallDistance = (float) ((double) this.fallDistance - d0);
             }
 
@@ -779,22 +779,22 @@ public class EntityBoat extends Entity {
     }
 
     protected boolean q(Entity entity) {
-        return this.getPassengersAmount() < 2; // Reaper
+        return this.getPassengersAmount() < 2; // Beast
     }
 
     @Nullable
     public Entity bE() {
-        if (isPassengersEmpty()) return null; // Reaper
+        if (isPassengersEmpty()) return null; // Beast
         List list = this.bF();
 
-        return (Entity) list.get(0); // Reaper
+        return (Entity) list.get(0); // Beast
     }
 
     public static enum EnumBoatType {
 
         OAK(BlockWood.EnumLogVariant.OAK.a(), "oak"), SPRUCE(BlockWood.EnumLogVariant.SPRUCE.a(), "spruce"), BIRCH(BlockWood.EnumLogVariant.BIRCH.a(), "birch"), JUNGLE(BlockWood.EnumLogVariant.JUNGLE.a(), "jungle"), ACACIA(BlockWood.EnumLogVariant.ACACIA.a(), "acacia"), DARK_OAK(BlockWood.EnumLogVariant.DARK_OAK.a(), "dark_oak");
 
-        public static final EntityBoat.EnumBoatType[] VALUES = values(); // Reaper - Single values array
+        public static final EntityBoat.EnumBoatType[] VALUES = values(); // Beast - Single values array
         private final String g;
         private final int h;
 
@@ -816,15 +816,15 @@ public class EntityBoat extends Entity {
         }
 
         public static EntityBoat.EnumBoatType a(int i) {
-            if (i < 0 || i >= VALUES.length) { // Reaper - Single values array
+            if (i < 0 || i >= VALUES.length) { // Beast - Single values array
                 i = 0;
             }
 
-            return VALUES[i]; // Reaper - Single values array
+            return VALUES[i]; // Beast - Single values array
         }
 
         public static EntityBoat.EnumBoatType a(String s) {
-            // Reaper start - Single values array
+            // Beast start - Single values array
             for (int i = 0; i < VALUES.length; ++i) {
                 if (VALUES[i].a().equals(s)) {
                     return VALUES[i];
@@ -832,7 +832,7 @@ public class EntityBoat extends Entity {
             }
 
             return VALUES[0];
-            // Reaper end
+            // Beast end
         }
     }
 
diff --git a/src/main/java/net/minecraft/server/EntityChicken.java b/src/main/java/net/minecraft/server/EntityChicken.java
index 1acd7d42cc8325b563efb5a9391b881706ebd21d..5980fc2dbfd2f9ea6a28963345657469745b7b20 100644
--- a/src/main/java/net/minecraft/server/EntityChicken.java
+++ b/src/main/java/net/minecraft/server/EntityChicken.java
@@ -64,7 +64,7 @@ public class EntityChicken extends EntityAnimal {
         }
 
         this.bx += this.bC * 2.0F;
-        if (!this.isBaby() && !this.isChickenJockey() && --this.bD <= 0) { // Reaper - Remove isClientSide check
+        if (!this.isBaby() && !this.isChickenJockey() && --this.bD <= 0) { // Beast - Remove isClientSide check
             this.a(SoundEffects.af, 1.0F, (this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F);
             this.forceDrops = true; // CraftBukkit
             this.a(Items.EGG, 1);
diff --git a/src/main/java/net/minecraft/server/EntityCreature.java b/src/main/java/net/minecraft/server/EntityCreature.java
index 702cece6e3745e1daca1fc233b478ab81a665753..8e56774af03af4bca66001473075da72956bc3c5 100644
--- a/src/main/java/net/minecraft/server/EntityCreature.java
+++ b/src/main/java/net/minecraft/server/EntityCreature.java
@@ -8,7 +8,7 @@ import org.bukkit.event.entity.EntityUnleashEvent;
 
 public abstract class EntityCreature extends EntityInsentient {
 
-    public static final UUID bv = com.eatthepath.uuid.FastUUID.parseUUID("E199AD21-BA8A-4C53-8D13-6182D5C69D3A"); // Reaper - Use FastUUID
+    public static final UUID bv = com.eatthepath.uuid.FastUUID.parseUUID("E199AD21-BA8A-4C53-8D13-6182D5C69D3A"); // Beast - Use FastUUID
     public static final AttributeModifier bw = (new AttributeModifier(EntityCreature.bv, "Fleeing speed bonus", 2.0D, 2)).a(false);
     public BlockPosition movingTarget = null; public BlockPosition getMovingTarget() { return movingTarget; } // Paper
     private BlockPosition a;
@@ -35,7 +35,7 @@ public abstract class EntityCreature extends EntityInsentient {
     }
 
     public boolean df() {
-        return this.f(this.blockPos); // Reaper - Cache current block pos
+        return this.f(this.blockPos); // Beast - Cache current block pos
     }
 
     public boolean f(BlockPosition blockposition) {
diff --git a/src/main/java/net/minecraft/server/EntityCreeper.java b/src/main/java/net/minecraft/server/EntityCreeper.java
index 3fa88d7d3d3e2927e98a86339a03a2ee99f6750a..ae3fc2dda434e8ac4d43e29f084eee3409b7c1ab 100644
--- a/src/main/java/net/minecraft/server/EntityCreeper.java
+++ b/src/main/java/net/minecraft/server/EntityCreeper.java
@@ -188,7 +188,7 @@ public class EntityCreeper extends EntityMonster {
         if (itemstack.getItem() == Items.FLINT_AND_STEEL) {
             this.world.a(entityhuman, this.locX, this.locY, this.locZ, SoundEffects.bO, this.bK(), 1.0F, this.random.nextFloat() * 0.4F + 0.8F);
             entityhuman.a(enumhand);
-            if (true) { // Reaper - Remove isClientSide check
+            if (true) { // Beast - Remove isClientSide check
                 this.do_();
                 itemstack.damage(1, entityhuman);
                 return true;
@@ -199,7 +199,7 @@ public class EntityCreeper extends EntityMonster {
     }
 
     private void dr() {
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             boolean flag = this.world.getGameRules().getBoolean("mobGriefing");
             float f = this.isPowered() ? 2.0F : 1.0F;
 
diff --git a/src/main/java/net/minecraft/server/EntityEgg.java b/src/main/java/net/minecraft/server/EntityEgg.java
index 3fd73f595aa6ea5bff373b7685dbdbd5c5029c6f..f2f3f9bdca926544745b58bd9fdaa54c06b3f5ab 100644
--- a/src/main/java/net/minecraft/server/EntityEgg.java
+++ b/src/main/java/net/minecraft/server/EntityEgg.java
@@ -30,7 +30,7 @@ public class EntityEgg extends EntityProjectile {
             movingobjectposition.entity.damageEntity(DamageSource.projectile(this, this.getShooter()), 0.0F);
         }
 
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             boolean hatching = this.random.nextInt(8) == 0; // CraftBukkit
             if (true) {
                 byte b0 = 1;
diff --git a/src/main/java/net/minecraft/server/EntityEnderCrystal.java b/src/main/java/net/minecraft/server/EntityEnderCrystal.java
index 98df73cd2249de533aa6642fd952d4973fcc6f99..7ff0e90f27ebcb32778edaa579a408b7d4a5b8a2 100644
--- a/src/main/java/net/minecraft/server/EntityEnderCrystal.java
+++ b/src/main/java/net/minecraft/server/EntityEnderCrystal.java
@@ -40,8 +40,8 @@ public class EntityEnderCrystal extends Entity {
         this.lastY = this.locY;
         this.lastZ = this.locZ;
         ++this.a;
-        if (true) { // Reaper - Remove isClientSide check
-            BlockPosition blockposition = this.blockPos; // Reaper - Cache current block pos
+        if (true) { // Beast - Remove isClientSide check
+            BlockPosition blockposition = this.blockPos; // Beast - Cache current block pos
 
             if (this.world.worldProvider instanceof WorldProviderTheEnd && this.world.getType(blockposition).getBlock() != Blocks.FIRE) {
                 // CraftBukkit start
@@ -83,14 +83,14 @@ public class EntityEnderCrystal extends Entity {
         } else if (damagesource.getEntity() instanceof EntityEnderDragon) {
             return false;
         } else {
-            if (!this.dead) { // Reaper - Remove isClientSide check
+            if (!this.dead) { // Beast - Remove isClientSide check
                 // CraftBukkit start - All non-living entities need this
                 if (CraftEventFactory.handleNonLivingEntityDamageEvent(this, damagesource, f)) {
                     return false;
                 }
                 // CraftBukkit end
                 this.die();
-                if (true) { // Reaper - Remove isClientSide check
+                if (true) { // Beast - Remove isClientSide check
                     if (!damagesource.isExplosion()) {
                         // CraftBukkit start
                         ExplosionPrimeEvent event = new ExplosionPrimeEvent(this.getBukkitEntity(), 6.0F, true);
diff --git a/src/main/java/net/minecraft/server/EntityEnderDragon.java b/src/main/java/net/minecraft/server/EntityEnderDragon.java
index f782463cc6bc20e58da1ac88a42809c78a891ae5..3d93acf54637cc83c59ddf1149c36958f2e28d04 100644
--- a/src/main/java/net/minecraft/server/EntityEnderDragon.java
+++ b/src/main/java/net/minecraft/server/EntityEnderDragon.java
@@ -33,7 +33,7 @@ public class EntityEnderDragon extends EntityInsentient implements IComplex, IMo
     public EntityEnderCrystal currentEnderCrystal;
     private final EnderDragonBattle bK;
     private final DragonControllerManager bL;
-    // private int bM = 200; // Reaper - Clientside code
+    // private int bM = 200; // Beast - Clientside code
     private int bN;
     private final PathPoint[] bO = new PathPoint[24];
     private final int[] bP = new int[24];
@@ -47,9 +47,9 @@ public class EntityEnderDragon extends EntityInsentient implements IComplex, IMo
         this.setSize(16.0F, 8.0F);
         this.noclip = true;
         this.fireProof = true;
-        // this.bM = 100; // Reaper - Clientside code
+        // this.bM = 100; // Beast - Clientside code
         this.ah = true;
-        if (world.worldProvider instanceof WorldProviderTheEnd) { // Reaper - Remove isClientSide check
+        if (world.worldProvider instanceof WorldProviderTheEnd) { // Beast - Remove isClientSide check
             this.bK = ((WorldProviderTheEnd) world.worldProvider).t();
         } else {
             this.bK = null;
@@ -92,7 +92,7 @@ public class EntityEnderDragon extends EntityInsentient implements IComplex, IMo
         float f;
         float f1;
 
-        /* // Reaper start - Clientside code
+        /* // Beast start - Clientside code
         if (this.world.isClientSide) {
             this.setHealth(this.getHealth());
             if (!this.isSilent()) {
@@ -108,18 +108,18 @@ public class EntityEnderDragon extends EntityInsentient implements IComplex, IMo
                 }
             }
         }
-        */ // Reaper end
+        */ // Beast end
 
         this.bE = this.bF;
         float f2;
 
         if (this.getHealth() <= 0.0F) {
-            /* // Reaper start - Clientside particles
+            /* // Beast start - Clientside particles
             f = (this.random.nextFloat() - 0.5F) * 8.0F;
             f1 = (this.random.nextFloat() - 0.5F) * 4.0F;
             f2 = (this.random.nextFloat() - 0.5F) * 8.0F;
             this.world.addParticle(EnumParticle.EXPLOSION_LARGE, this.locX + (double) f, this.locY + 2.0D + (double) f1, this.locZ + (double) f2, 0.0D, 0.0D, 0.0D, new int[0]);
-            */ // Reaper end
+            */ // Beast end
         } else {
             this.dg();
             f = 0.2F / (MathHelper.sqrt(this.motX * this.motX + this.motZ * this.motZ) * 10.0F + 1.0F);
@@ -155,7 +155,7 @@ public class EntityEnderDragon extends EntityInsentient implements IComplex, IMo
                 float f3;
                 float f4;
 
-                if (false) { // Reaper - Remove isClientSide check
+                if (false) { // Beast - Remove isClientSide check
                     if (this.bi > 0) {
                         double d3 = this.locX + (this.bj - this.locX) / (double) this.bi;
 
@@ -255,7 +255,7 @@ public class EntityEnderDragon extends EntityInsentient implements IComplex, IMo
                 this.bC.setPositionRotation(this.locX + (double) (f12 * 4.5F), this.locY + 2.0D, this.locZ + (double) (f11 * 4.5F), 0.0F, 0.0F);
                 this.bD.B_();
                 this.bD.setPositionRotation(this.locX - (double) (f12 * 4.5F), this.locY + 2.0D, this.locZ - (double) (f11 * 4.5F), 0.0F, 0.0F);
-                if (this.hurtTicks == 0) { // Reaper - Remove isClientSide check
+                if (this.hurtTicks == 0) { // Beast - Remove isClientSide check
                     this.a(this.world.getEntities(this, this.bC.getBoundingBox().grow(4.0D, 2.0D, 4.0D).d(0.0D, -2.0D, 0.0D)));
                     this.a(this.world.getEntities(this, this.bD.getBoundingBox().grow(4.0D, 2.0D, 4.0D).d(0.0D, -2.0D, 0.0D)));
                     this.b(this.world.getEntities(this, this.bw.getBoundingBox().g(1.0D)));
@@ -300,7 +300,7 @@ public class EntityEnderDragon extends EntityInsentient implements IComplex, IMo
                     entitycomplexpart.setPositionRotation(this.locX - (double) ((f11 * 1.5F + f16 * f4) * f8), this.locY + (adouble1[1] - adouble[1]) - (double) ((f4 + 1.5F) * f9) + 1.5D, this.locZ + (double) ((f12 * 1.5F + f17 * f4) * f8), 0.0F, 0.0F);
                 }
 
-                if (true) { // Reaper - Remove isClientSide check
+                if (true) { // Beast - Remove isClientSide check
                     this.bG = this.b(this.bw.getBoundingBox()) | this.b(this.bx.getBoundingBox()) | this.b(this.by.getBoundingBox());
                     if (this.bK != null) {
                         this.bK.b(this);
@@ -485,7 +485,7 @@ public class EntityEnderDragon extends EntityInsentient implements IComplex, IMo
         }
         // CraftBukkit end
 
-        /* // Reaper start - Clientside particles
+        /* // Beast start - Clientside particles
         if (flag1) {
             double d0 = axisalignedbb.a + (axisalignedbb.d - axisalignedbb.a) * (double) this.random.nextFloat();
             double d1 = axisalignedbb.b + (axisalignedbb.e - axisalignedbb.b) * (double) this.random.nextFloat();
@@ -493,7 +493,7 @@ public class EntityEnderDragon extends EntityInsentient implements IComplex, IMo
 
             this.world.addParticle(EnumParticle.EXPLOSION_LARGE, d0, d1, d2, 0.0D, 0.0D, 0.0D, new int[0]);
         }
-        */ // Reaper end
+        */ // Beast end
 
         return flag;
     }
@@ -556,7 +556,7 @@ public class EntityEnderDragon extends EntityInsentient implements IComplex, IMo
         }
 
         ++this.bH;
-        /* // Reaper start - Clientside particles
+        /* // Beast start - Clientside particles
         if (this.bH >= 180 && this.bH <= 200) {
             float f = (this.random.nextFloat() - 0.5F) * 8.0F;
             float f1 = (this.random.nextFloat() - 0.5F) * 4.0F;
@@ -564,7 +564,7 @@ public class EntityEnderDragon extends EntityInsentient implements IComplex, IMo
 
             this.world.addParticle(EnumParticle.EXPLOSION_HUGE, this.locX + (double) f, this.locY + 2.0D + (double) f1, this.locZ + (double) f2, 0.0D, 0.0D, 0.0D, new int[0]);
         }
-        */ // Reaper end
+        */ // Beast end
 
         boolean flag = this.world.getGameRules().getBoolean("doMobLoot");
         short short0 = 500;
@@ -573,7 +573,7 @@ public class EntityEnderDragon extends EntityInsentient implements IComplex, IMo
             short0 = 12000;
         }
 
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             if (this.bH > 150 && this.bH % 5 == 0 && flag) {
                 this.a(MathHelper.d((float) short0 * 0.08F));
             }
@@ -607,7 +607,7 @@ public class EntityEnderDragon extends EntityInsentient implements IComplex, IMo
         this.move(EnumMoveType.SELF, 0.0D, 0.10000000149011612D, 0.0D);
         this.yaw += 20.0F;
         this.aN = this.yaw;
-        if (this.bH == 200) { // Reaper - Remove isClientSide check
+        if (this.bH == 200) { // Beast - Remove isClientSide check
             if (flag) {
                 this.a(MathHelper.d((float) short0 * 0.2F));
             }
@@ -943,7 +943,7 @@ public class EntityEnderDragon extends EntityInsentient implements IComplex, IMo
     }
 
     public void a(DataWatcherObject<?> datawatcherobject) {
-        if (false) { // Reaper - Remove isClientSide check
+        if (false) { // Beast - Remove isClientSide check
             this.bL.setControllerPhase(DragonControllerPhase.getById(((Integer) this.getDataWatcher().get(EntityEnderDragon.PHASE)).intValue()));
         }
 
diff --git a/src/main/java/net/minecraft/server/EntityEnderPearl.java b/src/main/java/net/minecraft/server/EntityEnderPearl.java
index 9dc8a8af10e117c4806f95b529c2c500350d683e..8da82db57282060ea91ab040b1a908fa983e66c1 100644
--- a/src/main/java/net/minecraft/server/EntityEnderPearl.java
+++ b/src/main/java/net/minecraft/server/EntityEnderPearl.java
@@ -58,13 +58,13 @@ public class EntityEnderPearl extends EntityProjectile {
             }
         }
 
-        /* // Reaper start - Clientside particles
+        /* // Beast start - Clientside particles
         for (int i = 0; i < 32; ++i) {
             this.world.addParticle(EnumParticle.PORTAL, this.locX, this.locY + this.random.nextDouble() * 2.0D, this.locZ, this.random.nextGaussian(), 0.0D, this.random.nextGaussian(), new int[0]);
         }
-        */ // Reaper end
+        */ // Beast end
 
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             if (entityliving instanceof EntityPlayer) {
                 EntityPlayer entityplayer = (EntityPlayer) entityliving;
 
@@ -112,7 +112,7 @@ public class EntityEnderPearl extends EntityProjectile {
     public void B_() {
         EntityLiving entityliving = this.getShooter();
 
-        if (entityliving instanceof EntityHuman && !entityliving.isAlive()) { // Reaper - Optimize
+        if (entityliving instanceof EntityHuman && !entityliving.isAlive()) { // Beast - Optimize
             this.die();
         } else {
             super.B_();
diff --git a/src/main/java/net/minecraft/server/EntityEnderSignal.java b/src/main/java/net/minecraft/server/EntityEnderSignal.java
index 16017460bfd437c1db06fa754e090641b41d9aed..f32bbba13e8bd8a8b36d3df4b151cd7f6136a5a5 100644
--- a/src/main/java/net/minecraft/server/EntityEnderSignal.java
+++ b/src/main/java/net/minecraft/server/EntityEnderSignal.java
@@ -74,7 +74,7 @@ public class EntityEnderSignal extends Entity {
 
         this.pitch = this.lastPitch + (this.pitch - this.lastPitch) * 0.2F;
         this.yaw = this.lastYaw + (this.yaw - this.lastYaw) * 0.2F;
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             double d0 = this.a - this.locX;
             double d1 = this.c - this.locZ;
             float f1 = (float) Math.sqrt(d0 * d0 + d1 * d1);
@@ -97,7 +97,7 @@ public class EntityEnderSignal extends Entity {
 
         float f3 = 0.25F;
 
-        /* // Reaper start - Clientside particles
+        /* // Beast start - Clientside particles
         if (this.isInWater()) {
             for (int i = 0; i < 4; ++i) {
                 this.world.addParticle(EnumParticle.WATER_BUBBLE, this.locX - this.motX * 0.25D, this.locY - this.motY * 0.25D, this.locZ - this.motZ * 0.25D, this.motX, this.motY, this.motZ, new int[0]);
@@ -105,18 +105,18 @@ public class EntityEnderSignal extends Entity {
         } else {
             this.world.addParticle(EnumParticle.PORTAL, this.locX - this.motX * 0.25D + this.random.nextDouble() * 0.6D - 0.3D, this.locY - this.motY * 0.25D - 0.5D, this.locZ - this.motZ * 0.25D + this.random.nextDouble() * 0.6D - 0.3D, this.motX, this.motY, this.motZ, new int[0]);
         }
-        */ // Reaper end
+        */ // Beast end
 
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             this.setPosition(this.locX, this.locY, this.locZ);
             ++this.d;
-            if (this.d > 80) { // Reaper - Remove isClientSide check
+            if (this.d > 80) { // Beast - Remove isClientSide check
                 this.a(SoundEffects.bb, 1.0F, 1.0F);
                 this.die();
                 if (this.e) {
                     this.world.addEntity(new EntityItem(this.world, this.locX, this.locY, this.locZ, new ItemStack(Items.ENDER_EYE)));
                 } else {
-                    this.world.triggerEffect(2003, this.blockPos, 0); // Reaper - Cache current block pos
+                    this.world.triggerEffect(2003, this.blockPos, 0); // Beast - Cache current block pos
                 }
             }
         }
diff --git a/src/main/java/net/minecraft/server/EntityEnderman.java b/src/main/java/net/minecraft/server/EntityEnderman.java
index 043096096d46aa05c3ad056b3d4b324163e00863..41abb674a85d231bcb4881dd4dc2b44142a1ba4a 100644
--- a/src/main/java/net/minecraft/server/EntityEnderman.java
+++ b/src/main/java/net/minecraft/server/EntityEnderman.java
@@ -14,7 +14,7 @@ import javax.annotation.Nullable;
 
 public class EntityEnderman extends EntityMonster {
 
-    private static final UUID a = com.eatthepath.uuid.FastUUID.parseUUID("020E0DFB-87AE-4653-9556-831010E291A0"); // Reaper - Use FastUUID
+    private static final UUID a = com.eatthepath.uuid.FastUUID.parseUUID("020E0DFB-87AE-4653-9556-831010E291A0"); // Beast - Use FastUUID
     private static final AttributeModifier b = (new AttributeModifier(EntityEnderman.a, "Attacking speed boost", 0.15000000596046448D, 0)).a(false);
     private static final Set<Block> c = Sets.newIdentityHashSet();
     private static final DataWatcherObject<Optional<IBlockData>> bx = DataWatcher.a(EntityEnderman.class, DataWatcherRegistry.g);
@@ -102,17 +102,17 @@ public class EntityEnderman extends EntityMonster {
     public void p() {
         if (this.ticksLived >= this.bz + 400) {
             this.bz = this.ticksLived;
-            /* // Reaper start - Clientside particles
+            /* // Beast start - Clientside particles
             if (!this.isSilent()) {
                 this.world.a(this.locX, this.locY + (double) this.getHeadHeight(), this.locZ, SoundEffects.bh, this.bK(), 2.5F, 1.0F, false);
             }
-            */ // Reaper end
+            */ // Beast end
         }
 
     }
 
     public void a(DataWatcherObject<?> datawatcherobject) {
-        if (false) { // Reaper - Remove isClientSide check
+        if (false) { // Beast - Remove isClientSide check
             this.p();
         }
 
@@ -181,7 +181,7 @@ public class EntityEnderman extends EntityMonster {
     }
 
     public void n() {
-        if (false) { // Reaper - Remove isClientSide check
+        if (false) { // Beast - Remove isClientSide check
             for (int i = 0; i < 2; ++i) {
                 this.world.addParticle(EnumParticle.PORTAL, this.locX + (this.random.nextDouble() - 0.5D) * (double) this.width, this.locY + this.random.nextDouble() * (double) this.length - 0.25D, this.locZ + (this.random.nextDouble() - 0.5D) * (double) this.width, (this.random.nextDouble() - 0.5D) * 2.0D, -this.random.nextDouble(), (this.random.nextDouble() - 0.5D) * 2.0D, new int[0]);
             }
@@ -199,7 +199,7 @@ public class EntityEnderman extends EntityMonster {
         if (this.world.D() && this.ticksLived >= this.bA + 600) {
             float f = this.aw();
 
-            if (f > 0.5F && this.world.h(this.blockPos) && this.random.nextFloat() * 30.0F < (f - 0.4F) * 2.0F && tryEscape(EndermanEscapeEvent.Reason.RUNAWAY)) { // Reaper - Cache current block pos // Paper
+            if (f > 0.5F && this.world.h(this.blockPos) && this.random.nextFloat() * 30.0F < (f - 0.4F) * 2.0F && tryEscape(EndermanEscapeEvent.Reason.RUNAWAY)) { // Beast - Cache current block pos // Paper
                 this.setGoalTarget((EntityLiving) null);
                 this.dm();
             }
@@ -342,10 +342,10 @@ public class EntityEnderman extends EntityMonster {
             int j = MathHelper.floor(this.enderman.locY + random.nextDouble() * 3.0D);
             int k = MathHelper.floor(this.enderman.locZ - 2.0D + random.nextDouble() * 4.0D);
             BlockPosition blockposition = new BlockPosition(i, j, k);
-            // Reaper start - Don't load chunks for endermans
+            // Beast start - Don't load chunks for endermans
             IBlockData iblockdata = world.getTypeIfLoaded(blockposition);
             if (iblockdata == null) return;
-            // Reaper end
+            // Beast end
             Block block = iblockdata.getBlock();
             MovingObjectPosition movingobjectposition = world.rayTrace(new Vec3D((double) ((float) MathHelper.floor(this.enderman.locX) + 0.5F), (double) ((float) j + 0.5F), (double) ((float) MathHelper.floor(this.enderman.locZ) + 0.5F)), new Vec3D((double) ((float) i + 0.5F), (double) ((float) j + 0.5F), (double) ((float) k + 0.5F)), false, true, false);
             boolean flag = movingobjectposition != null && movingobjectposition.a().equals(blockposition);
@@ -381,10 +381,10 @@ public class EntityEnderman extends EntityMonster {
             int j = MathHelper.floor(this.a.locY + random.nextDouble() * 2.0D);
             int k = MathHelper.floor(this.a.locZ - 1.0D + random.nextDouble() * 2.0D);
             BlockPosition blockposition = new BlockPosition(i, j, k);
-            // Reaper start - Don't load chunks for endermans
+            // Beast start - Don't load chunks for endermans
             IBlockData iblockdata = world.getTypeIfLoaded(blockposition);
             if (iblockdata == null) return;
-            // Reaper end
+            // Beast end
             IBlockData iblockdata1 = world.getType(blockposition.down());
             IBlockData iblockdata2 = this.a.getCarried();
 
diff --git a/src/main/java/net/minecraft/server/EntityEvoker.java b/src/main/java/net/minecraft/server/EntityEvoker.java
index bb8c05dee84c5ee09d68fb7b0d3c9c04d4db68f2..9e5e6167f623ee8cc032a684e38b50ea433328cc 100644
--- a/src/main/java/net/minecraft/server/EntityEvoker.java
+++ b/src/main/java/net/minecraft/server/EntityEvoker.java
@@ -197,7 +197,7 @@ public class EntityEvoker extends EntityIllagerWizard {
 
         protected void j() {
             for (int i = 0; i < 3; ++i) {
-                BlockPosition blockposition = (EntityEvoker.this.blockPos).a(-2 + EntityEvoker.this.random.nextInt(5), 1, -2 + EntityEvoker.this.random.nextInt(5)); // Reaper - Cache current block pos
+                BlockPosition blockposition = (EntityEvoker.this.blockPos).a(-2 + EntityEvoker.this.random.nextInt(5), 1, -2 + EntityEvoker.this.random.nextInt(5)); // Beast - Cache current block pos
                 EntityVex entityvex = new EntityVex(EntityEvoker.this.world);
 
                 entityvex.setPositionRotation(blockposition, 0.0F, 0.0F);
diff --git a/src/main/java/net/minecraft/server/EntityEvokerFangs.java b/src/main/java/net/minecraft/server/EntityEvokerFangs.java
index 2dd0e83fa36ed7c8b7c48eaf714904ac09e42c21..806e23e0577389779d8014c7e1b36580ea133df8 100644
--- a/src/main/java/net/minecraft/server/EntityEvokerFangs.java
+++ b/src/main/java/net/minecraft/server/EntityEvokerFangs.java
@@ -63,7 +63,7 @@ public class EntityEvokerFangs extends Entity {
 
     public void B_() {
         super.B_();
-        if (false) { // Reaper - Remove isClientSide check
+        if (false) { // Beast - Remove isClientSide check
             if (this.d) {
                 --this.c;
                 if (this.c == 14) {
diff --git a/src/main/java/net/minecraft/server/EntityExperienceOrb.java b/src/main/java/net/minecraft/server/EntityExperienceOrb.java
index a316e44b8d8b3017fc682b1acae19c3b79ed6910..16053853b13ee833fad23c82167b6736783710b1 100644
--- a/src/main/java/net/minecraft/server/EntityExperienceOrb.java
+++ b/src/main/java/net/minecraft/server/EntityExperienceOrb.java
@@ -97,7 +97,7 @@ public class EntityExperienceOrb extends Entity {
             this.motY -= 0.029999999329447746D;
         }
 
-        if (this.world.getType(this.blockPos).getMaterial() == Material.LAVA) { // Reaper - Cache current block pos
+        if (this.world.getType(this.blockPos).getMaterial() == Material.LAVA) { // Beast - Cache current block pos
             this.motY = 0.20000000298023224D;
             this.motX = (double) ((this.random.nextFloat() - this.random.nextFloat()) * 0.2F);
             this.motZ = (double) ((this.random.nextFloat() - this.random.nextFloat()) * 0.2F);
@@ -205,7 +205,7 @@ public class EntityExperienceOrb extends Entity {
     }
 
     public void d(EntityHuman entityhuman) {
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             if (this.c == 0 && entityhuman.bD == 0 && new com.destroystokyo.paper.event.player.PlayerPickupExperienceEvent(((EntityPlayer) entityhuman).getBukkitEntity(), (org.bukkit.entity.ExperienceOrb) this.getBukkitEntity()).callEvent()) { // Paper
                 entityhuman.bD = 2;
                 entityhuman.receive(this, 1);
diff --git a/src/main/java/net/minecraft/server/EntityFallingBlock.java b/src/main/java/net/minecraft/server/EntityFallingBlock.java
index dd1fe59e2dfcc07f4a4ab7a3574606a0501ec58d..30d88c58bc93718554dbb4f476825a297d82129a 100644
--- a/src/main/java/net/minecraft/server/EntityFallingBlock.java
+++ b/src/main/java/net/minecraft/server/EntityFallingBlock.java
@@ -36,7 +36,7 @@ public class EntityFallingBlock extends Entity {
         this.lastX = d0;
         this.lastY = d1;
         this.lastZ = d2;
-        this.a(this.blockPos); // Reaper - Cache current block pos
+        this.a(this.blockPos); // Beast - Cache current block pos
     }
 
     public boolean bd() {
@@ -71,10 +71,10 @@ public class EntityFallingBlock extends Entity {
             BlockPosition blockposition;
 
             if (this.ticksLived++ == 0) {
-                blockposition = this.blockPos; // Reaper - Cache current block pos
+                blockposition = this.blockPos; // Beast - Cache current block pos
                 if (this.world.getType(blockposition).getBlock() == block && !CraftEventFactory.callEntityChangeBlockEvent(this, blockposition, Blocks.AIR, 0).isCancelled()) {
                     this.world.setAir(blockposition);
-                } else if (true) { // Reaper - Remove isClientSide check
+                } else if (true) { // Beast - Remove isClientSide check
                     this.die();
                     return;
                 }
@@ -96,8 +96,8 @@ public class EntityFallingBlock extends Entity {
             }
             // Paper end
 
-            if (true) { // Reaper - Remove isClientSide check
-                blockposition = this.blockPos; // Reaper - Cache current block pos
+            if (true) { // Beast - Remove isClientSide check
+                blockposition = this.blockPos; // Beast - Cache current block pos
                 boolean flag = this.block.getBlock() == Blocks.dS;
                 boolean flag1 = flag && this.world.getType(blockposition).getMaterial() == Material.WATER;
                 double d0 = this.motX * this.motX + this.motY * this.motY + this.motZ * this.motZ;
@@ -112,7 +112,7 @@ public class EntityFallingBlock extends Entity {
                 }
 
                 if (!this.onGround && !flag1) {
-                    if (this.ticksLived > 100 && (blockposition.getY() < 1 || blockposition.getY() > 256) || this.ticksLived > 600) { // Reaper - Remove isClientSide check
+                    if (this.ticksLived > 100 && (blockposition.getY() < 1 || blockposition.getY() > 256) || this.ticksLived > 600) { // Beast - Remove isClientSide check
                         if (this.dropItem && this.world.getGameRules().getBoolean("doEntityDrops")) {
                             this.a(new ItemStack(block, 1, block.getDropData(this.block)), 0.0F);
                         }
@@ -247,7 +247,7 @@ public class EntityFallingBlock extends Entity {
         Block block = this.block != null ? this.block.getBlock() : Blocks.AIR;
         MinecraftKey minecraftkey = (MinecraftKey) Block.REGISTRY.b(block);
 
-        nbttagcompound.setString("Block", /*minecraftkey == null*/false ? "" : minecraftkey.toString()); // Reaper - Optimize
+        nbttagcompound.setString("Block", /*minecraftkey == null*/false ? "" : minecraftkey.toString()); // Beast - Optimize
         nbttagcompound.setByte("Data", (byte) block.toLegacyData(this.block));
         nbttagcompound.setInt("Time", this.ticksLived);
         nbttagcompound.setBoolean("DropItem", this.dropItem);
diff --git a/src/main/java/net/minecraft/server/EntityFireball.java b/src/main/java/net/minecraft/server/EntityFireball.java
index cba359bda87155897a13a0817996d5b2fd237927..b4d6e2520d26938a01e496992295be22fc31b9f9 100644
--- a/src/main/java/net/minecraft/server/EntityFireball.java
+++ b/src/main/java/net/minecraft/server/EntityFireball.java
@@ -59,7 +59,7 @@ public abstract class EntityFireball extends Entity {
     }
 
     public void B_() {
-        if (this.shooter != null && this.shooter.dead || !this.world.isLoaded(this.blockPos)) { // Reaper - Remove isClientSide check // Reaper - Cache current block pos
+        if (this.shooter != null && this.shooter.dead || !this.world.isLoaded(this.blockPos)) { // Beast - Remove isClientSide check // Beast - Cache current block pos
             this.die();
         } else {
             super.B_();
@@ -96,13 +96,13 @@ public abstract class EntityFireball extends Entity {
             float f = this.l();
 
             if (this.isInWater()) {
-                /* // Reaper start - Clientside particles
+                /* // Beast start - Clientside particles
                 for (int i = 0; i < 4; ++i) {
                     float f1 = 0.25F;
 
                     this.world.addParticle(EnumParticle.WATER_BUBBLE, this.locX - this.motX * 0.25D, this.locY - this.motY * 0.25D, this.locZ - this.motZ * 0.25D, this.motX, this.motY, this.motZ, new int[0]);
                 }
-                */ // Reaper end
+                */ // Beast end
 
                 f = 0.8F;
             }
@@ -113,7 +113,7 @@ public abstract class EntityFireball extends Entity {
             this.motX *= (double) f;
             this.motY *= (double) f;
             this.motZ *= (double) f;
-            // this.world.addParticle(this.j(), this.locX, this.locY + 0.5D, this.locZ, 0.0D, 0.0D, 0.0D, new int[0]); // Reaper - Clientside particles
+            // this.world.addParticle(this.j(), this.locX, this.locY + 0.5D, this.locZ, 0.0D, 0.0D, 0.0D, new int[0]); // Beast - Clientside particles
             this.setPosition(this.locX, this.locY, this.locZ);
         }
     }
diff --git a/src/main/java/net/minecraft/server/EntityFireworks.java b/src/main/java/net/minecraft/server/EntityFireworks.java
index 93e64c0a1ad65fee45c2ac942c8cd9d61f93777b..b3ef0e4f1f946f53fa31fe8b3af40d988091de19 100644
--- a/src/main/java/net/minecraft/server/EntityFireworks.java
+++ b/src/main/java/net/minecraft/server/EntityFireworks.java
@@ -124,11 +124,11 @@ public class EntityFireworks extends Entity {
         }
 
         ++this.ticksFlown;
-        if (false && this.ticksFlown % 2 < 2) { // Reaper - Remove isClientSide check
+        if (false && this.ticksFlown % 2 < 2) { // Beast - Remove isClientSide check
             this.world.addParticle(EnumParticle.FIREWORKS_SPARK, this.locX, this.locY - 0.3D, this.locZ, this.random.nextGaussian() * 0.05D, -this.motY * 0.5D, this.random.nextGaussian() * 0.05D, new int[0]);
         }
 
-        if (this.ticksFlown > this.expectedLifespan) { // Reaper - Remove isClientSide check
+        if (this.ticksFlown > this.expectedLifespan) { // Beast - Remove isClientSide check
             // CraftBukkit start
             if (!org.bukkit.craftbukkit.event.CraftEventFactory.callFireworkExplodeEvent(this).isCancelled()) {
                 this.world.broadcastEntityEffect(this, (byte) 17);
@@ -204,7 +204,7 @@ public class EntityFireworks extends Entity {
         ItemStack itemstack = (ItemStack) this.datawatcher.get(EntityFireworks.FIREWORK_ITEM);
 
         if (!itemstack.isEmpty()) {
-            nbttagcompound.set("FireworksItem", itemstack.save(new NBTTagCompound(4))); // Reaper - Use initial capacity
+            nbttagcompound.set("FireworksItem", itemstack.save(new NBTTagCompound(4))); // Beast - Use initial capacity
         }
         // Paper start
         if (spawningEntity != null) {
diff --git a/src/main/java/net/minecraft/server/EntityFishingHook.java b/src/main/java/net/minecraft/server/EntityFishingHook.java
index 0ddc4e157ae77d4aaa53167eb0fa3ae8ccaf33f6..5f284f2498f9f2758087863efd9d09ced9a56770 100644
--- a/src/main/java/net/minecraft/server/EntityFishingHook.java
+++ b/src/main/java/net/minecraft/server/EntityFishingHook.java
@@ -3,7 +3,7 @@ package net.minecraft.server;
 import java.util.Iterator;
 import java.util.List;
 // CraftBukkit start
-import com.github.ruviolence.reaper.BeastConfig;
+import com.homomc.beast.BeastConfig;
 import org.bukkit.entity.Player;
 import org.bukkit.entity.Fish;
 import org.bukkit.event.player.PlayerFishEvent;
@@ -93,7 +93,7 @@ public class EntityFishingHook extends Entity {
         super.B_();
         if (this.owner == null) {
             this.die();
-        } else if (!this.p()) { // Reaper - Remove isClientSide check
+        } else if (!this.p()) { // Beast - Remove isClientSide check
             if (this.isInGround) {
                 ++this.d;
                 if (this.d >= 1200) {
@@ -103,7 +103,7 @@ public class EntityFishingHook extends Entity {
             }
 
             float f = 0.0F;
-            BlockPosition blockposition = this.blockPos; // Reaper - Cache current block pos
+            BlockPosition blockposition = this.blockPos; // Beast - Cache current block pos
             IBlockData iblockdata = this.world.getType(blockposition);
 
             if (iblockdata.getMaterial() == Material.WATER) {
@@ -129,7 +129,7 @@ public class EntityFishingHook extends Entity {
                     return;
                 }
 
-                if (true) { // Reaper - Remove isClientSide check
+                if (true) { // Beast - Remove isClientSide check
                     this.r();
                 }
 
@@ -154,7 +154,7 @@ public class EntityFishingHook extends Entity {
                             this.locY = this.hooked.getBoundingBox().b + d1 * 0.8D;
                             this.locZ = this.hooked.locZ;
                             this.setPosition(this.locX, this.locY, this.locZ);
-                            if (this.ak) this.die(); // Reaper - Prevent going through portals
+                            if (this.ak) this.die(); // Beast - Prevent going through portals
                         }
                     }
 
@@ -170,7 +170,7 @@ public class EntityFishingHook extends Entity {
                     }
 
                     this.motY -= d0 * (double) this.random.nextFloat() * 0.2D;
-                    if (f > 0.0F) { // Reaper - Remove isClientSide check
+                    if (f > 0.0F) { // Beast - Remove isClientSide check
                         this.a(blockposition);
                     }
                 }
@@ -286,11 +286,11 @@ public class EntityFishingHook extends Entity {
         if (movingobjectposition != null && movingobjectposition.type != MovingObjectPosition.EnumMovingObjectType.MISS) {
             org.bukkit.craftbukkit.event.CraftEventFactory.callProjectileHitEvent(this, movingobjectposition); // Craftbukkit - Call event
             if (movingobjectposition.type == MovingObjectPosition.EnumMovingObjectType.ENTITY) {
-                // Reaper start - Old combat
+                // Beast start - Old combat
                 if (BeastConfig.oldCombatFishingHooksKnockback) {
                     movingobjectposition.entity.damageEntity(DamageSource.projectile(this, this.owner), 0.0F);
                 }
-                // Reaper end
+                // Beast end
                 this.hooked = movingobjectposition.entity;
                 this.s();
             } else {
@@ -420,7 +420,7 @@ public class EntityFishingHook extends Entity {
     public void a(NBTTagCompound nbttagcompound) {}
 
     public int j() {
-        if (this.owner != null) { // Reaper - Remove isClientSide check
+        if (this.owner != null) { // Beast - Remove isClientSide check
             int i = 0;
 
             if (this.hooked != null) {
diff --git a/src/main/java/net/minecraft/server/EntityGhast.java b/src/main/java/net/minecraft/server/EntityGhast.java
index c10bb48aca23c9d6e6497ee8326db103b3186a1f..73d9957609b95341bc893a25b2ffdbf84617b5ce 100644
--- a/src/main/java/net/minecraft/server/EntityGhast.java
+++ b/src/main/java/net/minecraft/server/EntityGhast.java
@@ -33,7 +33,7 @@ public class EntityGhast extends EntityFlying implements IMonster {
 
     public void B_() {
         super.B_();
-        if (this.world.getDifficulty() == EnumDifficulty.PEACEFUL) { // Reaper - Remove isClientSide check
+        if (this.world.getDifficulty() == EnumDifficulty.PEACEFUL) { // Beast - Remove isClientSide check
             this.die();
         }
 
@@ -145,7 +145,7 @@ public class EntityGhast extends EntityFlying implements IMonster {
 
                 ++this.a;
                 if (this.a == 10) {
-                    world.a((EntityHuman) null, 1015, this.ghast.blockPos, 0); // Reaper - Cache current block pos
+                    world.a((EntityHuman) null, 1015, this.ghast.blockPos, 0); // Beast - Cache current block pos
                 }
 
                 if (this.a == 20) {
@@ -155,7 +155,7 @@ public class EntityGhast extends EntityFlying implements IMonster {
                     double d3 = entityliving.getBoundingBox().b + (double) (entityliving.length / 2.0F) - (0.5D + this.ghast.locY + (double) (this.ghast.length / 2.0F));
                     double d4 = entityliving.locZ - (this.ghast.locZ + vec3d.z * 4.0D);
 
-                    world.a((EntityHuman) null, 1016, this.ghast.blockPos, 0); // Reaper - Cache current block pos
+                    world.a((EntityHuman) null, 1016, this.ghast.blockPos, 0); // Beast - Cache current block pos
                     EntityLargeFireball entitylargefireball = new EntityLargeFireball(world, this.ghast, d2, d3, d4);
 
                     // CraftBukkit - set bukkitYield when setting explosionpower
@@ -163,7 +163,7 @@ public class EntityGhast extends EntityFlying implements IMonster {
                     entitylargefireball.locX = this.ghast.locX + vec3d.x * 4.0D;
                     entitylargefireball.locY = this.ghast.locY + (double) (this.ghast.length / 2.0F) + 0.5D;
                     entitylargefireball.locZ = this.ghast.locZ + vec3d.z * 4.0D;
-                    entitylargefireball.resetBlockPos(); // Reaper - Cache current block pos
+                    entitylargefireball.resetBlockPos(); // Beast - Cache current block pos
                     world.addEntity(entitylargefireball);
                     this.a = -40;
                 }
diff --git a/src/main/java/net/minecraft/server/EntityGuardian.java b/src/main/java/net/minecraft/server/EntityGuardian.java
index 34625178c9e1b4791a0a9220dfe8b60a9183285b..9d49e64aa737a7980201657fabced6fbfaab8bfe 100644
--- a/src/main/java/net/minecraft/server/EntityGuardian.java
+++ b/src/main/java/net/minecraft/server/EntityGuardian.java
@@ -63,7 +63,7 @@ public class EntityGuardian extends EntityMonster {
         this.datawatcher.register(EntityGuardian.bB, Integer.valueOf(0));
     }
 
-    public boolean isMoving() { // Reaper - MC Dev fix
+    public boolean isMoving() { // Beast - MC Dev fix
         return ((Boolean) this.datawatcher.get(EntityGuardian.bA)).booleanValue();
     }
 
@@ -87,7 +87,7 @@ public class EntityGuardian extends EntityMonster {
     public EntityLiving dq() {
         if (!this.dp()) {
             return null;
-        } else if (false) { // Reaper - Remove isClientSide check
+        } else if (false) { // Beast - Remove isClientSide check
             if (this.bC != null) {
                 return this.bC;
             } else {
@@ -143,7 +143,7 @@ public class EntityGuardian extends EntityMonster {
     }
 
     public void n() {
-        if (false) { // Reaper - Remove isClientSide check
+        if (false) { // Beast - Remove isClientSide check
             this.b = this.a;
             if (!this.isInWater()) {
                 this.c = 2.0F;
@@ -249,7 +249,7 @@ public class EntityGuardian extends EntityMonster {
     }
 
     public boolean P() {
-        return (this.random.nextInt(20) == 0 || !this.world.i(this.blockPos)) && super.P(); // Reaper - Cache current block pos
+        return (this.random.nextInt(20) == 0 || !this.world.i(this.blockPos)) && super.P(); // Beast - Cache current block pos
     }
 
     public boolean damageEntity(DamageSource damagesource, float f) {
diff --git a/src/main/java/net/minecraft/server/EntityGuardianElder.java b/src/main/java/net/minecraft/server/EntityGuardianElder.java
index 35e9e0758d798af442055b0caa3f835f46e8dc3f..c685a65b2f253b43dcd5974dc3070bb5424f539d 100644
--- a/src/main/java/net/minecraft/server/EntityGuardianElder.java
+++ b/src/main/java/net/minecraft/server/EntityGuardianElder.java
@@ -84,7 +84,7 @@ public class EntityGuardianElder extends EntityGuardian {
         }
 
         if (!this.dj()) {
-            this.a(this.blockPos, 16); // Reaper - Cache current block pos
+            this.a(this.blockPos, 16); // Beast - Cache current block pos
         }
 
     }
diff --git a/src/main/java/net/minecraft/server/EntityHanging.java b/src/main/java/net/minecraft/server/EntityHanging.java
index cd5c5f37748eb7d93f5bfbfdb3aca6434c96f163..da2ef9a3677c3ff4f240a7fe9f0916f0fe6b0063 100644
--- a/src/main/java/net/minecraft/server/EntityHanging.java
+++ b/src/main/java/net/minecraft/server/EntityHanging.java
@@ -67,7 +67,7 @@ public abstract class EntityHanging extends Entity {
             entity.locX = d0;
             entity.locY = d1;
             entity.locZ = d2;
-            entity.resetBlockPos(); // Reaper - Cache current block pos
+            entity.resetBlockPos(); // Beast - Cache current block pos
         }
         double d6 = (double) width;
         double d7 = (double) height;
@@ -101,11 +101,11 @@ public abstract class EntityHanging extends Entity {
         this.lastX = this.locX;
         this.lastY = this.locY;
         this.lastZ = this.locZ;
-        if (this.d++ == this.world.spigotConfig.hangingTickFrequency) { // Spigot // Reaper - Remove isClientSide check
+        if (this.d++ == this.world.spigotConfig.hangingTickFrequency) { // Spigot // Beast - Remove isClientSide check
             this.d = 0;
             if (!this.dead && !this.survives()) {
                 // CraftBukkit start - fire break events
-                Material material = this.world.getType(this.blockPos).getMaterial(); // Reaper - Cache current block pos
+                Material material = this.world.getType(this.blockPos).getMaterial(); // Beast - Cache current block pos
                 HangingBreakEvent.RemoveCause cause;
 
                 if (!material.equals(Material.AIR)) {
@@ -173,7 +173,7 @@ public abstract class EntityHanging extends Entity {
         if (this.isInvulnerable(damagesource)) {
             return false;
         } else {
-            if (!this.dead) { // Reaper - Remove isClientSide check
+            if (!this.dead) { // Beast - Remove isClientSide check
                 // CraftBukkit start - fire break events
                 HangingBreakEvent event = new HangingBreakEvent((Hanging) this.getBukkitEntity(), HangingBreakEvent.RemoveCause.DEFAULT);
                 if (damagesource.getEntity() != null) {
@@ -199,8 +199,8 @@ public abstract class EntityHanging extends Entity {
     }
 
     public void move(EnumMoveType enummovetype, double d0, double d1, double d2) {
-        if (!this.dead && d0 * d0 + d1 * d1 + d2 * d2 > 0.0D) { // Reaper - Remove isClientSide check
-            if (/*this.dead*/false) return; // CraftBukkit // Reaper - Always false
+        if (!this.dead && d0 * d0 + d1 * d1 + d2 * d2 > 0.0D) { // Beast - Remove isClientSide check
+            if (/*this.dead*/false) return; // CraftBukkit // Beast - Always false
 
             // CraftBukkit start - fire break events
             // TODO - Does this need its own cause? Seems to only be triggered by pistons
diff --git a/src/main/java/net/minecraft/server/EntityHorse.java b/src/main/java/net/minecraft/server/EntityHorse.java
index b5a70589f1aec477905b7d15a589a35a66fa8615..4db463185607a1828ac773102be728bd80c35373 100644
--- a/src/main/java/net/minecraft/server/EntityHorse.java
+++ b/src/main/java/net/minecraft/server/EntityHorse.java
@@ -5,17 +5,17 @@ import javax.annotation.Nullable;
 
 public class EntityHorse extends EntityHorseAbstract {
 
-    private static final UUID bH = com.eatthepath.uuid.FastUUID.parseUUID("556E1665-8B10-40C8-8F9D-CF9B1667F295"); // Reaper - Use FastUUID
+    private static final UUID bH = com.eatthepath.uuid.FastUUID.parseUUID("556E1665-8B10-40C8-8F9D-CF9B1667F295"); // Beast - Use FastUUID
     private static final DataWatcherObject<Integer> bI = DataWatcher.a(EntityHorse.class, DataWatcherRegistry.b);
     private static final DataWatcherObject<Integer> bJ = DataWatcher.a(EntityHorse.class, DataWatcherRegistry.b);
-    /* // Reaper start - Clientside texture fields
+    /* // Beast start - Clientside texture fields
     private static final String[] bK = new String[] { "textures/entity/horse/horse_white.png", "textures/entity/horse/horse_creamy.png", "textures/entity/horse/horse_chestnut.png", "textures/entity/horse/horse_brown.png", "textures/entity/horse/horse_black.png", "textures/entity/horse/horse_gray.png", "textures/entity/horse/horse_darkbrown.png"};
     private static final String[] bL = new String[] { "hwh", "hcr", "hch", "hbr", "hbl", "hgr", "hdb"};
     private static final String[] bM = new String[] { null, "textures/entity/horse/horse_markings_white.png", "textures/entity/horse/horse_markings_whitefield.png", "textures/entity/horse/horse_markings_whitedots.png", "textures/entity/horse/horse_markings_blackdots.png"};
     private static final String[] bN = new String[] { "", "wo_", "wmo", "wdo", "bdo"};
     private String bO;
     private final String[] bP = new String[3];
-    */ // Reaper end
+    */ // Beast end
 
     public EntityHorse(World world) {
         super(world);
@@ -36,7 +36,7 @@ public class EntityHorse extends EntityHorseAbstract {
         super.b(nbttagcompound);
         nbttagcompound.setInt("Variant", this.getVariant());
         if (!this.inventoryChest.getItem(1).isEmpty()) {
-            nbttagcompound.set("ArmorItem", this.inventoryChest.getItem(1).save(new NBTTagCompound(4))); // Reaper - Use initial capacity
+            nbttagcompound.set("ArmorItem", this.inventoryChest.getItem(1).save(new NBTTagCompound(4))); // Beast - Use initial capacity
         }
 
     }
@@ -65,7 +65,7 @@ public class EntityHorse extends EntityHorseAbstract {
     }
 
     private void dQ() {
-        // this.bO = null; // Reaper - Clientside texture field
+        // this.bO = null; // Beast - Clientside texture field
     }
 
     protected void dD() {
@@ -78,7 +78,7 @@ public class EntityHorse extends EntityHorseAbstract {
 
         this.datawatcher.set(EntityHorse.bJ, Integer.valueOf(enumhorsearmor.a()));
         this.dQ();
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             this.getAttributeInstance(GenericAttributes.h).b(EntityHorse.bH);
             int i = enumhorsearmor.c();
 
@@ -122,7 +122,7 @@ public class EntityHorse extends EntityHorseAbstract {
 
     public void B_() {
         super.B_();
-        if (false && this.datawatcher.a()) { // Reaper - Remove isClientSide check
+        if (false && this.datawatcher.a()) { // Beast - Remove isClientSide check
             this.datawatcher.e();
             this.dQ();
         }
diff --git a/src/main/java/net/minecraft/server/EntityHorseAbstract.java b/src/main/java/net/minecraft/server/EntityHorseAbstract.java
index 967f67615313a032aab148204eea3df2751792b8..458881dce4a6747b0339869e4286e3dfba498f4a 100644
--- a/src/main/java/net/minecraft/server/EntityHorseAbstract.java
+++ b/src/main/java/net/minecraft/server/EntityHorseAbstract.java
@@ -41,7 +41,7 @@ public abstract class EntityHorseAbstract extends EntityAnimal implements IInven
     protected boolean bF = true;
     protected int bG;
     public int maxDomestication = 100; // CraftBukkit - store max domestication value
-    private Optional<UUID> cachedOwnerId; // Reaper - Cache entity owner
+    private Optional<UUID> cachedOwnerId; // Beast - Cache entity owner
 
     public EntityHorseAbstract(World world) {
         super(world);
@@ -88,17 +88,17 @@ public abstract class EntityHorseAbstract extends EntityAnimal implements IInven
 
     @Nullable
     public UUID getOwnerUUID() {
-        // Reaper start - Cache entity owner
+        // Beast start - Cache entity owner
         if (cachedOwnerId == null) cachedOwnerId = this.datawatcher.get(EntityHorseAbstract.bJ);
         return cachedOwnerId.orNull();
-        // Reaper end
+        // Beast end
     }
 
     public void setOwnerUUID(@Nullable UUID uuid) {
-        // Reaper start - Cache entity owner
+        // Beast start - Cache entity owner
         this.cachedOwnerId = Optional.fromNullable(uuid);
         this.datawatcher.set(EntityHorseAbstract.bJ, this.cachedOwnerId);
-        // Reaper end
+        // Beast end
     }
 
     public float dw() {
@@ -243,7 +243,7 @@ public abstract class EntityHorseAbstract extends EntityAnimal implements IInven
     }
 
     protected void dD() {
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             this.u(!this.inventoryChest.getItem(0).isEmpty() && this.dF());
         }
     }
@@ -375,7 +375,7 @@ public abstract class EntityHorseAbstract extends EntityAnimal implements IInven
     }
 
     public void c(EntityHuman entityhuman) {
-        if ((!this.isVehicle() || this.w(entityhuman)) && this.isTamed()) { // Reaper - Remove isClientSide check
+        if ((!this.isVehicle() || this.w(entityhuman)) && this.isTamed()) { // Beast - Remove isClientSide check
             this.inventoryChest.a(this.getName());
             entityhuman.openHorseInventory(this, this.inventoryChest);
         }
@@ -428,8 +428,8 @@ public abstract class EntityHorseAbstract extends EntityAnimal implements IInven
         }
 
         if (this.isBaby() && short0 > 0) {
-            // this.world.addParticle(EnumParticle.VILLAGER_HAPPY, this.locX + (double) (this.random.nextFloat() * this.width * 2.0F) - (double) this.width, this.locY + 0.5D + (double) (this.random.nextFloat() * this.length), this.locZ + (double) (this.random.nextFloat() * this.width * 2.0F) - (double) this.width, 0.0D, 0.0D, 0.0D, new int[0]); // Reaper - Clientside particles
-            if (true) { // Reaper - Remove isClientSide check
+            // this.world.addParticle(EnumParticle.VILLAGER_HAPPY, this.locX + (double) (this.random.nextFloat() * this.width * 2.0F) - (double) this.width, this.locY + 0.5D + (double) (this.random.nextFloat() * this.length), this.locZ + (double) (this.random.nextFloat() * this.width * 2.0F) - (double) this.width, 0.0D, 0.0D, 0.0D, new int[0]); // Beast - Clientside particles
+            if (true) { // Beast - Remove isClientSide check
                 this.setAge(short0);
             }
 
@@ -438,7 +438,7 @@ public abstract class EntityHorseAbstract extends EntityAnimal implements IInven
 
         if (b0 > 0 && (flag || !this.isTamed()) && this.getTemper() < this.getMaxDomestication()) {
             flag = true;
-            if (true) { // Reaper - Remove isClientSide check
+            if (true) { // Beast - Remove isClientSide check
                 this.n(b0);
             }
         }
@@ -455,7 +455,7 @@ public abstract class EntityHorseAbstract extends EntityAnimal implements IInven
         entityhuman.pitch = this.pitch;
         this.v(false);
         this.setStanding(false);
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             entityhuman.startRiding(this);
         }
 
@@ -475,7 +475,7 @@ public abstract class EntityHorseAbstract extends EntityAnimal implements IInven
 
     public void die(DamageSource damagesource) {
         // super.die(damagesource); // Moved down
-        if (this.inventoryChest != null) { // Reaper - Remove isClientSide check
+        if (this.inventoryChest != null) { // Beast - Remove isClientSide check
             for (int i = 0; i < this.inventoryChest.getSize(); ++i) {
                 ItemStack itemstack = this.inventoryChest.getItem(i);
 
@@ -494,7 +494,7 @@ public abstract class EntityHorseAbstract extends EntityAnimal implements IInven
         }
 
         super.n();
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             if (this.random.nextInt(900) == 0 && this.deathTicks == 0) {
                 this.heal(1.0F, RegainReason.REGEN); // CraftBukkit
             }
@@ -597,7 +597,7 @@ public abstract class EntityHorseAbstract extends EntityAnimal implements IInven
     }
 
     private void dp() {
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             this.bL = 1;
             this.c(64, true);
         }
@@ -731,12 +731,12 @@ public abstract class EntityHorseAbstract extends EntityAnimal implements IInven
         nbttagcompound.setInt("Temper", this.getTemper());
         nbttagcompound.setBoolean("Tame", this.isTamed());
         if (this.getOwnerUUID() != null) {
-            nbttagcompound.setString("OwnerUUID", com.eatthepath.uuid.FastUUID.toString(this.getOwnerUUID())); // Reaper - Use FastUUID
+            nbttagcompound.setString("OwnerUUID", com.eatthepath.uuid.FastUUID.toString(this.getOwnerUUID())); // Beast - Use FastUUID
         }
         nbttagcompound.setInt("Bukkit.MaxDomestication", this.maxDomestication); // CraftBukkit
 
         if (!this.inventoryChest.getItem(0).isEmpty()) {
-            nbttagcompound.set("SaddleItem", this.inventoryChest.getItem(0).save(new NBTTagCompound(4))); // Reaper - Use initial capacity
+            nbttagcompound.set("SaddleItem", this.inventoryChest.getItem(0).save(new NBTTagCompound(4))); // Beast - Use initial capacity
         }
 
     }
@@ -758,7 +758,7 @@ public abstract class EntityHorseAbstract extends EntityAnimal implements IInven
         }
 
         if (!s.isEmpty()) {
-            this.setOwnerUUID(com.eatthepath.uuid.FastUUID.parseUUID(s)); // Reaper - Use FastUUID
+            this.setOwnerUUID(com.eatthepath.uuid.FastUUID.parseUUID(s)); // Beast - Use FastUUID
         }
         // CraftBukkit start
         if (nbttagcompound.hasKey("Bukkit.MaxDomestication")) {
@@ -912,7 +912,7 @@ public abstract class EntityHorseAbstract extends EntityAnimal implements IInven
 
     @Nullable
     public Entity bE() {
-        return this.isPassengersEmpty() ? null : (Entity) this.bF().get(0); // Reaper
+        return this.isPassengersEmpty() ? null : (Entity) this.bF().get(0); // Beast
     }
 
     @Nullable
diff --git a/src/main/java/net/minecraft/server/EntityHorseChestedAbstract.java b/src/main/java/net/minecraft/server/EntityHorseChestedAbstract.java
index 9e1ea5ff044e6e888aa74b9a1f86ce9961ef65a4..74d299bb2e6af10e91132f3e372bc055094f4a25 100644
--- a/src/main/java/net/minecraft/server/EntityHorseChestedAbstract.java
+++ b/src/main/java/net/minecraft/server/EntityHorseChestedAbstract.java
@@ -45,7 +45,7 @@ public abstract class EntityHorseChestedAbstract extends EntityHorseAbstract {
     public void die(DamageSource damagesource) {
         // super.die(damagesource); // CraftBukkit - moved down
         if (this.isCarryingChest()) {
-            if (true) { // Reaper - Remove isClientSide check
+            if (true) { // Beast - Remove isClientSide check
                 this.a(Item.getItemOf(Blocks.CHEST), 1);
             }
 
@@ -73,7 +73,7 @@ public abstract class EntityHorseChestedAbstract extends EntityHorseAbstract {
                 ItemStack itemstack = this.inventoryChest.getItem(i);
 
                 if (!itemstack.isEmpty()) {
-                    NBTTagCompound nbttagcompound1 = new NBTTagCompound(5); // Reaper - Use initial capacity
+                    NBTTagCompound nbttagcompound1 = new NBTTagCompound(5); // Beast - Use initial capacity
 
                     nbttagcompound1.setByte("Slot", (byte) i);
                     itemstack.save(nbttagcompound1);
diff --git a/src/main/java/net/minecraft/server/EntityHuman.java b/src/main/java/net/minecraft/server/EntityHuman.java
index 9fdfd9e824eecdb546d40da0e58b6eeba78dd758..727bc5c094ecaeb4b3e51764ae853c98a8a6b175 100644
--- a/src/main/java/net/minecraft/server/EntityHuman.java
+++ b/src/main/java/net/minecraft/server/EntityHuman.java
@@ -1,8 +1,9 @@
 package net.minecraft.server;
 
-import com.github.ruviolence.reaper.BeastConfig;
+import com.homomc.beast.BeastConfig;
 import com.google.common.base.Predicate;
 import com.google.common.collect.Lists;
+import com.homomc.beast.InventoryUpdateHelper;
 import com.mojang.authlib.GameProfile;
 import java.nio.charset.StandardCharsets;
 import java.util.Iterator;
@@ -88,7 +89,7 @@ public abstract class EntityHuman extends EntityLiving {
         this.bW = this.l();
         this.a(a(gameprofile));
         this.g = gameprofile;
-        this.defaultContainer = new ContainerPlayer(this.inventory, true, this); // Reaper - Remove isClientSide check
+        this.defaultContainer = new ContainerPlayer(this.inventory, true, this); // Beast - Remove isClientSide check
         this.activeContainer = this.defaultContainer;
         BlockPosition blockposition = world.getSpawn();
 
@@ -130,7 +131,7 @@ public abstract class EntityHuman extends EntityLiving {
                 this.sleepTicks = 100;
             }
 
-            if (true) { // Reaper - Remove isClientSide check
+            if (true) { // Beast - Remove isClientSide check
                 if (!this.s()) {
                     this.a(true, true, false);
                 } else if (this.world.D()) {
@@ -145,7 +146,7 @@ public abstract class EntityHuman extends EntityLiving {
         }
 
         super.B_();
-        if (this.activeContainer != null && !this.activeContainer.canUse(this)) { // Reaper - Remove isClientSide check
+        if (this.activeContainer != null && !this.activeContainer.canUse(this)) { // Beast - Remove isClientSide check
             this.closeInventory(org.bukkit.event.inventory.InventoryCloseEvent.Reason.CANT_USE); // Paper
             this.activeContainer = this.defaultContainer;
         }
@@ -154,8 +155,8 @@ public abstract class EntityHuman extends EntityLiving {
             this.extinguish();
         }
 
-        // this.r(); // Reaper - Remove cape animation update
-        if (true) { // Reaper - Remove isClientSide check
+        // this.r(); // Beast - Remove cape animation update
+        if (true) { // Beast - Remove isClientSide check
             this.foodData.a(this);
             this.b(StatisticList.g);
             if (this.isAlive()) {
@@ -191,7 +192,7 @@ public abstract class EntityHuman extends EntityLiving {
     }
 
     private void r() {
-        if (true) return; // Reaper - Remove cape animation update
+        if (true) return; // Beast - Remove cape animation update
         this.bE = this.bH;
         this.bF = this.bI;
         this.bG = this.bJ;
@@ -308,7 +309,7 @@ public abstract class EntityHuman extends EntityLiving {
     }
 
     public void aE() {
-        if (this.isSneaking() && this.isPassenger()) { // Reaper - Remove isClientSide check
+        if (this.isSneaking() && this.isPassenger()) { // Beast - Remove isClientSide check
             this.stopRiding();
             this.setSneaking(false);
         } else {
@@ -358,7 +359,7 @@ public abstract class EntityHuman extends EntityLiving {
         super.n();
         AttributeInstance attributeinstance = this.getAttributeInstance(GenericAttributes.MOVEMENT_SPEED);
 
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             attributeinstance.setValue((double) this.abilities.b());
         }
 
@@ -390,11 +391,11 @@ public abstract class EntityHuman extends EntityLiving {
 
             if (this.isPassenger() && !this.bJ().dead) {
                 axisalignedbb = this.getBoundingBox().b(this.bJ().getBoundingBox()).grow(1.0D, 0.0D, 1.0D);
-                // Reaper start - Fix crash
+                // Beast start - Fix crash
                 if (axisalignedbb.d - axisalignedbb.a > 64 || axisalignedbb.e - axisalignedbb.b > 64 || axisalignedbb.f - axisalignedbb.c > 64) {
                     MinecraftServer.LOGGER.warn("Bounding box of the player " + getName() + " is oversized: " + axisalignedbb);
                     axisalignedbb = this.getBoundingBox().grow(1.0D, 0.5D, 1.0D);
-                } // Reaper end
+                } // Beast end
             } else {
                 axisalignedbb = this.getBoundingBox().grow(1.0D, 0.5D, 1.0D);
             }
@@ -412,7 +413,7 @@ public abstract class EntityHuman extends EntityLiving {
 
         this.j(this.getShoulderEntityLeft());
         this.j(this.getShoulderEntityRight());
-        if ((this.fallDistance > 0.5F || this.isInWater() || this.isPassenger()) || this.abilities.isFlying) { // Reaper - Remove isClientSide check
+        if ((this.fallDistance > 0.5F || this.isInWater() || this.isPassenger()) || this.abilities.isFlying) { // Beast - Remove isClientSide check
             if (!this.world.paperConfig.parrotsHangOnBetter) this.releaseShoulderEntities(); // Paper - Hang on!
         }
 
@@ -680,7 +681,7 @@ public abstract class EntityHuman extends EntityLiving {
 
         this.setScore(nbttagcompound.getInt("Score"));
         if (this.sleeping) {
-            this.bedPosition = this.blockPos; // Reaper - Cache current block pos
+            this.bedPosition = this.blockPos; // Beast - Cache current block pos
             this.a(true, true, false);
         }
 
@@ -757,7 +758,7 @@ public abstract class EntityHuman extends EntityLiving {
             if (this.getHealth() <= 0.0F) {
                 return false;
             } else {
-                if (this.isSleeping()) { // Reaper - Remove isClientSide check
+                if (this.isSleeping()) { // Beast - Remove isClientSide check
                     this.a(true, true, false);
                 }
 
@@ -974,14 +975,14 @@ public abstract class EntityHuman extends EntityLiving {
                     f1 = EnchantmentManager.a(this.getItemInMainHand(), EnumMonsterType.UNDEFINED);
                 }
 
-                float f2 = BeastConfig.oldCombatEnabled ? 1 : this.n(0.5F); // Reaper - Old combat
+                float f2 = BeastConfig.oldCombatEnabled ? 1 : this.n(0.5F); // Beast - Old combat
 
-                // Reaper start - Old combat
+                // Beast start - Old combat
                 if (!BeastConfig.oldCombatEnabled) {
                     f *= 0.2F + f2 * f2 * 0.8F;
                     f1 *= f2;
                 }
-                // Reaper end
+                // Beast end
                 this.ds();
                 if (f > 0.0F || f1 > 0.0F) {
                     boolean flag = f2 > 0.9F;
@@ -990,7 +991,7 @@ public abstract class EntityHuman extends EntityLiving {
                     int i = b0 + EnchantmentManager.b((EntityLiving) this);
 
                     if (this.isSprinting() && flag) {
-                        if (!BeastConfig.oldCombatDisableSounds) // Reaper - Old combat
+                        if (!BeastConfig.oldCombatDisableSounds) // Beast - Old combat
                         sendSoundEffect(this, this.locX, this.locY, this.locZ, SoundEffects.fw, this.bK(), 1.0F, 1.0F); // Paper - send while respecting visibility
                         ++i;
                         flag1 = true;
@@ -998,7 +999,7 @@ public abstract class EntityHuman extends EntityLiving {
 
                     boolean flag2 = flag && this.fallDistance > 0.0F && !this.onGround && !this.m_() && !this.isInWater() && !this.hasEffect(MobEffects.BLINDNESS) && !this.isPassenger() && entity instanceof EntityLiving;
                     flag2 = flag2 && !world.paperConfig.disablePlayerCrits; // Paper
-                    if (!BeastConfig.oldCombatEnabled) // Reaper - Old combat
+                    if (!BeastConfig.oldCombatEnabled) // Beast - Old combat
                     flag2 = flag2 && !this.isSprinting();
                     if (flag2) {
                         f *= 1.5F;
@@ -1008,7 +1009,7 @@ public abstract class EntityHuman extends EntityLiving {
                     boolean flag3 = false;
                     double d0 = (double) (this.J - this.I);
 
-                    if (!BeastConfig.oldCombatEnabled) // Reaper - Old combat
+                    if (!BeastConfig.oldCombatEnabled) // Beast - Old combat
                     if (flag && !flag2 && !flag1 && this.onGround && d0 < (double) this.cy()) {
                         ItemStack itemstack = this.b(EnumHand.MAIN_HAND);
 
@@ -1043,7 +1044,7 @@ public abstract class EntityHuman extends EntityLiving {
 
                     if (flag5) {
                         if (i > 0) {
-                            // Reaper start - Old combat
+                            // Beast start - Old combat
                             if (BeastConfig.oldCombatEnabled) {
                                 entity.f(-MathHelper.sin(this.yaw * 0.017453292F) * i * 0.5F, 0.1D, MathHelper.cos(this.yaw * 0.017453292F) * i * 0.5F);
                             } else {
@@ -1053,7 +1054,7 @@ public abstract class EntityHuman extends EntityLiving {
                                     entity.f(-MathHelper.sin(this.yaw * 0.017453292F) * (float) i * 0.5F, 0.1D, MathHelper.cos(this.yaw * 0.017453292F) * (float) i * 0.5F);
                                 }
                             }
-                            // Reaper end
+                            // Beast end
 
                             this.motX *= 0.6D;
                             this.motZ *= 0.6D;
@@ -1111,12 +1112,12 @@ public abstract class EntityHuman extends EntityLiving {
                         }
 
                         if (flag2) {
-                            if (!BeastConfig.oldCombatDisableSounds) // Reaper - Old combat
+                            if (!BeastConfig.oldCombatDisableSounds) // Beast - Old combat
                             sendSoundEffect(this, this.locX, this.locY, this.locZ, SoundEffects.fv, this.bK(), 1.0F, 1.0F); // Paper - send while respecting visibility
                             this.a(entity);
                         }
 
-                        if (!BeastConfig.oldCombatDisableSounds) // Reaper - Old combat
+                        if (!BeastConfig.oldCombatDisableSounds) // Beast - Old combat
                         if (!flag2 && !flag3) {
                             if (flag) {
                                 sendSoundEffect(this, this.locX, this.locY, this.locZ, SoundEffects.fy, this.bK(), 1.0F, 1.0F); // Paper - send while respecting visibility
@@ -1168,7 +1169,7 @@ public abstract class EntityHuman extends EntityLiving {
                                 // CraftBukkit end
                             }
 
-                            if (!BeastConfig.oldCombatDisableDamageIndicator) // Reaper - Old combat
+                            if (!BeastConfig.oldCombatDisableDamageIndicator) // Beast - Old combat
                             if (this.world instanceof WorldServer && f5 > 2.0F) {
                                 int k = (int) ((double) f5 * 0.5D);
 
@@ -1178,18 +1179,18 @@ public abstract class EntityHuman extends EntityLiving {
 
                         this.applyExhaustion(world.spigotConfig.combatExhaustion); // Spigot - Change to use configurable value
                     } else {
-                        if (!BeastConfig.oldCombatDisableSounds) // Reaper - Old combat
+                        if (!BeastConfig.oldCombatDisableSounds) // Beast - Old combat
                         sendSoundEffect(this, this.locX, this.locY, this.locZ, SoundEffects.fx, this.bK(), 1.0F, 1.0F); // Paper - send while respecting visibility
                         if (flag4) {
                             entity.extinguish();
                         }
                         // CraftBukkit start - resync on cancelled event
                         if (this instanceof EntityPlayer) {
-                            // Reaper start - Reduce inventory updates
+                            // Beast start - Reduce inventory updates
                             if (BeastConfig.reduceInventoryUpdates) {
-                                com.github.ruviolence.reaper.InventoryUpdateHelper.onLeftClick((EntityPlayer) this, EnumHand.MAIN_HAND, this.b(EnumHand.MAIN_HAND));
+                                InventoryUpdateHelper.onLeftClick((EntityPlayer) this, EnumHand.MAIN_HAND, this.b(EnumHand.MAIN_HAND));
                             } else
-                            // Reaper end - Reduce inventory updates
+                            // Beast end - Reduce inventory updates
                             ((EntityPlayer) this).getBukkitEntity().updateInventory();
                         }
                         // CraftBukkit end
@@ -1201,7 +1202,7 @@ public abstract class EntityHuman extends EntityLiving {
     }
 
     public void m(boolean flag) {
-        if (BeastConfig.oldCombatBlockingModifier) return; // Reaper - Old combat
+        if (BeastConfig.oldCombatBlockingModifier) return; // Beast - Old combat
         float f = 0.25F + (float) EnchantmentManager.getDigSpeedEnchantmentLevel(this) * 0.05F;
 
         if (flag) {
@@ -1254,7 +1255,7 @@ public abstract class EntityHuman extends EntityLiving {
     public EntityHuman.EnumBedResult a(BlockPosition blockposition) {
         EnumDirection enumdirection = (EnumDirection) this.world.getType(blockposition).get(BlockFacingHorizontal.FACING);
 
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             if (this.isSleeping() || !this.isAlive()) {
                 return EntityHuman.EnumBedResult.OTHER_PROBLEM;
             }
@@ -1304,7 +1305,7 @@ public abstract class EntityHuman extends EntityLiving {
             float f = 0.5F + (float) enumdirection.getAdjacentX() * 0.4F;
             float f1 = 0.5F + (float) enumdirection.getAdjacentZ() * 0.4F;
 
-            // this.a(enumdirection); // Reaper - Clientside sleep render offset
+            // this.a(enumdirection); // Beast - Clientside sleep render offset
             this.setPosition((double) ((float) blockposition.getX() + f), (double) ((float) blockposition.getY() + 0.6875F), (double) ((float) blockposition.getZ() + f1));
         } else {
             this.setPosition((double) ((float) blockposition.getX() + 0.5F), (double) ((float) blockposition.getY() + 0.6875F), (double) ((float) blockposition.getZ() + 0.5F));
@@ -1316,7 +1317,7 @@ public abstract class EntityHuman extends EntityLiving {
         this.motX = 0.0D;
         this.motY = 0.0D;
         this.motZ = 0.0D;
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             this.world.everyoneSleeping();
         }
 
@@ -1334,7 +1335,7 @@ public abstract class EntityHuman extends EntityLiving {
     }
 
     private void a(EnumDirection enumdirection) {
-        if (true) return; // Reaper - Clientside sleep render offset
+        if (true) return; // Beast - Clientside sleep render offset
         this.bM = -1.8F * (float) enumdirection.getAdjacentX();
         this.bN = -1.8F * (float) enumdirection.getAdjacentZ();
     }
@@ -1355,7 +1356,7 @@ public abstract class EntityHuman extends EntityLiving {
         }
 
         this.sleeping = false;
-        if (flag1) { // Reaper - Remove isClientSide check
+        if (flag1) { // Beast - Remove isClientSide check
             this.world.everyoneSleeping();
         }
 
@@ -1650,7 +1651,7 @@ public abstract class EntityHuman extends EntityLiving {
 
     public void applyExhaustion(float f) {
         if (!this.abilities.isInvulnerable) {
-            if (true) { // Reaper - Remove isClientSide check
+            if (true) { // Beast - Remove isClientSide check
                 this.foodData.a(f);
             }
 
@@ -1717,7 +1718,7 @@ public abstract class EntityHuman extends EntityLiving {
     }
 
     public ItemStack getEquipment(EnumItemSlot enumitemslot) {
-        // Reaper start - Optimize
+        // Beast start - Optimize
         /*
         return enumitemslot == EnumItemSlot.MAINHAND ? this.inventory.getItemInHand() : (enumitemslot == EnumItemSlot.OFFHAND ? (ItemStack) this.inventory.extraSlots.get(0) : (enumitemslot.a() == EnumItemSlot.Function.ARMOR ? (ItemStack) this.inventory.armor.get(enumitemslot.b()) : ItemStack.a));
         */
@@ -1728,7 +1729,7 @@ public abstract class EntityHuman extends EntityLiving {
                 return this.inventory.extraSlots.get(0);
         }
         return enumitemslot.a() == EnumItemSlot.Function.ARMOR ? this.inventory.armor.get(enumitemslot.b()) : ItemStack.a;
-        // Reaper end
+        // Beast end
     }
 
     public void setSlot(EnumItemSlot enumitemslot, ItemStack itemstack) {
@@ -1807,7 +1808,7 @@ public abstract class EntityHuman extends EntityLiving {
     }
     // Paper - Moved to new method that now returns entity, and properly null checks
     private Entity spawnEntityFromShoulder0(@Nullable NBTTagCompound nbttagcompound) { // CraftBukkit void->boolean - Paper - return Entity
-        if (nbttagcompound != null && !nbttagcompound.isEmpty()) { // Paper - null check // Reaper - Remove isClientSide check
+        if (nbttagcompound != null && !nbttagcompound.isEmpty()) { // Paper - null check // Beast - Remove isClientSide check
             Entity entity = EntityTypes.a(nbttagcompound, this.world);
             if (entity == null) { // Paper - null check
                 return null;
@@ -1988,7 +1989,7 @@ public abstract class EntityHuman extends EntityLiving {
     }
 
     public float n(float f) {
-        if (BeastConfig.oldCombatEnabled) return 1; // Reaper - Old combat
+        if (BeastConfig.oldCombatEnabled) return 1; // Beast - Old combat
         return MathHelper.a(((float) this.aE + f) / this.dr(), 0.0F, 1.0F);
     }
 
diff --git a/src/main/java/net/minecraft/server/EntityIllagerIllusioner.java b/src/main/java/net/minecraft/server/EntityIllagerIllusioner.java
index 1426acffe1af74563da5e12ba2ff7010578b3028..4c6cbcd02e34f8df07fb9a894aede2d33e38689b 100644
--- a/src/main/java/net/minecraft/server/EntityIllagerIllusioner.java
+++ b/src/main/java/net/minecraft/server/EntityIllagerIllusioner.java
@@ -4,23 +4,23 @@ import javax.annotation.Nullable;
 
 public class EntityIllagerIllusioner extends EntityIllagerWizard implements IRangedEntity {
 
-    /* // Reaper start - Clientside code
+    /* // Beast start - Clientside code
     private int c;
     private final Vec3D[][] bx;
-    */ // Reaper end
+    */ // Beast end
 
     public EntityIllagerIllusioner(World world) {
         super(world);
         this.setSize(0.6F, 1.95F);
         this.b_ = 5;
-        /* // Reaper start - Clientside code
+        /* // Beast start - Clientside code
         this.bx = new Vec3D[2][4];
 
         for (int i = 0; i < 4; ++i) {
             this.bx[0][i] = new Vec3D(0.0D, 0.0D, 0.0D);
             this.bx[1][i] = new Vec3D(0.0D, 0.0D, 0.0D);
         }
-        */ // Reaper end
+        */ // Beast end
 
     }
 
@@ -62,7 +62,7 @@ public class EntityIllagerIllusioner extends EntityIllagerWizard implements IRan
 
     public void n() {
         super.n();
-        /* // Reaper start - Clientside code
+        /* // Beast start - Clientside code
         if (this.world.isClientSide && this.isInvisible()) {
             --this.c;
             if (this.c < 0) {
@@ -97,7 +97,7 @@ public class EntityIllagerIllusioner extends EntityIllagerWizard implements IRan
                 this.world.a(this.locX, this.locY, this.locZ, SoundEffects.dg, this.bK(), 1.0F, 1.0F, false);
             }
         }
-        */ // Reaper end
+        */ // Beast end
 
     }
 
@@ -163,7 +163,7 @@ public class EntityIllagerIllusioner extends EntityIllagerWizard implements IRan
         }
 
         public boolean a() {
-            return !super.a() ? false : (EntityIllagerIllusioner.this.getGoalTarget() == null ? false : (EntityIllagerIllusioner.this.getGoalTarget().getId() == this.b ? false : EntityIllagerIllusioner.this.world.D(EntityIllagerIllusioner.this.blockPos).a((float) EnumDifficulty.NORMAL.ordinal()))); // Reaper - Cache current block pos
+            return !super.a() ? false : (EntityIllagerIllusioner.this.getGoalTarget() == null ? false : (EntityIllagerIllusioner.this.getGoalTarget().getId() == this.b ? false : EntityIllagerIllusioner.this.world.D(EntityIllagerIllusioner.this.blockPos).a((float) EnumDifficulty.NORMAL.ordinal()))); // Beast - Cache current block pos
         }
 
         public void c() {
diff --git a/src/main/java/net/minecraft/server/EntityIllagerWizard.java b/src/main/java/net/minecraft/server/EntityIllagerWizard.java
index 4376d57c5fb051711e77d88b698d0360261c1c58..d5c9f85e6cfc6ca5f3cff0d9b7088d6d5f47cfaf 100644
--- a/src/main/java/net/minecraft/server/EntityIllagerWizard.java
+++ b/src/main/java/net/minecraft/server/EntityIllagerWizard.java
@@ -29,7 +29,7 @@ public abstract class EntityIllagerWizard extends EntityIllagerAbstract {
     }
 
     public boolean dn() {
-        return this.b > 0; // Reaper - Remove isClientSide check
+        return this.b > 0; // Beast - Remove isClientSide check
     }
 
     public void setSpell(EntityIllagerWizard.Spell entityillagerwizard_spell) {
@@ -38,7 +38,7 @@ public abstract class EntityIllagerWizard extends EntityIllagerAbstract {
     }
 
     public EntityIllagerWizard.Spell getSpell() {
-        return this.bx; // Reaper - Remove isClientSide check
+        return this.bx; // Beast - Remove isClientSide check
     }
 
     protected void M() {
@@ -51,7 +51,7 @@ public abstract class EntityIllagerWizard extends EntityIllagerAbstract {
 
     public void B_() {
         super.B_();
-        if (false && this.dn()) { // Reaper - Remove isClientSide check
+        if (false && this.dn()) { // Beast - Remove isClientSide check
             EntityIllagerWizard.Spell entityillagerwizard_spell = this.getSpell();
             double d0 = entityillagerwizard_spell.h[0];
             double d1 = entityillagerwizard_spell.h[1];
@@ -76,7 +76,7 @@ public abstract class EntityIllagerWizard extends EntityIllagerAbstract {
 
         NONE(0, 0.0D, 0.0D, 0.0D), SUMMON_VEX(1, 0.7D, 0.7D, 0.8D), FANGS(2, 0.4D, 0.3D, 0.35D), WOLOLO(3, 0.7D, 0.5D, 0.2D), DISAPPEAR(4, 0.3D, 0.3D, 0.8D), BLINDNESS(5, 0.1D, 0.1D, 0.2D);
 
-        public static final EntityIllagerWizard.Spell[] VALUES = values(); // Reaper - Single values array
+        public static final EntityIllagerWizard.Spell[] VALUES = values(); // Beast - Single values array
         private final int g;
         private final double[] h;
 
@@ -86,7 +86,7 @@ public abstract class EntityIllagerWizard extends EntityIllagerAbstract {
         }
 
         public static EntityIllagerWizard.Spell a(int i) {
-            EntityIllagerWizard.Spell[] aentityillagerwizard_spell = VALUES; // Reaper - Single values array
+            EntityIllagerWizard.Spell[] aentityillagerwizard_spell = VALUES; // Beast - Single values array
             int j = aentityillagerwizard_spell.length;
 
             for (int k = 0; k < j; ++k) {
diff --git a/src/main/java/net/minecraft/server/EntityInsentient.java b/src/main/java/net/minecraft/server/EntityInsentient.java
index 4faae5384f91a992b6aa2a6b7da69b7c7fe7c3b5..6bcd881b9600efc6a95ec0005490e710c80526d8 100644
--- a/src/main/java/net/minecraft/server/EntityInsentient.java
+++ b/src/main/java/net/minecraft/server/EntityInsentient.java
@@ -55,11 +55,11 @@ public abstract class EntityInsentient extends EntityLiving {
         this.by = NonNullList.a(4, ItemStack.a);
         this.dropChanceArmor = new float[4];
         this.bB = Maps.newEnumMap(PathType.class);
-        // Reaper start - Optimize
+        // Beast start - Optimize
         MethodProfiler profiler = world != null && world.methodProfiler != null ? world.methodProfiler : null;
         this.goalSelector = new PathfinderGoalSelector(profiler);
         this.targetSelector = new PathfinderGoalSelector(profiler);
-        // Reaper end
+        // Beast end
         this.lookController = new ControllerLook(this);
         this.moveController = new ControllerMove(this);
         this.g = new ControllerJump(this);
@@ -68,7 +68,7 @@ public abstract class EntityInsentient extends EntityLiving {
         this.bw = new EntitySenses(this);
         Arrays.fill(this.dropChanceArmor, 0.085F);
         Arrays.fill(this.dropChanceHand, 0.085F);
-        if (world != null) { // Reaper - Remove isClientSide check
+        if (world != null) { // Beast - Remove isClientSide check
             this.r();
         }
 
@@ -188,13 +188,13 @@ public abstract class EntityInsentient extends EntityLiving {
 
     public void Y() {
         super.Y();
-        // this.world.methodProfiler.a("mobBaseTick"); // Reaper - Remove MethodProfiler
+        // this.world.methodProfiler.a("mobBaseTick"); // Beast - Remove MethodProfiler
         if (this.isAlive() && this.random.nextInt(1000) < this.a_++) {
             this.p();
             this.D();
         }
 
-        // this.world.methodProfiler.b(); // Reaper - Remove MethodProfiler
+        // this.world.methodProfiler.b(); // Beast - Remove MethodProfiler
     }
 
     protected void c(DamageSource damagesource) {
@@ -231,7 +231,7 @@ public abstract class EntityInsentient extends EntityLiving {
     }
 
     public void doSpawnEffect() {
-        if (false) { // Reaper - Remove isClientSide check
+        if (false) { // Beast - Remove isClientSide check
             for (int i = 0; i < 20; ++i) {
                 double d0 = this.random.nextGaussian() * 0.02D;
                 double d1 = this.random.nextGaussian() * 0.02D;
@@ -248,7 +248,7 @@ public abstract class EntityInsentient extends EntityLiving {
 
     public void B_() {
         super.B_();
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             this.cZ();
             if (this.ticksLived % 5 == 0) {
                 boolean flag = !(this.bE() instanceof EntityInsentient);
@@ -309,7 +309,7 @@ public abstract class EntityInsentient extends EntityLiving {
         for (Iterator iterator = this.by.iterator(); iterator.hasNext(); nbttaglist.add(nbttagcompound1)) {
             ItemStack itemstack = (ItemStack) iterator.next();
 
-            nbttagcompound1 = new NBTTagCompound(4); // Reaper - Use initial capacity
+            nbttagcompound1 = new NBTTagCompound(4); // Beast - Use initial capacity
             if (!itemstack.isEmpty()) {
                 itemstack.save(nbttagcompound1);
             }
@@ -323,7 +323,7 @@ public abstract class EntityInsentient extends EntityLiving {
         for (Iterator iterator1 = this.bx.iterator(); iterator1.hasNext(); nbttaglist1.add(nbttagcompound2)) {
             ItemStack itemstack1 = (ItemStack) iterator1.next();
 
-            nbttagcompound2 = new NBTTagCompound(4); // Reaper - Use initial capacity
+            nbttagcompound2 = new NBTTagCompound(4); // Beast - Use initial capacity
             if (!itemstack1.isEmpty()) {
                 itemstack1.save(nbttagcompound2);
             }
@@ -357,7 +357,7 @@ public abstract class EntityInsentient extends EntityLiving {
         nbttagcompound.set("HandDropChances", nbttaglist3);
         nbttagcompound.setBoolean("Leashed", this.bE);
         if (this.leashHolder != null) {
-            nbttagcompound2 = new NBTTagCompound(5); // Reaper - Use initial capacity
+            nbttagcompound2 = new NBTTagCompound(5); // Beast - Use initial capacity
             if (this.leashHolder instanceof EntityLiving) {
                 UUID uuid = this.leashHolder.getUniqueID();
 
@@ -509,8 +509,8 @@ public abstract class EntityInsentient extends EntityLiving {
 
     public void n() {
         super.n();
-        // this.world.methodProfiler.a("looting"); // Reaper - Remove MethodProfiler
-        if (this.cX() && !this.aU && this.world.getGameRules().getBoolean("mobGriefing")) { // Reaper - Remove isClientSide check
+        // this.world.methodProfiler.a("looting"); // Beast - Remove MethodProfiler
+        if (this.cX() && !this.aU && this.world.getGameRules().getBoolean("mobGriefing")) { // Beast - Remove isClientSide check
             List list = this.world.a(EntityItem.class, this.getBoundingBox().grow(1.0D, 0.0D, 1.0D));
             Iterator iterator = list.iterator();
 
@@ -529,7 +529,7 @@ public abstract class EntityInsentient extends EntityLiving {
             }
         }
 
-        // this.world.methodProfiler.b(); // Reaper - Remove MethodProfiler
+        // this.world.methodProfiler.b(); // Beast - Remove MethodProfiler
     }
 
     protected void a(EntityItem entityitem) {
@@ -657,9 +657,9 @@ public abstract class EntityInsentient extends EntityLiving {
 
     protected final void doTick() {
         ++this.ticksFarFromPlayer;
-        // this.world.methodProfiler.a("checkDespawn"); // Reaper - Remove MethodProfiler
+        // this.world.methodProfiler.a("checkDespawn"); // Beast - Remove MethodProfiler
         this.L();
-        // this.world.methodProfiler.b(); // Reaper - Remove MethodProfiler
+        // this.world.methodProfiler.b(); // Beast - Remove MethodProfiler
         // Spigot Start
         if ( this.fromMobSpawner )
         {
@@ -672,21 +672,21 @@ public abstract class EntityInsentient extends EntityLiving {
             return;
         }
         // Spigot End
-        // this.world.methodProfiler.a("sensing"); // Reaper - Remove MethodProfiler
+        // this.world.methodProfiler.a("sensing"); // Beast - Remove MethodProfiler
         this.bw.a();
-        // this.world.methodProfiler.b(); // Reaper - Remove MethodProfiler
-        // this.world.methodProfiler.a("targetSelector"); // Reaper - Remove MethodProfiler
+        // this.world.methodProfiler.b(); // Beast - Remove MethodProfiler
+        // this.world.methodProfiler.a("targetSelector"); // Beast - Remove MethodProfiler
         this.targetSelector.a();
-        // this.world.methodProfiler.b(); // Reaper - Remove MethodProfiler
-        // this.world.methodProfiler.a("goalSelector"); // Reaper - Remove MethodProfiler
+        // this.world.methodProfiler.b(); // Beast - Remove MethodProfiler
+        // this.world.methodProfiler.a("goalSelector"); // Beast - Remove MethodProfiler
         this.goalSelector.a();
-        // this.world.methodProfiler.b(); // Reaper - Remove MethodProfiler
-        // this.world.methodProfiler.a("navigation"); // Reaper - Remove MethodProfiler
+        // this.world.methodProfiler.b(); // Beast - Remove MethodProfiler
+        // this.world.methodProfiler.a("navigation"); // Beast - Remove MethodProfiler
         this.navigation.d();
-        // this.world.methodProfiler.b(); // Reaper - Remove MethodProfiler
-        // this.world.methodProfiler.a("mob tick"); // Reaper - Remove MethodProfiler
+        // this.world.methodProfiler.b(); // Beast - Remove MethodProfiler
+        // this.world.methodProfiler.a("mob tick"); // Beast - Remove MethodProfiler
         this.M();
-        // this.world.methodProfiler.b(); // Reaper - Remove MethodProfiler
+        // this.world.methodProfiler.b(); // Beast - Remove MethodProfiler
         if (this.isPassenger() && this.bJ() instanceof EntityInsentient) {
             EntityInsentient entityinsentient = (EntityInsentient) this.bJ();
 
@@ -694,15 +694,15 @@ public abstract class EntityInsentient extends EntityLiving {
             entityinsentient.getControllerMove().a(this.getControllerMove());
         }
 
-        // this.world.methodProfiler.a("controls"); // Reaper - Remove MethodProfiler
-        // this.world.methodProfiler.a("move"); // Reaper - Remove MethodProfiler
+        // this.world.methodProfiler.a("controls"); // Beast - Remove MethodProfiler
+        // this.world.methodProfiler.a("move"); // Beast - Remove MethodProfiler
         this.moveController.a();
-        // this.world.methodProfiler.c("look"); // Reaper - Remove MethodProfiler
+        // this.world.methodProfiler.c("look"); // Beast - Remove MethodProfiler
         this.lookController.a();
-        // this.world.methodProfiler.c("jump"); // Reaper - Remove MethodProfiler
+        // this.world.methodProfiler.c("jump"); // Beast - Remove MethodProfiler
         this.g.b();
-        // this.world.methodProfiler.b(); // Reaper - Remove MethodProfiler
-        // this.world.methodProfiler.b(); // Reaper - Remove MethodProfiler
+        // this.world.methodProfiler.b(); // Beast - Remove MethodProfiler
+        // this.world.methodProfiler.b(); // Beast - Remove MethodProfiler
     }
 
     protected void M() {}
@@ -751,7 +751,7 @@ public abstract class EntityInsentient extends EntityLiving {
     }
 
     public boolean P() {
-        IBlockData iblockdata = this.world.getType((this.blockPos).down()); // Reaper - Cache current block pos
+        IBlockData iblockdata = this.world.getType((this.blockPos).down()); // Beast - Cache current block pos
 
         return iblockdata.a((Entity) this);
     }
@@ -813,7 +813,7 @@ public abstract class EntityInsentient extends EntityLiving {
     }
 
     protected void dropEquipment(boolean flag, int i) {
-        EnumItemSlot[] aenumitemslot = EnumItemSlot.VALUES; // Reaper - Single values array
+        EnumItemSlot[] aenumitemslot = EnumItemSlot.VALUES; // Beast - Single values array
         int j = aenumitemslot.length;
 
         for (int k = 0; k < j; ++k) {
@@ -865,7 +865,7 @@ public abstract class EntityInsentient extends EntityLiving {
             }
 
             boolean flag = true;
-            EnumItemSlot[] aenumitemslot = EnumItemSlot.VALUES; // Reaper - Single values array
+            EnumItemSlot[] aenumitemslot = EnumItemSlot.VALUES; // Beast - Single values array
             int j = aenumitemslot.length;
 
             for (int k = 0; k < j; ++k) {
@@ -963,7 +963,7 @@ public abstract class EntityInsentient extends EntityLiving {
             this.setSlot(EnumItemSlot.MAINHAND, EnchantmentManager.a(this.random, this.getItemInMainHand(), (int) (5.0F + f * (float) this.random.nextInt(18)), false));
         }
 
-        EnumItemSlot[] aenumitemslot = EnumItemSlot.VALUES; // Reaper - Single values array
+        EnumItemSlot[] aenumitemslot = EnumItemSlot.VALUES; // Beast - Single values array
         int i = aenumitemslot.length;
 
         for (int j = 0; j < i; ++j) {
@@ -1079,13 +1079,13 @@ public abstract class EntityInsentient extends EntityLiving {
         if (this.bE) {
             this.bE = false;
             this.leashHolder = null;
-            if (flag1) { // Reaper - Remove isClientSide check
+            if (flag1) { // Beast - Remove isClientSide check
                 this.forceDrops = true; // CraftBukkit
                 this.a(Items.LEAD, 1);
                 this.forceDrops = false; // CraftBukkit
             }
 
-            if (flag && this.world instanceof WorldServer) { // Reaper - Remove isClientSide check
+            if (flag && this.world instanceof WorldServer) { // Beast - Remove isClientSide check
                 ((WorldServer) this.world).getTracker().a((Entity) this, (Packet) (new PacketPlayOutAttachEntity(this, (Entity) null)));
             }
         }
@@ -1107,7 +1107,7 @@ public abstract class EntityInsentient extends EntityLiving {
     public void setLeashHolder(Entity entity, boolean flag) {
         this.bE = true;
         this.leashHolder = entity;
-        if (flag && this.world instanceof WorldServer) { // Reaper - Remove isClientSide check
+        if (flag && this.world instanceof WorldServer) { // Beast - Remove isClientSide check
             ((WorldServer) this.world).getTracker().a((Entity) this, (Packet) (new PacketPlayOutAttachEntity(this, this.leashHolder)));
         }
 
@@ -1200,7 +1200,7 @@ public abstract class EntityInsentient extends EntityLiving {
     }
 
     public boolean cC() {
-        return /*super.cC() &&*/ !this.isNoAI(); // Reaper - Remove isClientSide check
+        return /*super.cC() &&*/ !this.isNoAI(); // Beast - Remove isClientSide check
     }
 
     public void setNoAI(boolean flag) {
diff --git a/src/main/java/net/minecraft/server/EntityIronGolem.java b/src/main/java/net/minecraft/server/EntityIronGolem.java
index cb696def76d8afd2269e84dcfb5e3e69bf05f1cc..2d68e7235d7562ac609d91d272f4b7e2297dbfd0 100644
--- a/src/main/java/net/minecraft/server/EntityIronGolem.java
+++ b/src/main/java/net/minecraft/server/EntityIronGolem.java
@@ -47,7 +47,7 @@ public class EntityIronGolem extends EntityGolem {
     protected void M() {
         if (--this.c <= 0) {
             this.c = 70 + this.random.nextInt(50);
-            this.b = this.world.ak().getClosestVillage(this.blockPos, 32); // Reaper - Cache current block pos
+            this.b = this.world.ak().getClosestVillage(this.blockPos, 32); // Beast - Cache current block pos
             if (this.b == null) {
                 this.di();
             } else {
@@ -89,7 +89,7 @@ public class EntityIronGolem extends EntityGolem {
             --this.by;
         }
 
-        /* // Reaper start - Clientside particles
+        /* // Beast start - Clientside particles
         if (this.motX * this.motX + this.motZ * this.motZ > 2.500000277905201E-7D && this.random.nextInt(5) == 0) {
             int i = MathHelper.floor(this.locX);
             int j = MathHelper.floor(this.locY - 0.20000000298023224D);
@@ -100,7 +100,7 @@ public class EntityIronGolem extends EntityGolem {
                 this.world.addParticle(EnumParticle.BLOCK_CRACK, this.locX + ((double) this.random.nextFloat() - 0.5D) * (double) this.width, this.getBoundingBox().b + 0.1D, this.locZ + ((double) this.random.nextFloat() - 0.5D) * (double) this.width, 4.0D * ((double) this.random.nextFloat() - 0.5D), 0.5D, ((double) this.random.nextFloat() - 0.5D) * 4.0D, new int[] { Block.getCombinedId(iblockdata)});
             }
         }
-        */ // Reaper end
+        */ // Beast end
 
     }
 
diff --git a/src/main/java/net/minecraft/server/EntityItem.java b/src/main/java/net/minecraft/server/EntityItem.java
index cff8f29b3bde3bfc16f8437000f11ab30030f12a..71aaefee9cd194bdf8c1e2086420fcf23cfe41af 100644
--- a/src/main/java/net/minecraft/server/EntityItem.java
+++ b/src/main/java/net/minecraft/server/EntityItem.java
@@ -33,7 +33,7 @@ public class EntityItem extends Entity implements HopperPusher {
     public EntityItem(World world, double d0, double d1, double d2) {
         super(world);
         this.f = 5;
-        // this.a = (float) (Math.random() * 3.141592653589793D * 2.0D); // Reaper - Unused
+        // this.a = (float) (Math.random() * 3.141592653589793D * 2.0D); // Beast - Unused
         this.setSize(0.25F, 0.25F);
         this.setPosition(d0, d1, d2);
         this.yaw = (float) (Math.random() * 360.0D);
@@ -54,7 +54,7 @@ public class EntityItem extends Entity implements HopperPusher {
     public EntityItem(World world) {
         super(world);
         this.f = 5;
-        // this.a = (float) (Math.random() * 3.141592653589793D * 2.0D); // Reaper - Unused
+        // this.a = (float) (Math.random() * 3.141592653589793D * 2.0D); // Beast - Unused
         this.setSize(0.25F, 0.25F);
         this.setItemStack(ItemStack.a);
     }
@@ -88,7 +88,7 @@ public class EntityItem extends Entity implements HopperPusher {
                 this.motY -= 0.03999999910593033D;
             }
 
-            if (false) { // Reaper - Remove isClientSide check
+            if (false) { // Beast - Remove isClientSide check
                 this.noclip = false;
             } else {
                 this.noclip = this.i(this.locX, (this.getBoundingBox().b + this.getBoundingBox().e) / 2.0D, this.locZ);
@@ -98,14 +98,14 @@ public class EntityItem extends Entity implements HopperPusher {
             boolean flag = (int) this.lastX != (int) this.locX || (int) this.lastY != (int) this.locY || (int) this.lastZ != (int) this.locZ;
 
             if (flag || this.ticksLived % 25 == 0) {
-                if (this.world.getType(this.blockPos).getMaterial() == Material.LAVA) { // Reaper - Cache current block pos
+                if (this.world.getType(this.blockPos).getMaterial() == Material.LAVA) { // Beast - Cache current block pos
                     this.motY = 0.20000000298023224D;
                     this.motX = (double) ((this.random.nextFloat() - this.random.nextFloat()) * 0.2F);
                     this.motZ = (double) ((this.random.nextFloat() - this.random.nextFloat()) * 0.2F);
                     this.a(SoundEffects.bR, 0.4F, 2.0F + this.random.nextFloat() * 0.4F);
                 }
 
-                if (true) { // Reaper - Remove isClientSide check
+                if (true) { // Beast - Remove isClientSide check
                     this.x();
                 }
             }
@@ -130,7 +130,7 @@ public class EntityItem extends Entity implements HopperPusher {
             // Craftbukkit end */
 
             this.aq();
-            if (true) { // Reaper - Remove isClientSide check
+            if (true) { // Beast - Remove isClientSide check
                 double d3 = this.motX - d0;
                 double d4 = this.motY - d1;
                 double d5 = this.motZ - d2;
@@ -141,7 +141,7 @@ public class EntityItem extends Entity implements HopperPusher {
                 }
             }
 
-            if (this.age >= world.spigotConfig.itemDespawnRate) { // Spigot // Reaper - Remove isClientSide check
+            if (this.age >= world.spigotConfig.itemDespawnRate) { // Spigot // Beast - Remove isClientSide check
                 // CraftBukkit start - fire ItemDespawnEvent
                 if (org.bukkit.craftbukkit.event.CraftEventFactory.callItemDespawnEvent(this).isCancelled()) {
                     this.age = 0;
@@ -166,7 +166,7 @@ public class EntityItem extends Entity implements HopperPusher {
         this.lastTick = MinecraftServer.currentTick;
         // CraftBukkit end
 
-        if (this.age >= world.spigotConfig.itemDespawnRate) { // Spigot // Reaper - Remove isClientSide check
+        if (this.age >= world.spigotConfig.itemDespawnRate) { // Spigot // Beast - Remove isClientSide check
             // CraftBukkit start - fire ItemDespawnEvent
             if (org.bukkit.craftbukkit.event.CraftEventFactory.callItemDespawnEvent(this).isCancelled()) {
                 this.age = 0;
@@ -198,7 +198,7 @@ public class EntityItem extends Entity implements HopperPusher {
     }
 
     private boolean a(EntityItem entityitem) {
-        /* // Reaper start - Rework to optimize
+        /* // Beast start - Rework to optimize
         if (entityitem == this) {
             return false;
         } else if (entityitem.isAlive() && this.isAlive()) {
@@ -278,7 +278,7 @@ public class EntityItem extends Entity implements HopperPusher {
         entityitem.die();
         // Spigot end
         return true;
-        // Reaper end
+        // Beast end
     }
 
     public void j() {
@@ -341,7 +341,7 @@ public class EntityItem extends Entity implements HopperPusher {
         }
 
         if (!this.getItemStack().isEmpty()) {
-            nbttagcompound.set("Item", this.getItemStack().save(new NBTTagCompound(4))); // Reaper - Use initial capacity
+            nbttagcompound.set("Item", this.getItemStack().save(new NBTTagCompound(4))); // Beast - Use initial capacity
         }
 
     }
@@ -371,7 +371,7 @@ public class EntityItem extends Entity implements HopperPusher {
     }
 
     public void d(EntityHuman entityhuman) {
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             ItemStack itemstack = this.getItemStack();
             Item item = itemstack.getItem();
             int i = itemstack.getCount();
@@ -457,7 +457,7 @@ public class EntityItem extends Entity implements HopperPusher {
     public Entity b(int i) {
         Entity entity = super.b(i);
 
-        if (entity instanceof EntityItem) { // Reaper - Remove isClientSide check
+        if (entity instanceof EntityItem) { // Beast - Remove isClientSide check
             ((EntityItem) entity).x();
         }
 
diff --git a/src/main/java/net/minecraft/server/EntityItemFrame.java b/src/main/java/net/minecraft/server/EntityItemFrame.java
index 189d8b400485c6d12fbc171a37f2566c681b6658..6d33665af23da9f9945b3ccec1825ac6c88f26e8 100644
--- a/src/main/java/net/minecraft/server/EntityItemFrame.java
+++ b/src/main/java/net/minecraft/server/EntityItemFrame.java
@@ -34,7 +34,7 @@ public class EntityItemFrame extends EntityHanging {
         if (this.isInvulnerable(damagesource)) {
             return false;
         } else if (!damagesource.isExplosion() && !this.getItem().isEmpty()) {
-            if (true) { // Reaper - Remove isClientSide check
+            if (true) { // Beast - Remove isClientSide check
                 // CraftBukkit start - fire EntityDamageEvent
                 if (org.bukkit.craftbukkit.event.CraftEventFactory.handleNonLivingEntityDamageEvent(this, damagesource, f, false) || this.dead) {
                     return true;
@@ -170,7 +170,7 @@ public class EntityItemFrame extends EntityHanging {
 
     public void b(NBTTagCompound nbttagcompound) {
         if (!this.getItem().isEmpty()) {
-            nbttagcompound.set("Item", this.getItem().save(new NBTTagCompound(4))); // Reaper - Use initial capacity
+            nbttagcompound.set("Item", this.getItem().save(new NBTTagCompound(4))); // Beast - Use initial capacity
             nbttagcompound.setByte("ItemRotation", (byte) this.getRotation());
             nbttagcompound.setFloat("ItemDropChance", this.e);
         }
@@ -195,7 +195,7 @@ public class EntityItemFrame extends EntityHanging {
     public boolean b(EntityHuman entityhuman, EnumHand enumhand) {
         ItemStack itemstack = entityhuman.b(enumhand);
 
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             if (this.getItem().isEmpty()) {
                 if (!itemstack.isEmpty()) {
                     this.setItem(itemstack);
diff --git a/src/main/java/net/minecraft/server/EntityLargeFireball.java b/src/main/java/net/minecraft/server/EntityLargeFireball.java
index 2f8e4184e5a69207f516c2c53787b39836b6e9c7..69964b6fb7c8c216e51f664f9ebb20af86843165 100644
--- a/src/main/java/net/minecraft/server/EntityLargeFireball.java
+++ b/src/main/java/net/minecraft/server/EntityLargeFireball.java
@@ -17,13 +17,13 @@ public class EntityLargeFireball extends EntityFireball {
     }
 
     protected void a(MovingObjectPosition movingobjectposition) {
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             if (movingobjectposition.entity != null) {
                 movingobjectposition.entity.damageEntity(DamageSource.fireball(this, this.shooter), 6.0F);
                 this.a(this.shooter, movingobjectposition.entity);
             }
 
-            // boolean flag = this.world.getGameRules().getBoolean("mobGriefing"); // Reaper - Unused
+            // boolean flag = this.world.getGameRules().getBoolean("mobGriefing"); // Beast - Unused
 
             // CraftBukkit start - fire ExplosionPrimeEvent
             ExplosionPrimeEvent event = new ExplosionPrimeEvent((org.bukkit.entity.Explosive) org.bukkit.craftbukkit.entity.CraftEntity.getEntity(this.world.getServer(), this));
diff --git a/src/main/java/net/minecraft/server/EntityLeash.java b/src/main/java/net/minecraft/server/EntityLeash.java
index 7c9ebe03c21ee2fa500410719fc5959badcf8439..b204cc3aaa0c93b6534bf0169304637a431d9017 100644
--- a/src/main/java/net/minecraft/server/EntityLeash.java
+++ b/src/main/java/net/minecraft/server/EntityLeash.java
@@ -31,7 +31,7 @@ public class EntityLeash extends EntityHanging {
         this.locX = (double) this.blockPosition.getX() + 0.5D;
         this.locY = (double) this.blockPosition.getY() + 0.5D;
         this.locZ = (double) this.blockPosition.getZ() + 0.5D;
-        resetBlockPos(); // Reaper - Cache current block pos
+        resetBlockPos(); // Beast - Cache current block pos
         if (valid) world.entityJoinedWorld(this, false); // CraftBukkit
     }
 
@@ -62,7 +62,7 @@ public class EntityLeash extends EntityHanging {
     public void a(NBTTagCompound nbttagcompound) {}
 
     public boolean b(EntityHuman entityhuman, EnumHand enumhand) {
-        if (false) { // Reaper - Remove isClientSide check
+        if (false) { // Beast - Remove isClientSide check
             return true;
         } else {
             boolean flag = false;
diff --git a/src/main/java/net/minecraft/server/EntityLightning.java b/src/main/java/net/minecraft/server/EntityLightning.java
index 427512dc52d93e8a63d1eecda5ff3b8cb71d84a1..aadf43d549e0aa23e02b003833d48c3f5addf9ca 100644
--- a/src/main/java/net/minecraft/server/EntityLightning.java
+++ b/src/main/java/net/minecraft/server/EntityLightning.java
@@ -21,9 +21,9 @@ public class EntityLightning extends EntityWeather {
         this.a = this.random.nextLong();
         this.c = this.random.nextInt(3) + 1;
         this.d = flag;
-        BlockPosition blockposition = this.blockPos; // Reaper - Cache current block pos
+        BlockPosition blockposition = this.blockPos; // Beast - Cache current block pos
 
-        if (!flag && world.getGameRules().getBoolean("doFireTick") && (world.getDifficulty() == EnumDifficulty.NORMAL || world.getDifficulty() == EnumDifficulty.HARD) && world.areChunksLoaded(blockposition, 10)) { // Reaper - Remove isClientSide check
+        if (!flag && world.getGameRules().getBoolean("doFireTick") && (world.getDifficulty() == EnumDifficulty.NORMAL || world.getDifficulty() == EnumDifficulty.HARD) && world.areChunksLoaded(blockposition, 10)) { // Beast - Remove isClientSide check
             if (world.getType(blockposition).getMaterial() == Material.AIR && Blocks.FIRE.canPlace(world, blockposition)) {
                 // CraftBukkit start
                 if (!CraftEventFactory.callBlockIgniteEvent(world, blockposition.getX(), blockposition.getY(), blockposition.getZ(), this).isCancelled()) {
@@ -90,9 +90,9 @@ public class EntityLightning extends EntityWeather {
             } else if (this.lifeTicks < -this.random.nextInt(10)) {
                 --this.c;
                 this.lifeTicks = 1;
-                if (!this.d) { // Reaper - Remove isClientSide check
+                if (!this.d) { // Beast - Remove isClientSide check
                     this.a = this.random.nextLong();
-                    BlockPosition blockposition = this.blockPos; // Reaper - Cache current block pos
+                    BlockPosition blockposition = this.blockPos; // Beast - Cache current block pos
 
                     if (this.world.getGameRules().getBoolean("doFireTick") && this.world.areChunksLoaded(blockposition, 10) && this.world.getType(blockposition).getMaterial() == Material.AIR && Blocks.FIRE.canPlace(this.world, blockposition)) {
                         // CraftBukkit start - add "!isEffect"
@@ -106,7 +106,7 @@ public class EntityLightning extends EntityWeather {
         }
 
         if (this.lifeTicks >= 0 && !this.isEffect) { // CraftBukkit - add !this.isEffect
-            if (false) { // Reaper - Remove isClientSide check
+            if (false) { // Beast - Remove isClientSide check
                 this.world.d(2);
             } else if (!this.d) {
                 double d0 = 3.0D;
diff --git a/src/main/java/net/minecraft/server/EntityLiving.java b/src/main/java/net/minecraft/server/EntityLiving.java
index ff38a4e0ae2efe4fa2ad2f50e59af2d6206848a2..78e5231e566f1ec7788064a3800317bfd7cfc495 100644
--- a/src/main/java/net/minecraft/server/EntityLiving.java
+++ b/src/main/java/net/minecraft/server/EntityLiving.java
@@ -1,7 +1,7 @@
 package net.minecraft.server;
 
 import com.destroystokyo.paper.event.player.PlayerArmorChangeEvent;
-import com.github.ruviolence.reaper.BeastConfig;
+import com.homomc.beast.BeastConfig;
 import com.google.common.base.Objects;
 import com.google.common.collect.Maps;
 import java.util.Collection;
@@ -12,6 +12,8 @@ import java.util.Map;
 import java.util.Random;
 import java.util.UUID;
 import javax.annotation.Nullable;
+
+import com.homomc.beast.InventoryUpdateHelper;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
@@ -36,7 +38,7 @@ import org.bukkit.event.player.PlayerItemConsumeEvent;
 public abstract class EntityLiving extends Entity {
 
     private static final Logger a = LogManager.getLogger();
-    private static final UUID b = com.eatthepath.uuid.FastUUID.parseUUID("662A6B8D-DA3E-4C1C-8813-96EA6097278D"); // Reaper - Use FastUUID
+    private static final UUID b = com.eatthepath.uuid.FastUUID.parseUUID("662A6B8D-DA3E-4C1C-8813-96EA6097278D"); // Beast - Use FastUUID
     private static final AttributeModifier c = (new AttributeModifier(EntityLiving.b, "Sprinting speed boost", 0.30000001192092896D, 2)).a(false);
     protected static final DataWatcherObject<Byte> at = DataWatcher.a(EntityLiving.class, DataWatcherRegistry.a);
     public static final DataWatcherObject<Float> HEALTH = DataWatcher.a(EntityLiving.class, DataWatcherRegistry.c);
@@ -65,10 +67,10 @@ public abstract class EntityLiving extends Entity {
     public int maxNoDamageTicks;
     public float aJ;
     public float aK;
-    /* // Reaper start - Optimize unused
+    /* // Beast start - Optimize unused
     public float aL;
     public float aM;
-    */ // Reaper end
+    */ // Beast end
     public float aN;
     public float aO;
     public float aP;
@@ -105,11 +107,11 @@ public abstract class EntityLiving extends Entity {
     private int bD;
     private float bE;
     protected ItemStack activeItem;
-    protected int bp; protected final int getEatTimeTicks() { return this.bp; }  protected final void setEatTimeTicks(int value) { this.bp = value; } // Reaper - OBFHELPER
-    // Reaper start - Lag compensate eating
+    protected int bp; protected final int getEatTimeTicks() { return this.bp; }  protected final void setEatTimeTicks(int value) { this.bp = value; } // Beast - OBFHELPER
+    // Beast start - Lag compensate eating
     protected long eatStartTime;
     protected int totalEatTimeTicks;
-    // Reaper end
+    // Beast end
     protected int bq;
     private BlockPosition bF;
     private DamageSource bG;
@@ -153,9 +155,9 @@ public abstract class EntityLiving extends Entity {
         // CraftBukkit - setHealth(getMaxHealth()) inlined and simplified to skip the instanceof check for EntityPlayer, as getBukkitEntity() is not initialized in constructor
         this.datawatcher.set(EntityLiving.HEALTH, (float) this.getAttributeInstance(GenericAttributes.maxHealth).getValue());
         this.i = true;
-        // this.aM = (float) ((Math.random() + 1.0D) * 0.009999999776482582D); // Reaper - Optimize unused
+        // this.aM = (float) ((Math.random() + 1.0D) * 0.009999999776482582D); // Beast - Optimize unused
         this.setPosition(this.locX, this.locY, this.locZ);
-        // this.aL = (float) Math.random() * 12398.0F; // Reaper - Optimize unused
+        // this.aL = (float) Math.random() * 12398.0F; // Beast - Optimize unused
         this.yaw = (float) (Math.random() * 6.2831854820251465D);
         this.aP = this.yaw;
         this.P = 0.6F;
@@ -182,7 +184,7 @@ public abstract class EntityLiving extends Entity {
             this.aq();
         }
 
-        if (this.fallDistance > 3.0F && flag) { // Reaper - Remove isClientSide check
+        if (this.fallDistance > 3.0F && flag) { // Beast - Remove isClientSide check
             float f = (float) MathHelper.f(this.fallDistance - 3.0F);
 
             if (iblockdata.getMaterial() != Material.AIR) {
@@ -210,7 +212,7 @@ public abstract class EntityLiving extends Entity {
     public void Y() {
         this.aC = this.aD;
         super.Y();
-        // this.world.methodProfiler.a("livingEntityBaseTick"); // Reaper - Remove MethodProfiler
+        // this.world.methodProfiler.a("livingEntityBaseTick"); // Beast - Remove MethodProfiler
         boolean flag = this instanceof EntityHuman;
 
         if (this.isAlive()) {
@@ -229,7 +231,7 @@ public abstract class EntityLiving extends Entity {
             }
         }
 
-        if (this.isFireProof()) { // Reaper - Remove isClientSide check
+        if (this.isFireProof()) { // Beast - Remove isClientSide check
             this.extinguish();
         }
 
@@ -242,7 +244,7 @@ public abstract class EntityLiving extends Entity {
                     if (this.getAirTicks() == -20) {
                         this.setAirTicks(0);
 
-                        /* // Reaper start - Clientside particles
+                        /* // Beast start - Clientside particles
                         for (int i = 0; i < 8; ++i) {
                             float f = this.random.nextFloat() - this.random.nextFloat();
                             float f1 = this.random.nextFloat() - this.random.nextFloat();
@@ -250,13 +252,13 @@ public abstract class EntityLiving extends Entity {
 
                             this.world.addParticle(EnumParticle.WATER_BUBBLE, this.locX + (double) f, this.locY + (double) f1, this.locZ + (double) f2, this.motX, this.motY, this.motZ, new int[0]);
                         }
-                        */ // Reaper end
+                        */ // Beast end
 
                         this.damageEntity(DamageSource.DROWN, 2.0F);
                     }
                 }
 
-                if (this.isPassenger() && this.bJ() instanceof EntityLiving) { // Reaper - Remove isClientSide check
+                if (this.isPassenger() && this.bJ() instanceof EntityLiving) { // Beast - Remove isClientSide check
                     this.stopRiding();
                 }
             } else {
@@ -267,8 +269,8 @@ public abstract class EntityLiving extends Entity {
                 // CraftBukkit end
             }
 
-            if (true) { // Reaper - Remove isClientSide check
-                BlockPosition blockposition = this.blockPos; // Reaper - Cache current block pos
+            if (true) { // Beast - Remove isClientSide check
+                BlockPosition blockposition = this.blockPos; // Beast - Cache current block pos
 
                 if (!Objects.equal(this.bF, blockposition)) {
                     this.bF = blockposition;
@@ -318,14 +320,14 @@ public abstract class EntityLiving extends Entity {
         this.aQ = this.aP;
         this.lastYaw = this.yaw;
         this.lastPitch = this.pitch;
-        // this.world.methodProfiler.b(); // Reaper - Remove MethodProfiler
+        // this.world.methodProfiler.b(); // Beast - Remove MethodProfiler
     }
 
     // CraftBukkit start
     public int getExpReward() {
         int exp = this.getExpValue(this.killer);
 
-        if ((this.lastDamageByPlayerTime > 0 || this.alwaysGivesExp()) && this.isDropExperience() && this.world.getGameRules().getBoolean("doMobLoot")) { // Reaper - Remove isClientSide check
+        if ((this.lastDamageByPlayerTime > 0 || this.alwaysGivesExp()) && this.isDropExperience() && this.world.getGameRules().getBoolean("doMobLoot")) { // Beast - Remove isClientSide check
             return exp;
         } else {
             return 0;
@@ -365,7 +367,7 @@ public abstract class EntityLiving extends Entity {
 
             this.die();
 
-            /* // Reaper start - Clientside particles
+            /* // Beast start - Clientside particles
             for (i = 0; i < 20; ++i) {
                 double d0 = this.random.nextGaussian() * 0.02D;
                 double d1 = this.random.nextGaussian() * 0.02D;
@@ -373,7 +375,7 @@ public abstract class EntityLiving extends Entity {
 
                 this.world.addParticle(EnumParticle.EXPLOSION_NORMAL, this.locX + (double) (this.random.nextFloat() * this.width * 2.0F) - (double) this.width, this.locY + (double) (this.random.nextFloat() * this.length), this.locZ + (double) (this.random.nextFloat() * this.width * 2.0F) - (double) this.width, d0, d1, d2, new int[0]);
             }
-            */ // Reaper end
+            */ // Beast end
         }
 
     }
@@ -457,7 +459,7 @@ public abstract class EntityLiving extends Entity {
         nbttagcompound.setInt("HurtByTimestamp", this.hurtTimestamp);
         nbttagcompound.setShort("DeathTime", (short) this.deathTicks);
         nbttagcompound.setFloat("AbsorptionAmount", this.getAbsorptionHearts());
-        EnumItemSlot[] aenumitemslot = EnumItemSlot.VALUES; // Reaper - Single values array
+        EnumItemSlot[] aenumitemslot = EnumItemSlot.VALUES; // Beast - Single values array
         int i = aenumitemslot.length;
 
         int j;
@@ -473,7 +475,7 @@ public abstract class EntityLiving extends Entity {
         }
 
         nbttagcompound.set("Attributes", GenericAttributes.a(this.getAttributeMap()));
-        aenumitemslot = EnumItemSlot.VALUES; // Reaper - Single values array
+        aenumitemslot = EnumItemSlot.VALUES; // Beast - Single values array
         i = aenumitemslot.length;
 
         for (j = 0; j < i; ++j) {
@@ -491,7 +493,7 @@ public abstract class EntityLiving extends Entity {
             while (iterator.hasNext()) {
                 MobEffect mobeffect = (MobEffect) iterator.next();
 
-                nbttaglist.add(mobeffect.a(new NBTTagCompound(5))); // Reaper - Use initial capacity
+                nbttaglist.add(mobeffect.a(new NBTTagCompound(5))); // Beast - Use initial capacity
             }
 
             nbttagcompound.set("ActiveEffects", nbttaglist);
@@ -508,7 +510,7 @@ public abstract class EntityLiving extends Entity {
         }
         this.setAbsorptionHearts(absorptionAmount);
         // Paper end
-        if (nbttagcompound.hasKeyOfType("Attributes", 9) && this.world != null) { // Reaper - Remove isClientSide check
+        if (nbttagcompound.hasKeyOfType("Attributes", 9) && this.world != null) { // Beast - Remove isClientSide check
             GenericAttributes.a(this.getAttributeMap(), nbttagcompound.getList("Attributes", 10));
         }
 
@@ -573,7 +575,7 @@ public abstract class EntityLiving extends Entity {
                 MobEffect mobeffect = (MobEffect) this.effects.get(mobeffectlist);
 
                 if (!mobeffect.tick(this)) {
-                    if (true) { // Reaper - Remove isClientSide check
+                    if (true) { // Beast - Remove isClientSide check
                         iterator.remove();
                         this.b(mobeffect);
                     }
@@ -597,14 +599,14 @@ public abstract class EntityLiving extends Entity {
         // CraftBukkit end
 
         if (this.updateEffects) {
-            if (true) { // Reaper - Remove isClientSide check
+            if (true) { // Beast - Remove isClientSide check
                 this.G();
             }
 
             this.updateEffects = false;
         }
 
-        /* // Reaper start - Clientside particles
+        /* // Beast start - Clientside particles
         int i = ((Integer) this.datawatcher.get(EntityLiving.g)).intValue();
         boolean flag = ((Boolean) this.datawatcher.get(EntityLiving.h)).booleanValue();
 
@@ -621,7 +623,7 @@ public abstract class EntityLiving extends Entity {
                 flag1 &= this.random.nextInt(5) == 0;
             }
 
-            if (flag1) { // Reaper - Optimize
+            if (flag1) { // Beast - Optimize
                 double d0 = (double) (i >> 16 & 255) / 255.0D;
                 double d1 = (double) (i >> 8 & 255) / 255.0D;
                 double d2 = (double) (i >> 0 & 255) / 255.0D;
@@ -629,7 +631,7 @@ public abstract class EntityLiving extends Entity {
                 this.world.addParticle(flag ? EnumParticle.SPELL_MOB_AMBIENT : EnumParticle.SPELL_MOB, this.locX + (this.random.nextDouble() - 0.5D) * (double) this.width, this.locY + this.random.nextDouble() * (double) this.length, this.locZ + (this.random.nextDouble() - 0.5D) * (double) this.width, d0, d1, d2, new int[0]);
             }
         }
-        */ // Reaper end
+        */ // Beast end
 
     }
 
@@ -669,7 +671,7 @@ public abstract class EntityLiving extends Entity {
     }
 
     public void removeAllEffects() {
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             Iterator iterator = this.effects.values().iterator();
 
             while (iterator.hasNext()) {
@@ -757,7 +759,7 @@ public abstract class EntityLiving extends Entity {
 
     protected void a(MobEffect mobeffect) {
         this.updateEffects = true;
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             mobeffect.getMobEffect().b(this, this.getAttributeMap(), mobeffect.getAmplifier());
         }
 
@@ -765,7 +767,7 @@ public abstract class EntityLiving extends Entity {
 
     protected void a(MobEffect mobeffect, boolean flag) {
         this.updateEffects = true;
-        if (flag) { // Reaper - Remove isClientSide check
+        if (flag) { // Beast - Remove isClientSide check
             MobEffectList mobeffectlist = mobeffect.getMobEffect();
 
             mobeffectlist.a(this, this.getAttributeMap(), mobeffect.getAmplifier());
@@ -776,7 +778,7 @@ public abstract class EntityLiving extends Entity {
 
     protected void b(MobEffect mobeffect) {
         this.updateEffects = true;
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             mobeffect.getMobEffect().a(this, this.getAttributeMap(), mobeffect.getAmplifier());
         }
 
@@ -844,7 +846,7 @@ public abstract class EntityLiving extends Entity {
     public boolean damageEntity(DamageSource damagesource, float f) {
         if (this.isInvulnerable(damagesource)) {
             return false;
-        } else if (false) { // Reaper - Remove isClientSide check
+        } else if (false) { // Beast - Remove isClientSide check
             return false;
         } else {
             this.ticksFarFromPlayer = 0;
@@ -1006,11 +1008,11 @@ public abstract class EntityLiving extends Entity {
                 }
 
                 if (this instanceof EntityPlayer) {
-                    CriterionTriggers.h.a((EntityPlayer) this, damagesource, f, f, flag); // Reaper - Inline
+                    CriterionTriggers.h.a((EntityPlayer) this, damagesource, f, f, flag); // Beast - Inline
                 }
 
                 if (entity1 instanceof EntityPlayer) {
-                    CriterionTriggers.g.a((EntityPlayer) entity1, this, damagesource, f, f, flag); // Reaper - Inline
+                    CriterionTriggers.g.a((EntityPlayer) entity1, this, damagesource, f, f, flag); // Beast - Inline
                 }
 
                 return flag2;
@@ -1027,7 +1029,7 @@ public abstract class EntityLiving extends Entity {
             return false;
         } else {
             ItemStack itemstack = null;
-            EnumHand[] aenumhand = EnumHand.VALUES; // Reaper - Single values array
+            EnumHand[] aenumhand = EnumHand.VALUES; // Beast - Single values array
             int i = aenumhand.length;
 
             // CraftBukkit start
@@ -1109,7 +1111,7 @@ public abstract class EntityLiving extends Entity {
     public void b(ItemStack itemstack) {
         this.a(SoundEffects.dw, 0.8F, 0.8F + this.world.random.nextFloat() * 0.4F);
 
-        /* // Reaper start - Clientside particles
+        /* // Beast start - Clientside particles
         for (int i = 0; i < 5; ++i) {
             Vec3D vec3d = new Vec3D(((double) this.random.nextFloat() - 0.5D) * 0.1D, Math.random() * 0.1D + 0.1D, 0.0D);
 
@@ -1123,12 +1125,12 @@ public abstract class EntityLiving extends Entity {
             vec3d1 = vec3d1.add(this.locX, this.locY + (double) this.getHeadHeight(), this.locZ);
             this.world.addParticle(EnumParticle.ITEM_CRACK, vec3d1.x, vec3d1.y, vec3d1.z, vec3d.x, vec3d.y + 0.05D, vec3d.z, new int[] { Item.getId(itemstack.getItem())});
         }
-        */ // Reaper end
+        */ // Beast end
 
     }
 
     public void die(DamageSource damagesource) {
-        if (this.dead) return; // Reaper
+        if (this.dead) return; // Beast
         if (!this.aU) {
             Entity entity = damagesource.getEntity();
             EntityLiving entityliving = this.ci();
@@ -1147,7 +1149,7 @@ public abstract class EntityLiving extends Entity {
 
             org.bukkit.event.entity.EntityDeathEvent deathEvent = null;
             //Paper end
-            if (true) { // Reaper - Remove isClientSide check
+            if (true) { // Beast - Remove isClientSide check
                 int i = 0;
 
                 if (entity instanceof EntityHuman) {
@@ -1168,7 +1170,7 @@ public abstract class EntityLiving extends Entity {
             }
 
             // Paper start - cancellable death event
-            if (/*deathEvent == null*/false || !deathEvent.isCancelled()) { // Reaper - Optimize
+            if (/*deathEvent == null*/false || !deathEvent.isCancelled()) { // Beast - Optimize
                 // triggers and stats got moved down
                 if (this.getKillCount() >= 0 && entityliving != null) {
                     entityliving.runKillTrigger(this, this.getKillCount(), damagesource);
@@ -1211,7 +1213,7 @@ public abstract class EntityLiving extends Entity {
             this.motZ /= 2.0D;
             this.motX -= d0 / (double) f1 * (double) f;
             this.motZ -= d1 / (double) f1 * (double) f;
-            if (this.onGround || BeastConfig.oldCombatEnabled) { // Reaper - Old combat
+            if (this.onGround || BeastConfig.oldCombatEnabled) { // Beast - Old combat
                 this.motY /= 2.0D;
                 this.motY += (double) f;
                 if (this.motY > 0.4000000059604645D) {
@@ -1323,7 +1325,7 @@ public abstract class EntityLiving extends Entity {
 
     protected float applyArmorModifier(DamageSource damagesource, float f) {
         if (!damagesource.ignoresArmor()) {
-            if (BeastConfig.oldCombatEnabled) return f * (25 - this.getArmorStrength()) / 25.0F; // Reaper - Old combat
+            if (BeastConfig.oldCombatEnabled) return f * (25 - this.getArmorStrength()) / 25.0F; // Beast - Old combat
             // this.damageArmor(f); // CraftBukkit - Moved into damageEntity0(DamageSource, float)
             f = CombatMath.a(f, (float) this.getArmorStrength(), (float) this.getAttributeInstance(GenericAttributes.i).getValue());
         }
@@ -1351,12 +1353,12 @@ public abstract class EntityLiving extends Entity {
             } else {
                 i = EnchantmentManager.a(this.getArmorItems(), damagesource);
                 if (i > 0) {
-                    // Reaper start - Old combat
+                    // Beast start - Old combat
                     if (BeastConfig.oldCombatEnabled) {
                         if (i > 20) i = 20;
                         return f * (25 - i) / 25.0F;
                     }
-                    // Reaper end
+                    // Beast end
                     f = CombatMath.a(f, (float) i);
                 }
 
@@ -1386,11 +1388,11 @@ public abstract class EntityLiving extends Entity {
             Function<Double, Double> blocking = new Function<Double, Double>() {
                 @Override
                 public Double apply(Double f) {
-                    // Reaper start - Old combat
+                    // Beast start - Old combat
                     if (BeastConfig.oldCombatBlockingModifier) {
                         return human && !damagesource.ignoresArmor() && EntityLiving.this.isBlocking() && f > 0.0D ? -(f - (1.0D + f) * 0.5D) : -0.0D;
                     }
-                    // Reaper end
+                    // Beast end
                     return -((EntityLiving.this.applyBlockingModifier(damagesource)) ? f : 0.0);
                 }
             };
@@ -1498,9 +1500,9 @@ public abstract class EntityLiving extends Entity {
                         CriterionTriggers.g.a((EntityPlayer) damagesource.getEntity(), this, damagesource, f, originalDamage, true);
                     }
 
-                    return BeastConfig.oldCombatEnabled; // Reaper - Old combat
+                    return BeastConfig.oldCombatEnabled; // Beast - Old combat
                 } else {
-                    return originalDamage > 0 || BeastConfig.oldCombatEnabled; // Reaper - Old combat
+                    return originalDamage > 0 || BeastConfig.oldCombatEnabled; // Beast - Old combat
                 }
                 // CraftBukkit end
             }
@@ -1591,7 +1593,7 @@ public abstract class EntityLiving extends Entity {
     }
 
     public ItemStack b(EnumHand enumhand) {
-        // Reaper start - Optimize
+        // Beast start - Optimize
         /*
         if (enumhand == EnumHand.MAIN_HAND) {
             return this.getEquipment(EnumItemSlot.MAINHAND);
@@ -1609,7 +1611,7 @@ public abstract class EntityLiving extends Entity {
             default:
                 throw new IllegalArgumentException("Invalid hand " + enumhand);
         }
-        // Reaper end
+        // Beast end
     }
 
     public void a(EnumHand enumhand, ItemStack itemstack) {
@@ -1685,7 +1687,7 @@ public abstract class EntityLiving extends Entity {
                 int i = aint.length;
 
                 for (int j = 0; j < i; ++j) {
-                    int[] aint2 = aint[j]; // Reaper - Inline
+                    int[] aint2 = aint[j]; // Beast - Inline
                     double d7 = (double) (enumdirection.getAdjacentX() * aint2[0] + enumdirection1.getAdjacentX() * aint2[1]);
                     double d8 = (double) (enumdirection.getAdjacentZ() * aint2[0] + enumdirection1.getAdjacentZ() * aint2[1]);
                     double d9 = d3 + d7;
@@ -1745,9 +1747,9 @@ public abstract class EntityLiving extends Entity {
         return 0.42F;
     }
 
-    protected long lastJumpTime = 0L; // Reaper start - arrow velocity fix
+    protected long lastJumpTime = 0L; // Beast start - arrow velocity fix
     protected void cu() {
-        // Reaper start - arrow velocity fix
+        // Beast start - arrow velocity fix
         long time = System.nanoTime();
         boolean canCrit = true;
         if (this instanceof EntityPlayer) {
@@ -1757,13 +1759,13 @@ public abstract class EntityLiving extends Entity {
                 canCrit = true;
             }
         }
-        // Reaper end - arrow velocity fix
+        // Beast end - arrow velocity fix
         this.motY = (double) this.ct();
         if (this.hasEffect(MobEffects.JUMP)) {
             this.motY += (double) ((float) (this.getEffect(MobEffects.JUMP).getAmplifier() + 1) * 0.1F);
         }
 
-        if (canCrit) // Reaper - arrow velocity fix
+        if (canCrit) // Beast - arrow velocity fix
         if (this.isSprinting()) {
             float f = this.yaw * 0.017453292F;
 
@@ -1881,7 +1883,7 @@ public abstract class EntityLiving extends Entity {
                 this.motY *= 0.9800000190734863D;
                 this.motZ *= 0.9900000095367432D;
                 this.move(EnumMoveType.SELF, this.motX, this.motY, this.motZ);
-                if (this.positionChanged) { // Reaper - Remove isClientSide check
+                if (this.positionChanged) { // Beast - Remove isClientSide check
                     d4 = Math.sqrt(this.motX * this.motX + this.motZ * this.motZ);
                     double d5 = d1 - d4;
                     float f8 = (float) (d5 * 10.0D - 3.0D);
@@ -1893,7 +1895,7 @@ public abstract class EntityLiving extends Entity {
                 }
                 } // Paper end - Elyta Wall Damage if statement
 
-                if (this.onGround) { // Reaper - Remove isClientSide check
+                if (this.onGround) { // Beast - Remove isClientSide check
                     if (getFlag(7) && !CraftEventFactory.callToggleGlideEvent(this, false).isCancelled()) // CraftBukkit
                     this.setFlag(7, false);
                 }
@@ -1943,7 +1945,7 @@ public abstract class EntityLiving extends Entity {
                     this.motY += (0.05D * (double) (this.getEffect(MobEffects.LEVITATION).getAmplifier() + 1) - this.motY) * 0.2D;
                 } else {
                     blockposition_pooledblockposition.e(this.locX, 0.0D, this.locZ);
-                    if (false && (!this.world.isLoaded(blockposition_pooledblockposition) || !this.world.getChunkAtWorldCoords(blockposition_pooledblockposition).p())) { // Reaper - Remove isClientSide check
+                    if (false && (!this.world.isLoaded(blockposition_pooledblockposition) || !this.world.getChunkAtWorldCoords(blockposition_pooledblockposition).p())) { // Beast - Remove isClientSide check
                         if (this.locY > 0.0D) {
                             this.motY = -0.1D;
                         } else {
@@ -1995,7 +1997,7 @@ public abstract class EntityLiving extends Entity {
     public void B_() {
         super.B_();
         this.cI();
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             int i = this.getArrowCount();
 
             if (i > 0) {
@@ -2009,7 +2011,7 @@ public abstract class EntityLiving extends Entity {
                 }
             }
 
-            EnumItemSlot[] aenumitemslot = EnumItemSlot.VALUES; // Reaper - Single values array
+            EnumItemSlot[] aenumitemslot = EnumItemSlot.VALUES; // Beast - Single values array
             int j = aenumitemslot.length;
 
             for (int k = 0; k < j; ++k) {
@@ -2104,10 +2106,10 @@ public abstract class EntityLiving extends Entity {
         }
 
         this.aX += (f3 - this.aX) * 0.3F;
-        // this.world.methodProfiler.a("headTurn"); // Reaper - Remove MethodProfiler
+        // this.world.methodProfiler.a("headTurn"); // Beast - Remove MethodProfiler
         f2 = this.g(f1, f2);
-        // this.world.methodProfiler.b(); // Reaper - Remove MethodProfiler
-        // this.world.methodProfiler.a("rangeChecks"); // Reaper - Remove MethodProfiler
+        // this.world.methodProfiler.b(); // Beast - Remove MethodProfiler
+        // this.world.methodProfiler.a("rangeChecks"); // Beast - Remove MethodProfiler
 
         while (this.yaw - this.lastYaw < -180.0F) {
             this.lastYaw -= 360.0F;
@@ -2141,7 +2143,7 @@ public abstract class EntityLiving extends Entity {
             this.aQ += 360.0F;
         }
 
-        // this.world.methodProfiler.b(); // Reaper - Remove MethodProfiler
+        // this.world.methodProfiler.b(); // Beast - Remove MethodProfiler
         this.aY += f2;
         if (this.cP()) {
             ++this.bq;
@@ -2211,20 +2213,20 @@ public abstract class EntityLiving extends Entity {
             this.motZ = 0.0D;
         }
 
-        // this.world.methodProfiler.a("ai"); // Reaper - Remove MethodProfiler
+        // this.world.methodProfiler.a("ai"); // Beast - Remove MethodProfiler
         if (this.isFrozen()) {
             this.bd = false;
             this.be = 0.0F;
             this.bg = 0.0F;
             this.bh = 0.0F;
         } else if (this.cC()) {
-            // this.world.methodProfiler.a("newAi"); // Reaper - Remove MethodProfiler
+            // this.world.methodProfiler.a("newAi"); // Beast - Remove MethodProfiler
             this.doTick();
-            // this.world.methodProfiler.b(); // Reaper - Remove MethodProfiler
+            // this.world.methodProfiler.b(); // Beast - Remove MethodProfiler
         }
 
-        // this.world.methodProfiler.b(); // Reaper - Remove MethodProfiler
-        // this.world.methodProfiler.a("jump"); // Reaper - Remove MethodProfiler
+        // this.world.methodProfiler.b(); // Beast - Remove MethodProfiler
+        // this.world.methodProfiler.a("jump"); // Beast - Remove MethodProfiler
         if (this.bd) {
             if (this.isInWater()) {
                 this.cv();
@@ -2238,17 +2240,17 @@ public abstract class EntityLiving extends Entity {
             this.bD = 0;
         }
 
-        // this.world.methodProfiler.b(); // Reaper - Remove MethodProfiler
-        // this.world.methodProfiler.a("travel"); // Reaper - Remove MethodProfiler
+        // this.world.methodProfiler.b(); // Beast - Remove MethodProfiler
+        // this.world.methodProfiler.a("travel"); // Beast - Remove MethodProfiler
         this.be *= 0.98F;
         this.bg *= 0.98F;
         this.bh *= 0.9F;
         this.r();
         this.a(this.be, this.bf, this.bg);
-        // this.world.methodProfiler.b(); // Reaper - Remove MethodProfiler
-        // this.world.methodProfiler.a("push"); // Reaper - Remove MethodProfiler
+        // this.world.methodProfiler.b(); // Beast - Remove MethodProfiler
+        // this.world.methodProfiler.a("push"); // Beast - Remove MethodProfiler
         this.cB();
-        // this.world.methodProfiler.b(); // Reaper - Remove MethodProfiler
+        // this.world.methodProfiler.b(); // Beast - Remove MethodProfiler
     }
 
     private void r() {
@@ -2259,7 +2261,7 @@ public abstract class EntityLiving extends Entity {
 
             if (itemstack.getItem() == Items.cS && ItemElytra.d(itemstack)) {
                 flag = true;
-                if ((this.bq + 1) % 20 == 0) { // Reaper - Remove isClientSide check
+                if ((this.bq + 1) % 20 == 0) { // Beast - Remove isClientSide check
                     itemstack.damage(1, this);
                 }
             } else {
@@ -2269,7 +2271,7 @@ public abstract class EntityLiving extends Entity {
             flag = false;
         }
 
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             if (flag != this.getFlag(7) && !CraftEventFactory.callToggleGlideEvent(this, flag).isCancelled()) // CraftBukkit
             this.setFlag(7, flag);
         }
@@ -2319,7 +2321,7 @@ public abstract class EntityLiving extends Entity {
         Entity entity = this.bJ();
 
         super.stopRiding();
-        if (entity != null && entity != this.bJ()) { // Reaper - Remove isClientSide check
+        if (entity != null && entity != this.bJ()) { // Beast - Remove isClientSide check
             this.A(entity);
         }
 
@@ -2337,7 +2339,7 @@ public abstract class EntityLiving extends Entity {
     }
 
     public void receive(Entity entity, int i) {
-        if (!entity.dead) { // Reaper - Remove isClientSide check
+        if (!entity.dead) { // Beast - Remove isClientSide check
             EntityTracker entitytracker = ((WorldServer) this.world).getTracker();
 
             if (entity instanceof EntityItem || entity instanceof EntityArrow || entity instanceof EntityExperienceOrb) {
@@ -2363,7 +2365,7 @@ public abstract class EntityLiving extends Entity {
     }
 
     public boolean cC() {
-        return true; // Reaper - Remove isClientSide check
+        return true; // Beast - Remove isClientSide check
     }
 
     public boolean isInteractable() {
@@ -2429,12 +2431,12 @@ public abstract class EntityLiving extends Entity {
                     this.b(this.activeItem, 5);
                 }
 
-                // Reaper start - Lag compensate eating
+                // Beast start - Lag compensate eating
                 // we add 2 to the expected time to avoid lag compensating when we don't need to
                 boolean shouldLagCompensate = this.activeItem.getItem() instanceof ItemFood && this.eatStartTime != -1 && (System.nanoTime() - this.eatStartTime) > ((2 + this.totalEatTimeTicks) * 50 * (1000 * 1000));
                 if (--this.bp == 0 || shouldLagCompensate) {
                     this.bp = 0;
-                    // Reaper end
+                    // Beast end
                     this.v();
                 }
             } else {
@@ -2449,11 +2451,11 @@ public abstract class EntityLiving extends Entity {
 
         if (!itemstack.isEmpty() && !this.isHandRaised()) {
             this.activeItem = itemstack;
-            // Reaper start - Lag compensate eating
+            // Beast start - Lag compensate eating
             this.bp = this.totalEatTimeTicks = itemstack.m();
             this.eatStartTime = System.nanoTime();
-            // Reaper end
-            if (true) { // Reaper - Remove isClientSide check
+            // Beast end
+            if (true) { // Beast - Remove isClientSide check
                 int i = 1;
 
                 if (enumhand == EnumHand.OFF_HAND) {
@@ -2468,7 +2470,7 @@ public abstract class EntityLiving extends Entity {
 
     public void a(DataWatcherObject<?> datawatcherobject) {
         super.a(datawatcherobject);
-        if (false && EntityLiving.at.equals(datawatcherobject)) { // Reaper - Remove isClientSide check
+        if (false && EntityLiving.at.equals(datawatcherobject)) { // Beast - Remove isClientSide check
             if (this.isHandRaised() && this.activeItem.isEmpty()) {
                 this.activeItem = this.b(this.cH());
                 if (!this.activeItem.isEmpty()) {
@@ -2477,10 +2479,10 @@ public abstract class EntityLiving extends Entity {
             } else if (!this.isHandRaised() && !this.activeItem.isEmpty()) {
                 this.activeItem = ItemStack.a;
                 this.bp = 0;
-                // Reaper start - Lag compensate eating
+                // Beast start - Lag compensate eating
                 this.totalEatTimeTicks = 0;
                 this.eatStartTime = -1L;
-                // Reaper end
+                // Beast end
             }
         }
 
@@ -2493,7 +2495,7 @@ public abstract class EntityLiving extends Entity {
             }
 
             if (itemstack.n() == EnumAnimation.EAT) {
-                /* // Reaper start - Clientside particles
+                /* // Beast start - Clientside particles
                 for (int j = 0; j < i; ++j) {
                     Vec3D vec3d = new Vec3D(((double) this.random.nextFloat() - 0.5D) * 0.1D, Math.random() * 0.1D + 0.1D, 0.0D);
 
@@ -2511,7 +2513,7 @@ public abstract class EntityLiving extends Entity {
                         this.world.addParticle(EnumParticle.ITEM_CRACK, vec3d1.x, vec3d1.y, vec3d1.z, vec3d.x, vec3d.y + 0.05D, vec3d.z, new int[] { Item.getId(itemstack.getItem())});
                     }
                 }
-                */ // Reaper end
+                */ // Beast end
 
                 this.a(SoundEffects.bU, 0.5F + 0.5F * (float) this.random.nextInt(2), (this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F);
             }
@@ -2532,11 +2534,11 @@ public abstract class EntityLiving extends Entity {
 
                 if (event.isCancelled()) {
                     // Update client
-                    // Reaper start - Reduce inventory updates
+                    // Beast start - Reduce inventory updates
                     if (BeastConfig.reduceInventoryUpdates) {
-                        com.github.ruviolence.reaper.InventoryUpdateHelper.updateHeld((EntityPlayer) this, this.cH());
+                        InventoryUpdateHelper.updateHeld((EntityPlayer) this, this.cH());
                     } else
-                    // Reaper end - Reduce inventory updates
+                    // Beast end - Reduce inventory updates
                     ((EntityPlayer) this).getBukkitEntity().updateInventory();
                     ((EntityPlayer) this).getBukkitEntity().updateScaledHealth();
                     return;
@@ -2560,11 +2562,11 @@ public abstract class EntityLiving extends Entity {
 
             // Paper start - if the replacement is anything but the default, update the client inventory
             if (this instanceof EntityPlayer && !com.google.common.base.Objects.equal(defaultReplacement, itemstack)) {
-                // Reaper start - Reduce inventory updates
+                // Beast start - Reduce inventory updates
                 if (BeastConfig.reduceInventoryUpdates) {
-                    com.github.ruviolence.reaper.InventoryUpdateHelper.updateHeld((EntityPlayer) this, this.cH());
+                    InventoryUpdateHelper.updateHeld((EntityPlayer) this, this.cH());
                 } else
-                // Reaper end - Reduce inventory updates
+                // Beast end - Reduce inventory updates
                 ((EntityPlayer) this).getBukkitEntity().updateInventory();
             }
         }
@@ -2595,16 +2597,16 @@ public abstract class EntityLiving extends Entity {
     }
 
     public void cN() {
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             this.datawatcher.set(EntityLiving.at, Byte.valueOf((byte) 0));
         }
 
         this.activeItem = ItemStack.a;
         this.bp = 0;
-        // Reaper start - Lag compensate eating
+        // Beast start - Lag compensate eating
         this.totalEatTimeTicks = 0;
         this.eatStartTime = -1L;
-        // Reaper end
+        // Beast end
     }
 
     public boolean isBlocking() {
@@ -2629,11 +2631,11 @@ public abstract class EntityLiving extends Entity {
         this.locX = d0;
         this.locY = d1;
         this.locZ = d2;
-        resetBlockPos(); // Reaper - Cache current block pos
+        resetBlockPos(); // Beast - Cache current block pos
         boolean flag = false;
-        BlockPosition blockposition = this.blockPos; // Reaper - Cache current block pos
+        BlockPosition blockposition = this.blockPos; // Beast - Cache current block pos
         World world = this.world;
-        // Random random = this.getRandom(); // Reaper - Optimize
+        // Random random = this.getRandom(); // Beast - Optimize
         boolean flag1;
 
         if (world.isLoaded(blockposition)) {
@@ -2673,7 +2675,7 @@ public abstract class EntityLiving extends Entity {
         } else {
             flag1 = true;
 
-            /* // Reaper start - Clientside particles
+            /* // Beast start - Clientside particles
             for (int i = 0; i < 128; ++i) {
                 double d6 = (double) i / 127.0D;
                 float f = (random.nextFloat() - 0.5F) * 0.2F;
@@ -2685,7 +2687,7 @@ public abstract class EntityLiving extends Entity {
 
                 world.addParticle(EnumParticle.PORTAL, d7, d8, d9, (double) f, (double) f1, (double) f2, new int[0]);
             }
-            */ // Reaper end
+            */ // Beast end
 
             if (this instanceof EntityCreature) {
                 ((EntityCreature) this).getNavigation().p();
diff --git a/src/main/java/net/minecraft/server/EntityLlama.java b/src/main/java/net/minecraft/server/EntityLlama.java
index 3df146f3b2d6d27663747251e4507f6fa5676910..8852afb32a07899297d2a816722b4d3ee806c27e 100644
--- a/src/main/java/net/minecraft/server/EntityLlama.java
+++ b/src/main/java/net/minecraft/server/EntityLlama.java
@@ -39,7 +39,7 @@ public class EntityLlama extends EntityHorseChestedAbstract implements IRangedEn
         nbttagcompound.setInt("Variant", this.getVariant());
         nbttagcompound.setInt("Strength", this.getStrength());
         if (!this.inventoryChest.getItem(1).isEmpty()) {
-            nbttagcompound.set("DecorItem", this.inventoryChest.getItem(1).save(new NBTTagCompound(4))); // Reaper - Use initial capacity
+            nbttagcompound.set("DecorItem", this.inventoryChest.getItem(1).save(new NBTTagCompound(4))); // Beast - Use initial capacity
         }
 
     }
@@ -139,8 +139,8 @@ public class EntityLlama extends EntityHorseChestedAbstract implements IRangedEn
         }
 
         if (this.isBaby() && b0 > 0) {
-            // this.world.addParticle(EnumParticle.VILLAGER_HAPPY, this.locX + (double) (this.random.nextFloat() * this.width * 2.0F) - (double) this.width, this.locY + 0.5D + (double) (this.random.nextFloat() * this.length), this.locZ + (double) (this.random.nextFloat() * this.width * 2.0F) - (double) this.width, 0.0D, 0.0D, 0.0D, new int[0]); // Reaper - Clientside particles
-            if (true) { // Reaper - Remove isClientSide check
+            // this.world.addParticle(EnumParticle.VILLAGER_HAPPY, this.locX + (double) (this.random.nextFloat() * this.width * 2.0F) - (double) this.width, this.locY + 0.5D + (double) (this.random.nextFloat() * this.length), this.locZ + (double) (this.random.nextFloat() * this.width * 2.0F) - (double) this.width, 0.0D, 0.0D, 0.0D, new int[0]); // Beast - Clientside particles
+            if (true) { // Beast - Remove isClientSide check
                 this.setAge(b0);
             }
 
@@ -149,7 +149,7 @@ public class EntityLlama extends EntityHorseChestedAbstract implements IRangedEn
 
         if (b1 > 0 && (flag || !this.isTamed()) && this.getTemper() < this.getMaxDomestication()) {
             flag = true;
-            if (true) { // Reaper - Remove isClientSide check
+            if (true) { // Beast - Remove isClientSide check
                 this.n(b1);
             }
         }
@@ -250,7 +250,7 @@ public class EntityLlama extends EntityHorseChestedAbstract implements IRangedEn
     }
 
     protected void dD() {
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             super.dD();
             this.g(this.inventoryChest.getItem(1));
         }
diff --git a/src/main/java/net/minecraft/server/EntityLlamaSpit.java b/src/main/java/net/minecraft/server/EntityLlamaSpit.java
index 639483ee9ffc03bc1a8ad3b5eba7db3be473925f..de04e4fcae8c528da557f19a99f873dff3a8000a 100644
--- a/src/main/java/net/minecraft/server/EntityLlamaSpit.java
+++ b/src/main/java/net/minecraft/server/EntityLlamaSpit.java
@@ -148,7 +148,7 @@ public class EntityLlamaSpit extends Entity implements IProjectile {
             movingobjectposition.entity.damageEntity(DamageSource.a(this, this.shooter).b(), 1.0F);
         }
 
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             this.die();
         }
 
diff --git a/src/main/java/net/minecraft/server/EntityMinecartAbstract.java b/src/main/java/net/minecraft/server/EntityMinecartAbstract.java
index aaa05f6693cb7e92fbbaeee8e81906f26c6f0956..81dffccdcd26d2e5acf0743a627b260b71460900 100644
--- a/src/main/java/net/minecraft/server/EntityMinecartAbstract.java
+++ b/src/main/java/net/minecraft/server/EntityMinecartAbstract.java
@@ -25,23 +25,23 @@ public abstract class EntityMinecartAbstract extends Entity implements INamableT
     private static final DataWatcherObject<Boolean> f = DataWatcher.a(EntityMinecartAbstract.class, DataWatcherRegistry.h);
     private boolean g;
     private static final int[][][] h = new int[][][] { { { 0, 0, -1}, { 0, 0, 1}}, { { -1, 0, 0}, { 1, 0, 0}}, { { -1, -1, 0}, { 1, 0, 0}}, { { -1, 0, 0}, { 1, -1, 0}}, { { 0, 0, -1}, { 0, -1, 1}}, { { 0, -1, -1}, { 0, 0, 1}}, { { 0, 0, 1}, { 1, 0, 0}}, { { 0, 0, 1}, { -1, 0, 0}}, { { 0, 0, -1}, { -1, 0, 0}}, { { 0, 0, -1}, { 1, 0, 0}}};
-    /* // Reaper start - Clientside code
+    /* // Beast start - Clientside code
     private int at;
     private double au;
     private double av;
     private double aw;
     private double ax;
     private double ay;
-    */ // Reaper end
+    */ // Beast end
 
     // CraftBukkit start
     public boolean slowWhenEmpty = true;
     private double derailedX = 0.5;
     private double derailedY = 0.5;
     private double derailedZ = 0.5;
-    private double flyingX = 0.94999998807907104D; // Reaper - Restore vanilla precision
-    private double flyingY = 0.94999998807907104D; // Reaper - Restore vanilla precision
-    private double flyingZ = 0.94999998807907104D; // Reaper - Restore vanilla precision
+    private double flyingX = 0.94999998807907104D; // Beast - Restore vanilla precision
+    private double flyingY = 0.94999998807907104D; // Beast - Restore vanilla precision
+    private double flyingZ = 0.94999998807907104D; // Beast - Restore vanilla precision
     public double maxSpeed = 0.4D;
     // CraftBukkit end
 
@@ -119,7 +119,7 @@ public abstract class EntityMinecartAbstract extends Entity implements INamableT
     }
 
     public boolean damageEntity(DamageSource damagesource, float f) {
-        if (!this.dead) { // Reaper - Remove isClientSide check
+        if (!this.dead) { // Beast - Remove isClientSide check
             if (this.isInvulnerable(damagesource)) {
                 return false;
             } else {
@@ -261,8 +261,8 @@ public abstract class EntityMinecartAbstract extends Entity implements INamableT
         }
         */
 
-        if (false) { // Reaper - Remove isClientSide check
-            /* // Reaper start - Clientside code
+        if (false) { // Beast - Remove isClientSide check
+            /* // Beast start - Clientside code
             if (this.at > 0) {
                 double d0 = this.locX + (this.au - this.locX) / (double) this.at;
                 double d1 = this.locY + (this.av - this.locY) / (double) this.at;
@@ -278,7 +278,7 @@ public abstract class EntityMinecartAbstract extends Entity implements INamableT
                 this.setPosition(this.locX, this.locY, this.locZ);
                 this.setYawPitch(this.yaw, this.pitch);
             }
-            */ // Reaper end
+            */ // Beast end
 
         } else {
             this.lastX = this.locX;
@@ -482,7 +482,7 @@ public abstract class EntityMinecartAbstract extends Entity implements INamableT
 
         this.motX = d5 * d1 / d3;
         this.motZ = d5 * d2 / d3;
-        Entity entity = this.isPassengersEmpty() ? null : (Entity) this.bF().get(0); // Reaper
+        Entity entity = this.isPassengersEmpty() ? null : (Entity) this.bF().get(0); // Beast
         double d6;
         double d7;
         double d8;
@@ -626,7 +626,7 @@ public abstract class EntityMinecartAbstract extends Entity implements INamableT
         this.locZ = d2;
         float f = this.width / 2.0F;
         float f1 = this.length;
-        resetBlockPos(d0, d1, d2); // Reaper - Cache current block pos
+        resetBlockPos(d0, d1, d2); // Beast - Cache current block pos
 
         this.a(new AxisAlignedBB(d0 - (double) f, d1, d2 - (double) f, d0 + (double) f, d1 + (double) f1, d2 + (double) f));
     }
@@ -711,7 +711,7 @@ public abstract class EntityMinecartAbstract extends Entity implements INamableT
             IBlockData iblockdata = this.getDisplayBlock();
             MinecraftKey minecraftkey = (MinecraftKey) Block.REGISTRY.b(iblockdata.getBlock());
 
-            nbttagcompound.setString("DisplayTile", /*minecraftkey == null*/false ? "" : minecraftkey.toString()); // Reaper - Optimize
+            nbttagcompound.setString("DisplayTile", /*minecraftkey == null*/false ? "" : minecraftkey.toString()); // Beast - Optimize
             nbttagcompound.setInt("DisplayData", iblockdata.getBlock().toLegacyData(iblockdata));
             nbttagcompound.setInt("DisplayOffset", this.getDisplayBlockOffset());
         }
@@ -719,7 +719,7 @@ public abstract class EntityMinecartAbstract extends Entity implements INamableT
     }
 
     public void collide(Entity entity) {
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             if (!entity.noclip && !this.noclip) {
                 if (!this.w(entity)) {
                     // CraftBukkit start
@@ -863,7 +863,7 @@ public abstract class EntityMinecartAbstract extends Entity implements INamableT
 
         RIDEABLE(0, "MinecartRideable"), CHEST(1, "MinecartChest"), FURNACE(2, "MinecartFurnace"), TNT(3, "MinecartTNT"), SPAWNER(4, "MinecartSpawner"), HOPPER(5, "MinecartHopper"), COMMAND_BLOCK(6, "MinecartCommandBlock");
 
-        // private static final Map<Integer, EntityMinecartAbstract.EnumMinecartType> h = Maps.newHashMap(); // Reaper - Optimize unused
+        // private static final Map<Integer, EntityMinecartAbstract.EnumMinecartType> h = Maps.newHashMap(); // Beast - Optimize unused
         private final int i;
         private final String j;
 
@@ -880,7 +880,7 @@ public abstract class EntityMinecartAbstract extends Entity implements INamableT
             return this.j;
         }
 
-        /* // Reaper start - Optimize unused
+        /* // Beast start - Optimize unused
         static {
             EntityMinecartAbstract.EnumMinecartType[] aentityminecartabstract_enumminecarttype = values();
             int i = aentityminecartabstract_enumminecarttype.length;
@@ -891,7 +891,7 @@ public abstract class EntityMinecartAbstract extends Entity implements INamableT
                 EntityMinecartAbstract.EnumMinecartType.h.put(Integer.valueOf(entityminecartabstract_enumminecarttype.a()), entityminecartabstract_enumminecarttype);
             }
 
-        } */ // Reaper end
+        } */ // Beast end
     }
 
     // CraftBukkit start - Methods for getting and setting flying and derailed velocity modifiers
diff --git a/src/main/java/net/minecraft/server/EntityMinecartContainer.java b/src/main/java/net/minecraft/server/EntityMinecartContainer.java
index b3797c8ddd76771e9f275539748e4ee3be28253f..e51e887f0cc98a54e0ef6d16df71bf484707029f 100644
--- a/src/main/java/net/minecraft/server/EntityMinecartContainer.java
+++ b/src/main/java/net/minecraft/server/EntityMinecartContainer.java
@@ -213,7 +213,7 @@ public abstract class EntityMinecartContainer extends EntityMinecartAbstract imp
     }
 
     public boolean b(EntityHuman entityhuman, EnumHand enumhand) {
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             entityhuman.openContainer(this);
         }
 
diff --git a/src/main/java/net/minecraft/server/EntityMinecartFurnace.java b/src/main/java/net/minecraft/server/EntityMinecartFurnace.java
index 762a7f966de8d1a758f3e517608f94feb0caafcb..b82b8dd18bace1ab4373f65ffbc10f393d01b3f9 100644
--- a/src/main/java/net/minecraft/server/EntityMinecartFurnace.java
+++ b/src/main/java/net/minecraft/server/EntityMinecartFurnace.java
@@ -40,11 +40,11 @@ public class EntityMinecartFurnace extends EntityMinecartAbstract {
         }
 
         this.l(this.d > 0);
-        /* // Reaper start - Clientside particles
+        /* // Beast start - Clientside particles
         if (this.j() && this.random.nextInt(4) == 0) {
             this.world.addParticle(EnumParticle.SMOKE_LARGE, this.locX, this.locY + 0.8D, this.locZ, 0.0D, 0.0D, 0.0D, new int[0]);
         }
-        */ // Reaper end
+        */ // Beast end
 
     }
 
diff --git a/src/main/java/net/minecraft/server/EntityMinecartHopper.java b/src/main/java/net/minecraft/server/EntityMinecartHopper.java
index 84143ff1f106e8916aee41aaac143b1913e2f061..5534792dffab3766401f23e61c34d03b95a7d4b2 100644
--- a/src/main/java/net/minecraft/server/EntityMinecartHopper.java
+++ b/src/main/java/net/minecraft/server/EntityMinecartHopper.java
@@ -35,7 +35,7 @@ public class EntityMinecartHopper extends EntityMinecartContainer implements IHo
     }
 
     public boolean b(EntityHuman entityhuman, EnumHand enumhand) {
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             entityhuman.openContainer(this);
         }
 
@@ -77,8 +77,8 @@ public class EntityMinecartHopper extends EntityMinecartContainer implements IHo
 
     public void B_() {
         super.B_();
-        if (this.isAlive() && this.isEnabled()) { // Reaper - Remove isClientSide check
-            BlockPosition blockposition = this.blockPos; // Reaper - Cache current block pos
+        if (this.isAlive() && this.isEnabled()) { // Beast - Remove isClientSide check
+            BlockPosition blockposition = this.blockPos; // Beast - Cache current block pos
 
             if (blockposition.equals(this.c)) {
                 --this.b;
diff --git a/src/main/java/net/minecraft/server/EntityMinecartMobSpawner.java b/src/main/java/net/minecraft/server/EntityMinecartMobSpawner.java
index f76f3eaf906537433cea7c55b78046b2929412de..b232a34f66fb7f3adfe38264a179a0c0e1c38571 100644
--- a/src/main/java/net/minecraft/server/EntityMinecartMobSpawner.java
+++ b/src/main/java/net/minecraft/server/EntityMinecartMobSpawner.java
@@ -12,7 +12,7 @@ public class EntityMinecartMobSpawner extends EntityMinecartAbstract {
         }
 
         public BlockPosition b() {
-            return EntityMinecartMobSpawner.this.blockPos; // Reaper - Cache current block pos
+            return EntityMinecartMobSpawner.this.blockPos; // Beast - Cache current block pos
         }
     };
 
diff --git a/src/main/java/net/minecraft/server/EntityMinecartTNT.java b/src/main/java/net/minecraft/server/EntityMinecartTNT.java
index 788fdf5fc8f390aaf2d8d62d20e6573e1858dfad..631d23f582aec6a679bd1e5464be63d5c905fb58 100644
--- a/src/main/java/net/minecraft/server/EntityMinecartTNT.java
+++ b/src/main/java/net/minecraft/server/EntityMinecartTNT.java
@@ -28,7 +28,7 @@ public class EntityMinecartTNT extends EntityMinecartAbstract {
         super.B_();
         if (this.a > 0) {
             --this.a;
-            // this.world.addParticle(EnumParticle.SMOKE_NORMAL, this.locX, this.locY + 0.5D, this.locZ, 0.0D, 0.0D, 0.0D, new int[0]); // Reaper - Clientside particles
+            // this.world.addParticle(EnumParticle.SMOKE_NORMAL, this.locX, this.locY + 0.5D, this.locZ, 0.0D, 0.0D, 0.0D, new int[0]); // Beast - Clientside particles
         } else if (this.a == 0) {
             this.c(this.motX * this.motX + this.motZ * this.motZ);
         }
@@ -76,7 +76,7 @@ public class EntityMinecartTNT extends EntityMinecartAbstract {
     }
 
     protected void c(double d0) {
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             double d1 = Math.sqrt(d0);
 
             if (d1 > 5.0D) {
@@ -108,7 +108,7 @@ public class EntityMinecartTNT extends EntityMinecartAbstract {
 
     public void j() {
         this.a = 80;
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             this.world.broadcastEntityEffect(this, (byte) 10);
             if (!this.isSilent()) {
                 this.world.a((EntityHuman) null, this.locX, this.locY, this.locZ, SoundEffects.hW, SoundCategory.BLOCKS, 1.0F, 1.0F);
diff --git a/src/main/java/net/minecraft/server/EntityMonster.java b/src/main/java/net/minecraft/server/EntityMonster.java
index 0abd9f226b3bb61b4aae959805f183a4b99b8f28..0dc4b0ddeb6ed61e8a0fbfb6e3a073e53e8901b0 100644
--- a/src/main/java/net/minecraft/server/EntityMonster.java
+++ b/src/main/java/net/minecraft/server/EntityMonster.java
@@ -1,6 +1,6 @@
 package net.minecraft.server;
 
-import com.github.ruviolence.reaper.BeastConfig;
+import com.homomc.beast.BeastConfig;
 import org.bukkit.event.entity.EntityCombustByEntityEvent; // CraftBukkit
 
 public abstract class EntityMonster extends EntityCreature implements IMonster {
@@ -27,7 +27,7 @@ public abstract class EntityMonster extends EntityCreature implements IMonster {
 
     public void B_() {
         super.B_();
-        if (this.world.getDifficulty() == EnumDifficulty.PEACEFUL) { // Reaper - Remove isClientSide check
+        if (this.world.getDifficulty() == EnumDifficulty.PEACEFUL) { // Beast - Remove isClientSide check
             this.die();
         }
 
@@ -69,7 +69,7 @@ public abstract class EntityMonster extends EntityCreature implements IMonster {
         boolean flag = entity.damageEntity(DamageSource.mobAttack(this), f);
 
         if (flag) {
-            if (i > 0 && /*entity instanceof EntityLiving*/true) { // Reaper - Optimize
+            if (i > 0 && /*entity instanceof EntityLiving*/true) { // Beast - Optimize
                 ((EntityLiving) entity).a(this, (float) i * 0.5F, (double) MathHelper.sin(this.yaw * 0.017453292F), (double) (-MathHelper.cos(this.yaw * 0.017453292F)));
                 this.motX *= 0.6D;
                 this.motZ *= 0.6D;
@@ -88,7 +88,7 @@ public abstract class EntityMonster extends EntityCreature implements IMonster {
                 // CraftBukkit end
             }
 
-            if (!BeastConfig.oldCombatBlockingModifier) // Reaper - Old combat
+            if (!BeastConfig.oldCombatBlockingModifier) // Beast - Old combat
             if (entity instanceof EntityHuman) {
                 EntityHuman entityhuman = (EntityHuman) entity;
                 ItemStack itemstack = this.getItemInMainHand();
diff --git a/src/main/java/net/minecraft/server/EntityMushroomCow.java b/src/main/java/net/minecraft/server/EntityMushroomCow.java
index ae9239c488c4d7510748b9567459f4b7d4e2a9e5..f6057fc3ee09b5c1d723682630f1c7c90740401f 100644
--- a/src/main/java/net/minecraft/server/EntityMushroomCow.java
+++ b/src/main/java/net/minecraft/server/EntityMushroomCow.java
@@ -28,7 +28,7 @@ public class EntityMushroomCow extends EntityCow {
 
             return true;
         } else if (itemstack.getItem() == Items.SHEARS && this.getAge() >= 0) {
-            if (this.dead) return false; // Reaper - Fix cow dupe
+            if (this.dead) return false; // Beast - Fix cow dupe
             // CraftBukkit start
             PlayerShearEntityEvent event = new PlayerShearEntityEvent((org.bukkit.entity.Player) entityhuman.getBukkitEntity(), this.getBukkitEntity());
             this.world.getServer().getPluginManager().callEvent(event);
@@ -38,8 +38,8 @@ public class EntityMushroomCow extends EntityCow {
             }
             // CraftBukkit end
             this.die();
-            // this.world.addParticle(EnumParticle.EXPLOSION_LARGE, this.locX, this.locY + (double) (this.length / 2.0F), this.locZ, 0.0D, 0.0D, 0.0D, new int[0]); // Reaper - Clientside particles
-            if (true) { // Reaper - Remove isClientSide check
+            // this.world.addParticle(EnumParticle.EXPLOSION_LARGE, this.locX, this.locY + (double) (this.length / 2.0F), this.locZ, 0.0D, 0.0D, 0.0D, new int[0]); // Beast - Clientside particles
+            if (true) { // Beast - Remove isClientSide check
                 EntityCow entitycow = new EntityCow(this.world);
 
                 entitycow.setPositionRotation(this.locX, this.locY, this.locZ, this.yaw, this.pitch);
diff --git a/src/main/java/net/minecraft/server/EntityOcelot.java b/src/main/java/net/minecraft/server/EntityOcelot.java
index cb6a4fb79772aa9c229c0bd2f6a64d029e4553e4..e61fd6612aeb4c22c1de0f0fedba6cd32a27afac 100644
--- a/src/main/java/net/minecraft/server/EntityOcelot.java
+++ b/src/main/java/net/minecraft/server/EntityOcelot.java
@@ -126,7 +126,7 @@ public class EntityOcelot extends EntityTameableAnimal {
         ItemStack itemstack = entityhuman.b(enumhand);
 
         if (this.isTamed()) {
-            if (this.e((EntityLiving) entityhuman) && !this.e(itemstack)) { // Reaper - Remove isClientSide check
+            if (this.e((EntityLiving) entityhuman) && !this.e(itemstack)) { // Beast - Remove isClientSide check
                 this.goalSit.setSitting(!this.isSitting());
             }
         } else if ((this.bD == null || this.bD.f()) && itemstack.getItem() == Items.FISH && entityhuman.h(this) < 9.0D) {
@@ -134,7 +134,7 @@ public class EntityOcelot extends EntityTameableAnimal {
                 itemstack.subtract(1);
             }
 
-            if (true) { // Reaper - Remove isClientSide check
+            if (true) { // Beast - Remove isClientSide check
                 // CraftBukkit - added event call and isCancelled check
                 if (this.random.nextInt(3) == 0 && !org.bukkit.craftbukkit.event.CraftEventFactory.callEntityTameEvent(this, entityhuman).isCancelled()) {
                     this.c(entityhuman);
diff --git a/src/main/java/net/minecraft/server/EntityPainting.java b/src/main/java/net/minecraft/server/EntityPainting.java
index f5a0e875adb37bb0d00e371d4b846c3559576654..49e97cc6561f217f828bed9c81668788779b5f91 100644
--- a/src/main/java/net/minecraft/server/EntityPainting.java
+++ b/src/main/java/net/minecraft/server/EntityPainting.java
@@ -11,14 +11,14 @@ public class EntityPainting extends EntityHanging {
 
     public EntityPainting(World world) {
         super(world);
-        this.art = EnumArt.VALUES[this.random.nextInt(EnumArt.VALUES.length)]; // Reaper - Single values array // CraftBukkit - generate a non-null painting
+        this.art = EnumArt.VALUES[this.random.nextInt(EnumArt.VALUES.length)]; // Beast - Single values array // CraftBukkit - generate a non-null painting
     }
 
     public EntityPainting(World world, BlockPosition blockposition, EnumDirection enumdirection) {
         super(world, blockposition);
         ArrayList arraylist = Lists.newArrayList();
         int i = 0;
-        EntityPainting.EnumArt[] aentitypainting_enumart = EntityPainting.EnumArt.VALUES; // Reaper - Single values array
+        EntityPainting.EnumArt[] aentitypainting_enumart = EntityPainting.EnumArt.VALUES; // Beast - Single values array
         int j = aentitypainting_enumart.length;
 
         for (int k = 0; k < j; ++k) {
@@ -60,7 +60,7 @@ public class EntityPainting extends EntityHanging {
 
     public void a(NBTTagCompound nbttagcompound) {
         String s = nbttagcompound.getString("Motive");
-        EntityPainting.EnumArt[] aentitypainting_enumart = EntityPainting.EnumArt.VALUES; // Reaper - Single values array
+        EntityPainting.EnumArt[] aentitypainting_enumart = EntityPainting.EnumArt.VALUES; // Beast - Single values array
         int i = aentitypainting_enumart.length;
 
         for (int j = 0; j < i; ++j) {
@@ -119,7 +119,7 @@ public class EntityPainting extends EntityHanging {
         public final int D;
         public final int E;
         public final int F;
-        public static final EntityPainting.EnumArt[] VALUES = values(); // Reaper - Single values array
+        public static final EntityPainting.EnumArt[] VALUES = values(); // Beast - Single values array
 
         private EnumArt(String s, int i, int j, int k, int l) {
             this.B = s;
diff --git a/src/main/java/net/minecraft/server/EntityParrot.java b/src/main/java/net/minecraft/server/EntityParrot.java
index e9c9ff9d52a3dbdedf82f84822e180735ca4edc5..cc1ce846d1fb91e5271aab829214e4ad579ab746 100644
--- a/src/main/java/net/minecraft/server/EntityParrot.java
+++ b/src/main/java/net/minecraft/server/EntityParrot.java
@@ -139,7 +139,7 @@ public class EntityParrot extends EntityPerchable implements EntityBird {
                 this.world.a((EntityHuman) null, this.locX, this.locY, this.locZ, SoundEffects.eJ, this.bK(), 1.0F, 1.0F + (this.random.nextFloat() - this.random.nextFloat()) * 0.2F);
             }
 
-            if (true) { // Reaper - Remove isClientSide check
+            if (true) { // Beast - Remove isClientSide check
                 if (this.random.nextInt(10) == 0 && !org.bukkit.craftbukkit.event.CraftEventFactory.callEntityTameEvent(this, entityhuman).isCancelled()) { // CraftBukkit
                     this.c(entityhuman);
                     this.p(true);
@@ -163,7 +163,7 @@ public class EntityParrot extends EntityPerchable implements EntityBird {
 
             return true;
         } else {
-            if (!this.a() && this.isTamed() && this.e((EntityLiving) entityhuman)) { // Reaper - Remove isClientSide check
+            if (!this.a() && this.isTamed() && this.e((EntityLiving) entityhuman)) { // Beast - Remove isClientSide check
                 this.goalSit.setSitting(!this.isSitting());
             }
 
@@ -225,10 +225,10 @@ public class EntityParrot extends EntityPerchable implements EntityBird {
     }
 
     public static SoundEffect g(int i) {
-        // Reaper start - Optimize map get
+        // Beast start - Optimize map get
         SoundEffect sound = EntityParrot.bK.get(i);
         return sound != null ? sound : SoundEffects.eH;
-        // Reaper end
+        // Beast end
     }
 
     protected SoundEffect d(DamageSource damagesource) {
diff --git a/src/main/java/net/minecraft/server/EntityPig.java b/src/main/java/net/minecraft/server/EntityPig.java
index 9438d92a0035eccad87ef58fcc5c779dc5b37e65..c0d9981f5333e6fcc211cf42be183084fd2c583d 100644
--- a/src/main/java/net/minecraft/server/EntityPig.java
+++ b/src/main/java/net/minecraft/server/EntityPig.java
@@ -40,7 +40,7 @@ public class EntityPig extends EntityAnimal {
 
     @Nullable
     public Entity bE() {
-        return this.isPassengersEmpty() ? null : (Entity) this.bF().get(0); // Reaper
+        return this.isPassengersEmpty() ? null : (Entity) this.bF().get(0); // Beast
     }
 
     public boolean cV() {
@@ -56,7 +56,7 @@ public class EntityPig extends EntityAnimal {
     }
 
     public void a(DataWatcherObject<?> datawatcherobject) {
-        if (false) { // Reaper - Remove isClientSide check
+        if (false) { // Beast - Remove isClientSide check
             this.bB = true;
             this.bC = 0;
             this.bD = ((Integer) this.datawatcher.get(EntityPig.by)).intValue();
@@ -109,7 +109,7 @@ public class EntityPig extends EntityAnimal {
                 itemstack.a(entityhuman, (EntityLiving) this, enumhand);
                 return true;
             } else if (this.hasSaddle() && !this.isVehicle()) {
-                if (true) { // Reaper - Remove isClientSide check
+                if (true) { // Beast - Remove isClientSide check
                     entityhuman.startRiding(this);
                 }
 
@@ -127,7 +127,7 @@ public class EntityPig extends EntityAnimal {
 
     public void die(DamageSource damagesource) {
         // super.die(damagesource); // CraftBukkit - Moved to end
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             if (this.hasSaddle()) {
                 this.a(Items.SADDLE, 1);
             }
@@ -155,7 +155,7 @@ public class EntityPig extends EntityAnimal {
     }
 
     public void onLightningStrike(EntityLightning entitylightning) {
-        if (!this.dead) { // Reaper - Remove isClientSide check
+        if (!this.dead) { // Beast - Remove isClientSide check
             EntityPigZombie entitypigzombie = new EntityPigZombie(this.world);
 
             // Paper start
@@ -185,7 +185,7 @@ public class EntityPig extends EntityAnimal {
     }
 
     public void a(float f, float f1, float f2) {
-        Entity entity = this.isPassengersEmpty() ? null : (Entity) this.bF().get(0); // Reaper
+        Entity entity = this.isPassengersEmpty() ? null : (Entity) this.bF().get(0); // Beast
 
         if (this.isVehicle() && this.cV()) {
             this.yaw = entity.yaw;
diff --git a/src/main/java/net/minecraft/server/EntityPlayer.java b/src/main/java/net/minecraft/server/EntityPlayer.java
index 6ad7e9037dc0b7b12578d954a207b4587b6ebfe4..fe8482c5299fc627022f0841ac252dd82c37efaa 100644
--- a/src/main/java/net/minecraft/server/EntityPlayer.java
+++ b/src/main/java/net/minecraft/server/EntityPlayer.java
@@ -1,6 +1,6 @@
 package net.minecraft.server;
 
-import com.github.ruviolence.reaper.BeastConfig;
+import com.homomc.beast.BeastConfig;
 import com.google.common.collect.Lists;
 import com.mojang.authlib.GameProfile;
 import io.netty.buffer.Unpooled;
@@ -77,20 +77,20 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
     }
     public void setViewDistance(int viewDistance) {
         this.viewDistance = viewDistance;
-        this.furthestViewableBlock = PlayerChunkMap.getFurthestViewableBlock(getViewDistance()); // Reaper - Dynamic view distance
+        this.furthestViewableBlock = PlayerChunkMap.getFurthestViewableBlock(getViewDistance()); // Beast - Dynamic view distance
     }
     // Paper end
-    // Reaper start - Dynamic view distance
+    // Beast start - Dynamic view distance
     private int clientsideViewDistance = 0; public int getClientsideViewDistance() { return this.clientsideViewDistance; }
     private int nextViewDistanceUpdateTick = 0;
     private int furthestViewableBlock = PlayerChunkMap.getFurthestViewableBlock(getViewDistance()); public int getFurthestViewableBlock() { return furthestViewableBlock; }
-    // Reaper end
+    // Beast end
     private int containerUpdateDelay; // Paper
     // Paper start - cancellable death event
     public boolean queueHealthUpdatePacket = false;
     public net.minecraft.server.PacketPlayOutUpdateHealth queuedHealthUpdatePacket;
     // Paper end
-    // Reaper start - Delayed chunks
+    // Beast start - Delayed chunks
     private List<ChunkCoordIntPair> delayedChunks; public List<ChunkCoordIntPair> getDelayedChunks() { return delayedChunks; }
     private int chunkSendLimit;
     public int chunkSendLimitLeft;
@@ -143,7 +143,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
         if (!BeastConfig.delayedChunksEnabled) return;
         this.chunkSendLimit = limit > 0 ? limit : 1;
     }
-    // Reaper end
+    // Beast end
 
     // CraftBukkit start
     public String displayName;
@@ -181,7 +181,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
         this.canPickUpLoot = true;
         this.maxHealthCache = this.getMaxHealth();
         // CraftBukkit end
-        initDelayedChunksList(); // Reaper - Delayed chunks
+        initDelayedChunksList(); // Beast - Delayed chunks
     }
 
     public final BlockPosition getSpawnPoint(MinecraftServer minecraftserver, WorldServer worldserver) {
@@ -252,7 +252,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
         nbttagcompound.setInt("playerGameType", this.playerInteractManager.getGameMode().getId());
         nbttagcompound.setBoolean("seenCredits", this.cq);
         if (this.cv != null) {
-            NBTTagCompound nbttagcompound1 = new NBTTagCompound(3); // Reaper - Use initial capacity
+            NBTTagCompound nbttagcompound1 = new NBTTagCompound(3); // Beast - Use initial capacity
 
             nbttagcompound1.setDouble("x", this.cv.x);
             nbttagcompound1.setDouble("y", this.cv.y);
@@ -264,7 +264,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
         Entity entity1 = this.bJ();
 
         if (entity1 != null && entity != this && entity.b(EntityPlayer.class).size() == 1) {
-            NBTTagCompound nbttagcompound2 = new NBTTagCompound(3); // Reaper - Use initial capacity
+            NBTTagCompound nbttagcompound2 = new NBTTagCompound(3); // Beast - Use initial capacity
             NBTTagCompound nbttagcompound3 = new NBTTagCompound();
 
             entity.d(nbttagcompound3);
@@ -283,7 +283,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
         if (world == null) {
             this.dead = false;
             BlockPosition position = null;
-            if (this.spawnWorld != null && !this.spawnWorld.isEmpty()) { // Reaper - Optimize
+            if (this.spawnWorld != null && !this.spawnWorld.isEmpty()) { // Beast - Optimize
                 CraftWorld cworld = (CraftWorld) Bukkit.getServer().getWorld(this.spawnWorld);
                 if (cworld != null && this.getBed() != null) {
                     world = cworld.getHandle();
@@ -352,7 +352,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
             containerUpdateDelay = world.paperConfig.containerUpdateTickRate;
         }
         // Paper end
-        if (!this.activeContainer.canUse(this)) { // Reaper - Remove isClientSide check
+        if (!this.activeContainer.canUse(this)) { // Beast - Remove isClientSide check
             this.closeInventory(org.bukkit.event.inventory.InventoryCloseEvent.Reason.CANT_USE); // Paper
             this.activeContainer = this.defaultContainer;
         }
@@ -360,7 +360,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
         while (!this.removeQueue.isEmpty()) {
             int i = Math.min(this.removeQueue.size(), Integer.MAX_VALUE);
             int[] aint = new int[i];
-            // Iterator iterator = this.removeQueue.iterator(); // Reaper - Optimize
+            // Iterator iterator = this.removeQueue.iterator(); // Beast - Optimize
             int j = 0;
 
             // Paper start
@@ -478,10 +478,10 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
                 this.oldLevel = this.expLevel;
             }
             // CraftBukkit end
-            // Reaper start - Delayed chunks
+            // Beast start - Delayed chunks
             sendDelayedChunks();
             this.chunkSendLimitLeft = this.chunkSendLimit;
-            // Reaper end
+            // Beast end
         } catch (Throwable throwable) {
             CrashReport crashreport = CrashReport.a(throwable, "Ticking player");
             CrashReportSystemDetails crashreportsystemdetails = crashreport.a("Player being ticked");
@@ -548,13 +548,13 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
                     if (scoreboardteambase.getDeathMessageVisibility() == ScoreboardTeamBase.EnumNameTagVisibility.HIDE_FOR_OTHER_TEAMS) {
                         this.server.getPlayerList().a((EntityHuman) this, chatmessage);
                     } else if (scoreboardteambase.getDeathMessageVisibility() == ScoreboardTeamBase.EnumNameTagVisibility.HIDE_FOR_OWN_TEAM) {
-                        this.server.getPlayerList().sendMessageToTeamOrAllPlayersFast((EntityHuman) this, chatmessage); // Reaper
+                        this.server.getPlayerList().sendMessageToTeamOrAllPlayersFast((EntityHuman) this, chatmessage); // Beast
                     }
                 } else {
-                    this.server.getPlayerList().sendMessageFast(chatmessage, true); // Reaper
+                    this.server.getPlayerList().sendMessageFast(chatmessage, true); // Beast
                 }
             } else {
-                this.server.getPlayerList().sendMessage(org.bukkit.craftbukkit.util.CraftChatMessage.fromStringFast(deathMessage)); // Reaper
+                this.server.getPlayerList().sendMessage(org.bukkit.craftbukkit.util.CraftChatMessage.fromStringFast(deathMessage)); // Beast
             }
         }
 
@@ -746,7 +746,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
             this.playerConnection.sendPacket(new PacketPlayOutWorldEvent(1032, BlockPosition.ZERO, 0, false));
             this.lastSentExp = -1;
             this.lastHealthSent = -1.0F;
-            this.setSneaking(false); // Reaper - Fix MC-10657
+            this.setSneaking(false); // Beast - Fix MC-10657
             this.ch = -1;
             return this;
         }
@@ -811,7 +811,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
 
             if (entity2 != entity1 && this.playerConnection != null) {
                 this.playerConnection.a(this.locX, this.locY, this.locZ, this.yaw, this.pitch);
-                x().getPlayerChunkMap().movePlayer(this); // Reaper - Fix PyroClient AutoDupe
+                x().getPlayerChunkMap().movePlayer(this); // Beast - Fix PyroClient AutoDupe
             }
 
             return true;
@@ -1042,10 +1042,10 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
         this.playerConnection.sendPacket(new PacketPlayOutWindowItems(container.windowId, nonnulllist));
         this.playerConnection.sendPacket(new PacketPlayOutSetSlot(-1, -1, this.inventory.getCarried()));
         // CraftBukkit start - Send a Set Slot to update the crafting result slot
-        // Reaper start - Optimize
+        // Beast start - Optimize
         InventoryType type = container.getBukkitView().getType();
         if (type == InventoryType.CRAFTING || type == InventoryType.WORKBENCH) {
-            // Reaper end
+            // Beast end
             this.playerConnection.sendPacket(new PacketPlayOutSetSlot(container.windowId, 0, container.getSlot(0).getItem()));
         }
         // CraftBukkit end
@@ -1138,7 +1138,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
         int i = aminecraftkey.length;
 
         for (int j = 0; j < i; ++j) {
-            MinecraftKey minecraftkey = aminecraftkey[j]; // Reaper - Inline
+            MinecraftKey minecraftkey = aminecraftkey[j]; // Beast - Inline
 
             // CraftBukkit start
             if (CraftingManager.a(minecraftkey) == null) {
@@ -1356,10 +1356,10 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
     public String A() {
         String s = this.playerConnection.networkManager.getSocketAddress().toString();
 
-        // Reaper start - Optimize
+        // Beast start - Optimize
         s = s.substring(s.indexOf('/') + 1);
         s = s.substring(0, s.indexOf(':'));
-        // Reaper end
+        // Beast end
         return s;
     }
 
@@ -1387,9 +1387,9 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
             this.server.server.getPluginManager().callEvent(event);
         }
         // CraftBukkit end
-        this.cl = EnumChatVisibility.FULL; // Reaper - Always full chat visibility
+        this.cl = EnumChatVisibility.FULL; // Beast - Always full chat visibility
         this.cm = packetplayinsettings.d();
-        // Reaper start - Dynamic view distance
+        // Beast start - Dynamic view distance
         if (BeastConfig.dynamicViewDistance) {
             if (viewDistance != packetplayinsettings.getViewDistance() && nextViewDistanceUpdateTick < MinecraftServer.currentTick) {
                 this.nextViewDistanceUpdateTick = MinecraftServer.currentTick + (20 * 15);
@@ -1401,7 +1401,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
                 ((WorldServer) world).getTracker().a(this); // Update entity tracker
             }
         }
-        // Reaper end
+        // Beast end
         this.getDataWatcher().set(EntityPlayer.br, Byte.valueOf((byte) packetplayinsettings.e()));
         this.getDataWatcher().set(EntityPlayer.bs, Byte.valueOf((byte) (packetplayinsettings.getMainHand() == EnumMainHand.LEFT ? 0 : 1)));
     }
@@ -1451,7 +1451,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
             super.G();
         }
 
-        // this.x().getTracker().a(this); // Reaper - Reduce entity tracker updates
+        // this.x().getTracker().a(this); // Beast - Reduce entity tracker updates
     }
 
     public Entity getSpecatorTarget() {
@@ -1642,7 +1642,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
 
         this.setHealth(this.getMaxHealth());
         this.fireTicks = 0;
-        this.setAirTicks(300); // Reaper - Reset airTicks on respawn
+        this.setAirTicks(300); // Beast - Reset airTicks on respawn
         this.fallDistance = 0;
         this.foodData = new FoodMetaData(this);
         this.expLevel = this.newLevel;
diff --git a/src/main/java/net/minecraft/server/EntityPotion.java b/src/main/java/net/minecraft/server/EntityPotion.java
index 0385d8ca8be264658a09e1dcf4fa70b04b0d3994..40804640c9767de1a833e9423f860227e2d2eefb 100644
--- a/src/main/java/net/minecraft/server/EntityPotion.java
+++ b/src/main/java/net/minecraft/server/EntityPotion.java
@@ -72,7 +72,7 @@ public class EntityPotion extends EntityProjectile {
     }
 
     protected void a(MovingObjectPosition movingobjectposition) {
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             ItemStack itemstack = this.getItem();
             PotionRegistry potionregistry = PotionUtil.d(itemstack);
             List list = PotionUtil.getEffects(itemstack);
@@ -103,7 +103,7 @@ public class EntityPotion extends EntityProjectile {
 
             int i = potionregistry.c() ? 2007 : 2002;
 
-            this.world.triggerEffect(i, this.blockPos, PotionUtil.c(itemstack)); // Reaper - Cache current block pos
+            this.world.triggerEffect(i, this.blockPos, PotionUtil.c(itemstack)); // Beast - Cache current block pos
             this.die();
         }
     }
@@ -262,7 +262,7 @@ public class EntityPotion extends EntityProjectile {
         ItemStack itemstack = this.getItem();
 
         if (!itemstack.isEmpty()) {
-            nbttagcompound.set("Potion", itemstack.save(new NBTTagCompound(4))); // Reaper - Use initial capacity
+            nbttagcompound.set("Potion", itemstack.save(new NBTTagCompound(4))); // Beast - Use initial capacity
         }
 
     }
diff --git a/src/main/java/net/minecraft/server/EntityProjectile.java b/src/main/java/net/minecraft/server/EntityProjectile.java
index bc8359a1d2a319d0af16fa11c706085a5f6679b8..af1e18b9b493d76c99e4e6571d68cdad48171521 100644
--- a/src/main/java/net/minecraft/server/EntityProjectile.java
+++ b/src/main/java/net/minecraft/server/EntityProjectile.java
@@ -1,6 +1,6 @@
 package net.minecraft.server;
 
-import com.github.ruviolence.reaper.BeastConfig;
+import com.homomc.beast.BeastConfig;
 
 import java.util.List;
 import javax.annotation.Nullable;
@@ -47,7 +47,7 @@ public abstract class EntityProjectile extends Entity implements IProjectile {
         float f7 = MathHelper.cos(f1 * 0.017453292F) * MathHelper.cos(f * 0.017453292F);
 
         this.shoot((double) f5, (double) f6, (double) f7, f3, f4);
-        if (BeastConfig.oldCombatProjectileMotion) return; // Reaper - Old combat
+        if (BeastConfig.oldCombatProjectileMotion) return; // Beast - Old combat
         this.motX += entity.motX;
         this.motZ += entity.motZ;
         if (!entity.onGround) {
@@ -213,13 +213,13 @@ public abstract class EntityProjectile extends Entity implements IProjectile {
         float f2 = this.j();
 
         if (this.isInWater()) {
-            /* // Reaper start - Clientside particles
+            /* // Beast start - Clientside particles
             for (int j = 0; j < 4; ++j) {
                 float f3 = 0.25F;
 
                 this.world.addParticle(EnumParticle.WATER_BUBBLE, this.locX - this.motX * 0.25D, this.locY - this.motY * 0.25D, this.locZ - this.motZ * 0.25D, this.motX, this.motY, this.motZ, new int[0]);
             }
-            */ // Reaper end
+            */ // Beast end
 
             f1 = 0.8F;
         }
@@ -248,7 +248,7 @@ public abstract class EntityProjectile extends Entity implements IProjectile {
         nbttagcompound.setInt("zTile", this.blockZ);
         MinecraftKey minecraftkey = (MinecraftKey) Block.REGISTRY.b(this.inBlockId);
 
-        nbttagcompound.setString("inTile", /*minecraftkey == null*/false ? "" : minecraftkey.toString()); // Reaper - Optimize
+        nbttagcompound.setString("inTile", /*minecraftkey == null*/false ? "" : minecraftkey.toString()); // Beast - Optimize
         nbttagcompound.setByte("shake", (byte) this.shake);
         nbttagcompound.setByte("inGround", (byte) (this.inGround ? 1 : 0));
         if ((this.shooterName == null || this.shooterName.isEmpty()) && this.shooter instanceof EntityHuman) {
@@ -286,7 +286,7 @@ public abstract class EntityProjectile extends Entity implements IProjectile {
             this.shooter = this.world.a(this.shooterName);
             if (this.shooter == null && this.world instanceof WorldServer) {
                 try {
-                    Entity entity = ((WorldServer) this.world).getEntity(com.eatthepath.uuid.FastUUID.parseUUID(this.shooterName)); // Reaper - Use FastUUID
+                    Entity entity = ((WorldServer) this.world).getEntity(com.eatthepath.uuid.FastUUID.parseUUID(this.shooterName)); // Beast - Use FastUUID
 
                     if (entity instanceof EntityLiving) {
                         this.shooter = (EntityLiving) entity;
diff --git a/src/main/java/net/minecraft/server/EntityRabbit.java b/src/main/java/net/minecraft/server/EntityRabbit.java
index e441f15c5b1421baba9ca6b1ad74453898fcd94f..b544314e5b88c74ca25e9e69c644141d42b9ce80 100644
--- a/src/main/java/net/minecraft/server/EntityRabbit.java
+++ b/src/main/java/net/minecraft/server/EntityRabbit.java
@@ -70,7 +70,7 @@ public class EntityRabbit extends EntityAnimal {
             }
         }
 
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             this.world.broadcastEntityEffect(this, (byte) 1);
         }
 
@@ -316,7 +316,7 @@ public class EntityRabbit extends EntityAnimal {
     }
 
     private int dw() {
-        BiomeBase biomebase = this.world.getBiome(this.blockPos); // Reaper - Cache current block pos
+        BiomeBase biomebase = this.world.getBiome(this.blockPos); // Beast - Cache current block pos
         int i = this.random.nextInt(100);
 
         return biomebase.p() ? (i < 80 ? 1 : 3) : (biomebase instanceof BiomeDesert ? 4 : (i < 50 ? 0 : (i < 90 ? 5 : 2)));
@@ -327,12 +327,12 @@ public class EntityRabbit extends EntityAnimal {
     }
 
     protected void do_() {
-        /* // Reaper start - Clientside particles
+        /* // Beast start - Clientside particles
         BlockCarrots blockcarrots = (BlockCarrots) Blocks.CARROTS;
         IBlockData iblockdata = blockcarrots.setAge(blockcarrots.g());
 
         this.world.addParticle(EnumParticle.BLOCK_DUST, this.locX + (double) (this.random.nextFloat() * this.width * 2.0F) - (double) this.width, this.locY + 0.5D + (double) (this.random.nextFloat() * this.length), this.locZ + (double) (this.random.nextFloat() * this.width * 2.0F) - (double) this.width, 0.0D, 0.0D, 0.0D, new int[] { Block.getCombinedId(iblockdata)});
-        */ // Reaper end
+        */ // Beast end
         this.bD = 40;
     }
 
diff --git a/src/main/java/net/minecraft/server/EntitySenses.java b/src/main/java/net/minecraft/server/EntitySenses.java
index 7e6e0bf663bd849b70b5695d1e97e326323a526d..df90cc7b7de84b130dc582f1edd9f244acef6dfe 100644
--- a/src/main/java/net/minecraft/server/EntitySenses.java
+++ b/src/main/java/net/minecraft/server/EntitySenses.java
@@ -24,10 +24,10 @@ public class EntitySenses {
         } else if (this.c.contains(entity)) {
             return false;
         } else {
-            // this.a.world.methodProfiler.a("canSee"); // Reaper - Remove MethodProfiler
+            // this.a.world.methodProfiler.a("canSee"); // Beast - Remove MethodProfiler
             boolean flag = this.a.hasLineOfSight(entity);
 
-            // this.a.world.methodProfiler.b(); // Reaper - Remove MethodProfiler
+            // this.a.world.methodProfiler.b(); // Beast - Remove MethodProfiler
             if (flag) {
                 this.b.add(entity);
             } else {
diff --git a/src/main/java/net/minecraft/server/EntitySheep.java b/src/main/java/net/minecraft/server/EntitySheep.java
index 94486bee4f4afdd38044c6ca6e304b53702bd3db..8c8be2d77ec98b4bffa9deb6f9e98e111333ce6e 100644
--- a/src/main/java/net/minecraft/server/EntitySheep.java
+++ b/src/main/java/net/minecraft/server/EntitySheep.java
@@ -64,7 +64,7 @@ public class EntitySheep extends EntityAnimal {
     }
 
     public void n() {
-        if (false) { // Reaper - Remove isClientSide check
+        if (false) { // Beast - Remove isClientSide check
             this.bB = Math.max(0, this.bB - 1);
         }
 
@@ -144,7 +144,7 @@ public class EntitySheep extends EntityAnimal {
         ItemStack itemstack = entityhuman.b(enumhand);
 
         if (itemstack.getItem() == Items.SHEARS && !this.isSheared() && !this.isBaby()) {
-            if (true) { // Reaper - Remove isClientSide check
+            if (true) { // Beast - Remove isClientSide check
                 // CraftBukkit start
                 PlayerShearEntityEvent event = new PlayerShearEntityEvent((org.bukkit.entity.Player) entityhuman.getBukkitEntity(), this.getBukkitEntity());
                 this.world.getServer().getPluginManager().callEvent(event);
diff --git a/src/main/java/net/minecraft/server/EntityShulker.java b/src/main/java/net/minecraft/server/EntityShulker.java
index 00839007d469a46a342c0bd5457d4d74cce94ed9..f28dd9b69587503e995555eaeedc5f63e9778d00 100644
--- a/src/main/java/net/minecraft/server/EntityShulker.java
+++ b/src/main/java/net/minecraft/server/EntityShulker.java
@@ -13,7 +13,7 @@ import org.bukkit.event.entity.EntityTeleportEvent;
 
 public class EntityShulker extends EntityGolem implements IMonster {
 
-    private static final UUID bz = com.eatthepath.uuid.FastUUID.parseUUID("7E0292F2-9434-48D5-A29F-9583AF7DF27F"); // Reaper - Use FastUUID
+    private static final UUID bz = com.eatthepath.uuid.FastUUID.parseUUID("7E0292F2-9434-48D5-A29F-9583AF7DF27F"); // Beast - Use FastUUID
     private static final AttributeModifier bA = (new AttributeModifier(EntityShulker.bz, "Covered armor bonus", 20.0D, 0)).a(false);
     protected static final DataWatcherObject<EnumDirection> a = DataWatcher.a(EntityShulker.class, DataWatcherRegistry.l);
     protected static final DataWatcherObject<Optional<BlockPosition>> b = DataWatcher.a(EntityShulker.class, DataWatcherRegistry.k);
@@ -140,8 +140,8 @@ public class EntityShulker extends EntityGolem implements IMonster {
         super.B_();
         BlockPosition blockposition = (BlockPosition) ((Optional) this.datawatcher.get(EntityShulker.b)).orNull();
 
-        if (blockposition == null) { // Reaper - Remove isClientSide check
-            blockposition = this.blockPos; // Reaper - Cache current block pos
+        if (blockposition == null) { // Beast - Remove isClientSide check
+            blockposition = this.blockPos; // Beast - Cache current block pos
             this.datawatcher.set(EntityShulker.b, Optional.of(blockposition));
         }
 
@@ -154,7 +154,7 @@ public class EntityShulker extends EntityGolem implements IMonster {
             this.aN = f;
             this.aO = f;
             this.bE = 0;
-        } else if (true) { // Reaper - Remove isClientSide check
+        } else if (true) { // Beast - Remove isClientSide check
             IBlockData iblockdata = this.world.getType(blockposition);
 
             if (iblockdata.getMaterial() != Material.AIR) {
@@ -185,7 +185,7 @@ public class EntityShulker extends EntityGolem implements IMonster {
 
             if (!this.world.d(blockposition1, false)) {
                 boolean flag = false;
-                EnumDirection[] aenumdirection = EnumDirection.VALUES; // Reaper - Single values array
+                EnumDirection[] aenumdirection = EnumDirection.VALUES; // Beast - Single values array
                 int i = aenumdirection.length;
 
                 for (int j = 0; j < i; ++j) {
@@ -220,7 +220,7 @@ public class EntityShulker extends EntityGolem implements IMonster {
         }
 
         if (blockposition != null) {
-            if (false) { // Reaper - Remove isClientSide check
+            if (false) { // Beast - Remove isClientSide check
                 if (this.bE > 0 && this.bD != null) {
                     --this.bE;
                 } else {
@@ -231,7 +231,7 @@ public class EntityShulker extends EntityGolem implements IMonster {
             this.locX = (double) blockposition.getX() + 0.5D;
             this.locY = (double) blockposition.getY();
             this.locZ = (double) blockposition.getZ() + 0.5D;
-            resetBlockPos(); // Reaper - Cache current block pos
+            resetBlockPos(); // Beast - Cache current block pos
             if (valid) world.entityJoinedWorld(this, false); // CraftBukkit
             this.lastX = this.locX;
             this.lastY = this.locY;
@@ -298,7 +298,7 @@ public class EntityShulker extends EntityGolem implements IMonster {
     }
 
     public void move(EnumMoveType enummovetype, double d0, double d1, double d2) {
-        this.moveType = enummovetype; // Reaper - EntityMoveEvent
+        this.moveType = enummovetype; // Beast - EntityMoveEvent
         if (enummovetype == EnumMoveType.SHULKER_BOX) {
             this.p();
         } else {
@@ -324,14 +324,14 @@ public class EntityShulker extends EntityGolem implements IMonster {
 
     protected boolean p() {
         if (!this.isNoAI() && this.isAlive()) {
-            BlockPosition blockposition = this.blockPos; // Reaper - Cache current block pos
+            BlockPosition blockposition = this.blockPos; // Beast - Cache current block pos
 
             for (int i = 0; i < 5; ++i) {
                 BlockPosition blockposition1 = blockposition.a(8 - this.random.nextInt(17), 8 - this.random.nextInt(17), 8 - this.random.nextInt(17));
 
                 if (blockposition1.getY() > 0 && this.world.isEmpty(blockposition1) && this.world.g(this) && this.world.getCubes(this, new AxisAlignedBB(blockposition1)).isEmpty()) {
                     boolean flag = false;
-                    EnumDirection[] aenumdirection = EnumDirection.VALUES; // Reaper - Single values array
+                    EnumDirection[] aenumdirection = EnumDirection.VALUES; // Beast - Single values array
                     int j = aenumdirection.length;
 
                     for (int k = 0; k < j; ++k) {
@@ -380,7 +380,7 @@ public class EntityShulker extends EntityGolem implements IMonster {
     }
 
     public void a(DataWatcherObject<?> datawatcherobject) {
-        if (false) { // Reaper - Remove isClientSide check
+        if (false) { // Beast - Remove isClientSide check
             BlockPosition blockposition = this.dm();
 
             if (blockposition != null) {
@@ -452,7 +452,7 @@ public class EntityShulker extends EntityGolem implements IMonster {
     }
 
     public void a(int i) {
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             this.getAttributeInstance(GenericAttributes.h).c(EntityShulker.bA);
             if (i == 0) {
                 this.getAttributeInstance(GenericAttributes.h).b(EntityShulker.bA);
diff --git a/src/main/java/net/minecraft/server/EntityShulkerBullet.java b/src/main/java/net/minecraft/server/EntityShulkerBullet.java
index 72f8f69ee21f8ac3130bd4eb16edb45cd11d980a..205e1e97ff11871e5610d875613dfd2177515fd3 100644
--- a/src/main/java/net/minecraft/server/EntityShulkerBullet.java
+++ b/src/main/java/net/minecraft/server/EntityShulkerBullet.java
@@ -37,7 +37,7 @@ public class EntityShulkerBullet extends Entity {
     public EntityShulkerBullet(World world, EntityLiving entityliving, Entity entity, EnumDirection.EnumAxis enumdirection_enumaxis) {
         this(world);
         this.shooter = entityliving;
-        BlockPosition blockposition = entityliving.blockPos; // Reaper - Cache current block pos
+        BlockPosition blockposition = entityliving.blockPos; // Beast - Cache current block pos
         double d0 = (double) blockposition.getX() + 0.5D;
         double d1 = (double) blockposition.getY() + 0.5D;
         double d2 = (double) blockposition.getZ() + 0.5D;
@@ -74,7 +74,7 @@ public class EntityShulkerBullet extends Entity {
         NBTTagCompound nbttagcompound1;
 
         if (this.shooter != null) {
-            blockposition = this.shooter.blockPos; // Reaper - Cache current block pos
+            blockposition = this.shooter.blockPos; // Beast - Cache current block pos
             nbttagcompound1 = GameProfileSerializer.a(this.shooter.getUniqueID());
             nbttagcompound1.setInt("X", blockposition.getX());
             nbttagcompound1.setInt("Y", blockposition.getY());
@@ -83,7 +83,7 @@ public class EntityShulkerBullet extends Entity {
         }
 
         if (this.target != null) {
-            blockposition = this.target.blockPos; // Reaper - Cache current block pos
+            blockposition = this.target.blockPos; // Beast - Cache current block pos
             nbttagcompound1 = GameProfileSerializer.a(this.target.getUniqueID());
             nbttagcompound1.setInt("X", blockposition.getX());
             nbttagcompound1.setInt("Y", blockposition.getY());
@@ -137,7 +137,7 @@ public class EntityShulkerBullet extends Entity {
         BlockPosition blockposition;
 
         if (this.target == null) {
-            blockposition = this.blockPos.down(); // Reaper - Cache current block pos
+            blockposition = this.blockPos.down(); // Beast - Cache current block pos
         } else {
             d0 = (double) this.target.length * 0.5D;
             blockposition = new BlockPosition(this.target.locX, this.target.locY + d0, this.target.locZ);
@@ -149,7 +149,7 @@ public class EntityShulkerBullet extends Entity {
         EnumDirection enumdirection = null;
 
         if (blockposition.g(this.locX, this.locY, this.locZ) >= 4.0D) {
-            BlockPosition blockposition1 = this.blockPos; // Reaper - Cache current block pos
+            BlockPosition blockposition1 = this.blockPos; // Beast - Cache current block pos
             ArrayList arraylist = Lists.newArrayList();
 
             if (enumdirection_enumaxis != EnumDirection.EnumAxis.X) {
@@ -211,11 +211,11 @@ public class EntityShulkerBullet extends Entity {
     }
 
     public void B_() {
-        if (this.world.getDifficulty() == EnumDifficulty.PEACEFUL) { // Reaper - Remove isClientSide check
+        if (this.world.getDifficulty() == EnumDifficulty.PEACEFUL) { // Beast - Remove isClientSide check
             this.die();
         } else {
             super.B_();
-            if (true) { // Reaper - Remove isClientSide check
+            if (true) { // Beast - Remove isClientSide check
                 List list;
                 Iterator iterator;
                 EntityLiving entityliving;
@@ -270,7 +270,7 @@ public class EntityShulkerBullet extends Entity {
 
             this.setPosition(this.locX + this.motX, this.locY + this.motY, this.locZ + this.motZ);
             ProjectileHelper.a(this, 0.5F);
-            if (false) { // Reaper - Remove isClientSide check
+            if (false) { // Beast - Remove isClientSide check
                 this.world.addParticle(EnumParticle.END_ROD, this.locX - this.motX, this.locY - this.motY + 0.15D, this.locZ - this.motZ, 0.0D, 0.0D, 0.0D, new int[0]);
             } else if (this.target != null && !this.target.dead) {
                 if (this.d > 0) {
@@ -281,13 +281,13 @@ public class EntityShulkerBullet extends Entity {
                 }
 
                 if (this.c != null) {
-                    BlockPosition blockposition = this.blockPos; // Reaper - Cache current block pos
+                    BlockPosition blockposition = this.blockPos; // Beast - Cache current block pos
                     EnumDirection.EnumAxis enumdirection_enumaxis = this.c.k();
 
                     if (this.world.d(blockposition.shift(this.c), false)) {
                         this.a(enumdirection_enumaxis);
                     } else {
-                        BlockPosition blockposition1 = this.target.blockPos; // Reaper - Cache current block pos
+                        BlockPosition blockposition1 = this.target.blockPos; // Beast - Cache current block pos
 
                         if (enumdirection_enumaxis == EnumDirection.EnumAxis.X && blockposition.getX() == blockposition1.getX() || enumdirection_enumaxis == EnumDirection.EnumAxis.Z && blockposition.getZ() == blockposition1.getZ() || enumdirection_enumaxis == EnumDirection.EnumAxis.Y && blockposition.getY() == blockposition1.getY()) {
                             this.a(enumdirection_enumaxis);
@@ -331,7 +331,7 @@ public class EntityShulkerBullet extends Entity {
     }
 
     public boolean damageEntity(DamageSource damagesource, float f) {
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             this.a(SoundEffects.gE, 1.0F, 1.0F);
             ((WorldServer) this.world).a(EnumParticle.CRIT, this.locX, this.locY, this.locZ, 15, 0.2D, 0.2D, 0.2D, 0.0D, new int[0]);
             this.die();
diff --git a/src/main/java/net/minecraft/server/EntitySilverfish.java b/src/main/java/net/minecraft/server/EntitySilverfish.java
index de00d67e6987ee85105a485b9f302ef060720969..9770c91f81cffeeb556e574bc5b226a7d5e88bfe 100644
--- a/src/main/java/net/minecraft/server/EntitySilverfish.java
+++ b/src/main/java/net/minecraft/server/EntitySilverfish.java
@@ -195,7 +195,7 @@ public class EntitySilverfish extends EntityMonster {
             if (this.b <= 0) {
                 World world = this.silverfish.world;
                 Random random = this.silverfish.getRandom();
-                BlockPosition blockposition = this.silverfish.blockPos; // Reaper - Cache current block pos
+                BlockPosition blockposition = this.silverfish.blockPos; // Beast - Cache current block pos
 
                 for (int i = 0; i <= 5 && i >= -5; i = (i <= 0 ? 1 : 0) - i) {
                     for (int j = 0; j <= 10 && j >= -10; j = (j <= 0 ? 1 : 0) - j) {
diff --git a/src/main/java/net/minecraft/server/EntitySkeletonAbstract.java b/src/main/java/net/minecraft/server/EntitySkeletonAbstract.java
index 683d0f6e256af4a0f131b0fdcedef0eb7521d345..b28de2bc4b6da926135b9ef1f0eac307ebf11db3 100644
--- a/src/main/java/net/minecraft/server/EntitySkeletonAbstract.java
+++ b/src/main/java/net/minecraft/server/EntitySkeletonAbstract.java
@@ -3,7 +3,7 @@ package net.minecraft.server;
 import java.util.Calendar;
 import javax.annotation.Nullable;
 
-import com.github.ruviolence.reaper.BeastConfig;
+import com.homomc.beast.BeastConfig;
 import org.bukkit.event.entity.EntityCombustEvent; // CraftBukkit
 
 public abstract class EntitySkeletonAbstract extends EntityMonster implements IRangedEntity {
@@ -62,7 +62,7 @@ public abstract class EntitySkeletonAbstract extends EntityMonster implements IR
     }
 
     public void n() {
-        if (this.world.D()) { // Reaper - Remove isClientSide check
+        if (this.world.D()) { // Beast - Remove isClientSide check
             float f = this.aw();
             BlockPosition blockposition = this.bJ() instanceof EntityBoat ? (new BlockPosition(this.locX, (double) Math.round(this.locY), this.locZ)).up() : new BlockPosition(this.locX, (double) Math.round(this.locY), this.locZ);
 
@@ -120,7 +120,7 @@ public abstract class EntitySkeletonAbstract extends EntityMonster implements IR
         this.b(difficultydamagescaler);
         this.dm();
         this.m(this.random.nextFloat() < 0.55F * difficultydamagescaler.d());
-        if (BeastConfig.halloweenMobFeature && this.getEquipment(EnumItemSlot.HEAD).isEmpty()) { // Reaper
+        if (BeastConfig.halloweenMobFeature && this.getEquipment(EnumItemSlot.HEAD).isEmpty()) { // Beast
             Calendar calendar = this.world.ae();
 
             if (calendar.get(2) + 1 == 10 && calendar.get(5) == 31 && this.random.nextFloat() < 0.25F) {
@@ -133,7 +133,7 @@ public abstract class EntitySkeletonAbstract extends EntityMonster implements IR
     }
 
     public void dm() {
-        if (this.world != null) { // Reaper - Remove isClientSide check
+        if (this.world != null) { // Beast - Remove isClientSide check
             this.goalSelector.a((PathfinderGoal) this.c);
             this.goalSelector.a((PathfinderGoal) this.b);
             ItemStack itemstack = this.getItemInMainHand();
@@ -191,7 +191,7 @@ public abstract class EntitySkeletonAbstract extends EntityMonster implements IR
 
     public void setSlot(EnumItemSlot enumitemslot, ItemStack itemstack) {
         super.setSlot(enumitemslot, itemstack);
-        if (enumitemslot == EnumItemSlot.MAINHAND) { // Reaper - Remove isClientSide check
+        if (enumitemslot == EnumItemSlot.MAINHAND) { // Beast - Remove isClientSide check
             this.dm();
         }
 
diff --git a/src/main/java/net/minecraft/server/EntitySkeletonStray.java b/src/main/java/net/minecraft/server/EntitySkeletonStray.java
index 6b4c5ecf324a2fca6e82ccda189bedcfeebae065..f4b813f259d47a6c0e2782e19af0f7aceb135c83 100644
--- a/src/main/java/net/minecraft/server/EntitySkeletonStray.java
+++ b/src/main/java/net/minecraft/server/EntitySkeletonStray.java
@@ -13,7 +13,7 @@ public class EntitySkeletonStray extends EntitySkeletonAbstract {
     }
 
     public boolean P() {
-        return super.P() && this.world.h(this.blockPos); // Reaper - Cache current block pos
+        return super.P() && this.world.h(this.blockPos); // Beast - Cache current block pos
     }
 
     @Nullable
diff --git a/src/main/java/net/minecraft/server/EntitySlice.java b/src/main/java/net/minecraft/server/EntitySlice.java
index b711297ffab9c875f903aa1f16f9fe173acd24ac..77be029e50546f42abe894381ba42bb69d54aeba 100644
--- a/src/main/java/net/minecraft/server/EntitySlice.java
+++ b/src/main/java/net/minecraft/server/EntitySlice.java
@@ -93,10 +93,10 @@ public class EntitySlice<T> extends AbstractSet<T> {
         while (iterator.hasNext()) {
             Class oclass = (Class) iterator.next();
 
-            if (oclass.isAssignableFrom(object.getClass())) { // Reaper - Inline
+            if (oclass.isAssignableFrom(object.getClass())) { // Beast - Inline
                 List list = (List) this.b.get(oclass);
 
-                if (list != null && list.remove(object)) { // Reaper - Inline
+                if (list != null && list.remove(object)) { // Beast - Inline
                     flag = true;
                 }
             }
diff --git a/src/main/java/net/minecraft/server/EntitySlime.java b/src/main/java/net/minecraft/server/EntitySlime.java
index 552d365ef53911b673691d63c2cc0556dc587f7b..1e14ad72aed9c414c861f5858c70d6b02ddf907d 100644
--- a/src/main/java/net/minecraft/server/EntitySlime.java
+++ b/src/main/java/net/minecraft/server/EntitySlime.java
@@ -80,7 +80,7 @@ public class EntitySlime extends EntityInsentient implements IMonster {
     }
 
     public void B_() {
-        if (this.world.getDifficulty() == EnumDifficulty.PEACEFUL && this.getSize() > 0) { // Reaper - Remove isClientSide check
+        if (this.world.getDifficulty() == EnumDifficulty.PEACEFUL && this.getSize() > 0) { // Beast - Remove isClientSide check
             this.dead = true;
         }
 
@@ -88,7 +88,7 @@ public class EntitySlime extends EntityInsentient implements IMonster {
         this.c = this.b;
         super.B_();
         if (this.onGround && !this.bw) {
-            /* // Reaper start - Clientside particles
+            /* // Beast start - Clientside particles
             int i = this.getSize();
 
             for (int j = 0; j < i * 8; ++j) {
@@ -103,7 +103,7 @@ public class EntitySlime extends EntityInsentient implements IMonster {
 
                 world.addParticle(enumparticle, d0, this.getBoundingBox().b, d1, 0.0D, 0.0D, 0.0D, new int[0]);
             }
-            */ // Reaper end
+            */ // Beast end
 
             this.a(this.dj(), this.cq(), ((this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F) / 0.8F);
             this.a = -0.5F;
@@ -145,7 +145,7 @@ public class EntitySlime extends EntityInsentient implements IMonster {
     public void die() {
         int i = this.getSize();
 
-        if (i > 1 && this.getHealth() <= 0.0F) { // Reaper - Remove isClientSide check
+        if (i > 1 && this.getHealth() <= 0.0F) { // Beast - Remove isClientSide check
             int j = 2 + this.random.nextInt(3);
 
             // CraftBukkit start
@@ -250,7 +250,7 @@ public class EntitySlime extends EntityInsentient implements IMonster {
             if (this.world.getDifficulty() != EnumDifficulty.PEACEFUL) {
                 BiomeBase biomebase = this.world.getBiome(blockposition);
 
-                if (biomebase == Biomes.h && this.locY > 50.0D && this.locY < 70.0D && this.random.nextFloat() < 0.5F && this.random.nextFloat() < this.world.G() && this.world.getLightLevel(this.blockPos) <= this.random.nextInt(8)) { // Reaper - Cache current block pos
+                if (biomebase == Biomes.h && this.locY > 50.0D && this.locY < 70.0D && this.random.nextFloat() < 0.5F && this.random.nextFloat() < this.world.G() && this.world.getLightLevel(this.blockPos) <= this.random.nextInt(8)) { // Beast - Cache current block pos
                     return super.P();
                 }
                 boolean isSlimeChunk = world.paperConfig.allChunksAreSlimeChunks || chunk.a(world.spigotConfig.slimeSeed).nextInt(10) == 0; // Spigot // Paper
diff --git a/src/main/java/net/minecraft/server/EntitySmallFireball.java b/src/main/java/net/minecraft/server/EntitySmallFireball.java
index 4c8ed6b1f0fb7158a8e02aafb7fd56ce062a2739..fdcbab323495a0c25a3d95e6d9e433e4de4f86d0 100644
--- a/src/main/java/net/minecraft/server/EntitySmallFireball.java
+++ b/src/main/java/net/minecraft/server/EntitySmallFireball.java
@@ -29,7 +29,7 @@ public class EntitySmallFireball extends EntityFireball {
     }
 
     protected void a(MovingObjectPosition movingobjectposition) {
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             boolean flag;
 
             if (movingobjectposition.entity != null) {
diff --git a/src/main/java/net/minecraft/server/EntitySnowman.java b/src/main/java/net/minecraft/server/EntitySnowman.java
index a35dd384023221c6863ffbdf6a976619a2cb3701..f0891cf50cae4dcf7280676bf51152b09695d55c 100644
--- a/src/main/java/net/minecraft/server/EntitySnowman.java
+++ b/src/main/java/net/minecraft/server/EntitySnowman.java
@@ -53,7 +53,7 @@ public class EntitySnowman extends EntityGolem implements IRangedEntity {
 
     public void n() {
         super.n();
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             int i = MathHelper.floor(this.locX);
             int j = MathHelper.floor(this.locY);
             int k = MathHelper.floor(this.locZ);
@@ -109,7 +109,7 @@ public class EntitySnowman extends EntityGolem implements IRangedEntity {
     protected boolean a(EntityHuman entityhuman, EnumHand enumhand) {
         ItemStack itemstack = entityhuman.b(enumhand);
 
-        if (itemstack.getItem() == Items.SHEARS && this.hasPumpkin()) { // Reaper - Remove isClientSide check
+        if (itemstack.getItem() == Items.SHEARS && this.hasPumpkin()) { // Beast - Remove isClientSide check
             // CraftBukkit start
             PlayerShearEntityEvent event = new PlayerShearEntityEvent((org.bukkit.entity.Player) entityhuman.getBukkitEntity(), this.getBukkitEntity());
             this.world.getServer().getPluginManager().callEvent(event);
diff --git a/src/main/java/net/minecraft/server/EntitySpider.java b/src/main/java/net/minecraft/server/EntitySpider.java
index ac865e8efce8dbdb89b451cd7ff60464ffdf179f..d2e97ec6280fa221958f2c860799ce3dfc9188c2 100644
--- a/src/main/java/net/minecraft/server/EntitySpider.java
+++ b/src/main/java/net/minecraft/server/EntitySpider.java
@@ -43,7 +43,7 @@ public class EntitySpider extends EntityMonster {
 
     public void B_() {
         super.B_();
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             this.a(this.positionChanged);
         }
 
@@ -191,7 +191,7 @@ public class EntitySpider extends EntityMonster {
                 this.a = MobEffects.INCREASE_DAMAGE;
             } else if (i <= 3) {
                 this.a = MobEffects.REGENERATION;
-            } else if (/*i <= 4*/true) { // Reaper - Optimize
+            } else if (/*i <= 4*/true) { // Beast - Optimize
                 this.a = MobEffects.INVISIBILITY;
             }
 
diff --git a/src/main/java/net/minecraft/server/EntitySquid.java b/src/main/java/net/minecraft/server/EntitySquid.java
index f1e14ddbc7a4164ffdb8a1bb0c99f5145af88247..0ef561232e624a1d297b9e6d31c77c5f5a065f1d 100644
--- a/src/main/java/net/minecraft/server/EntitySquid.java
+++ b/src/main/java/net/minecraft/server/EntitySquid.java
@@ -76,7 +76,7 @@ public class EntitySquid extends EntityWaterAnimal {
         this.bz = this.by;
         this.bw += this.bB;
         if ((double) this.bw > 6.283185307179586D) {
-            if (false) { // Reaper - Remove isClientSide check
+            if (false) { // Beast - Remove isClientSide check
                 this.bw = 6.2831855F;
             } else {
                 this.bw = (float) ((double) this.bw - 6.283185307179586D);
@@ -106,7 +106,7 @@ public class EntitySquid extends EntityWaterAnimal {
                 this.bC *= 0.99F;
             }
 
-            if (true) { // Reaper - Remove isClientSide check
+            if (true) { // Beast - Remove isClientSide check
                 this.motX = (double) (this.bD * this.bA);
                 this.motY = (double) (this.bE * this.bA);
                 this.motZ = (double) (this.bF * this.bA);
@@ -119,7 +119,7 @@ public class EntitySquid extends EntityWaterAnimal {
             this.a += (-((float) MathHelper.c((double) f, this.motY)) * 57.295776F - this.a) * 0.1F;
         } else {
             this.by = MathHelper.e(MathHelper.sin(this.bw)) * 3.1415927F * 0.25F;
-            if (true) { // Reaper - Remove isClientSide check
+            if (true) { // Beast - Remove isClientSide check
                 this.motX = 0.0D;
                 this.motZ = 0.0D;
                 if (this.hasEffect(MobEffects.LEVITATION)) {
diff --git a/src/main/java/net/minecraft/server/EntityTNTPrimed.java b/src/main/java/net/minecraft/server/EntityTNTPrimed.java
index 5b46075299aec5aa572e146f4fcc431a9d7e79d2..1f509e33f9cb91dbf9ab491e3f6a2f8ae671aad7 100644
--- a/src/main/java/net/minecraft/server/EntityTNTPrimed.java
+++ b/src/main/java/net/minecraft/server/EntityTNTPrimed.java
@@ -77,14 +77,14 @@ public class EntityTNTPrimed extends Entity {
         if (this.c <= 0) {
             // CraftBukkit start - Need to reverse the order of the explosion and the entity death so we have a location for the event
             // this.die();
-            if (true) { // Reaper - Remove isClientSide check
+            if (true) { // Beast - Remove isClientSide check
                 this.explode();
             }
             this.die();
             // CraftBukkit end
         } else {
             this.aq();
-            // this.world.addParticle(EnumParticle.SMOKE_NORMAL, this.locX, this.locY + 0.5D, this.locZ, 0.0D, 0.0D, 0.0D, new int[0]); // Reaper - Clientside particles
+            // this.world.addParticle(EnumParticle.SMOKE_NORMAL, this.locX, this.locY + 0.5D, this.locZ, 0.0D, 0.0D, 0.0D, new int[0]); // Beast - Clientside particles
         }
 
     }
diff --git a/src/main/java/net/minecraft/server/EntityTameableAnimal.java b/src/main/java/net/minecraft/server/EntityTameableAnimal.java
index 8271ab3b7cf13d506ddb747f8c77b5c67a948fff..57f9e53bc9cf12ae7ac5167910db61bd0e61e534 100644
--- a/src/main/java/net/minecraft/server/EntityTameableAnimal.java
+++ b/src/main/java/net/minecraft/server/EntityTameableAnimal.java
@@ -9,7 +9,7 @@ public abstract class EntityTameableAnimal extends EntityAnimal implements Entit
     protected static final DataWatcherObject<Byte> bx = DataWatcher.a(EntityTameableAnimal.class, DataWatcherRegistry.a);
     protected static final DataWatcherObject<Optional<UUID>> by = DataWatcher.a(EntityTameableAnimal.class, DataWatcherRegistry.m);
     protected PathfinderGoalSit goalSit;
-    private Optional<UUID> cachedOwnerId; // Reaper - Cache entity owner
+    private Optional<UUID> cachedOwnerId; // Beast - Cache entity owner
 
     public EntityTameableAnimal(World world) {
         super(world);
@@ -27,7 +27,7 @@ public abstract class EntityTameableAnimal extends EntityAnimal implements Entit
         if (this.getOwnerUUID() == null) {
             nbttagcompound.setString("OwnerUUID", "");
         } else {
-            nbttagcompound.setString("OwnerUUID", com.eatthepath.uuid.FastUUID.toString(this.getOwnerUUID())); // Reaper - Use FastUUID
+            nbttagcompound.setString("OwnerUUID", com.eatthepath.uuid.FastUUID.toString(this.getOwnerUUID())); // Beast - Use FastUUID
         }
 
         nbttagcompound.setBoolean("Sitting", this.isSitting());
@@ -47,7 +47,7 @@ public abstract class EntityTameableAnimal extends EntityAnimal implements Entit
 
         if (!s.isEmpty()) {
             try {
-                this.setOwnerUUID(com.eatthepath.uuid.FastUUID.parseUUID(s)); // Reaper - Use FastUUID
+                this.setOwnerUUID(com.eatthepath.uuid.FastUUID.parseUUID(s)); // Beast - Use FastUUID
                 this.setTamed(true);
             } catch (Throwable throwable) {
                 this.setTamed(false);
@@ -66,7 +66,7 @@ public abstract class EntityTameableAnimal extends EntityAnimal implements Entit
     }
 
     protected void p(boolean flag) {
-        if (true) return; // Reaper - Clientside particles
+        if (true) return; // Beast - Clientside particles
         EnumParticle enumparticle = EnumParticle.HEART;
 
         if (!flag) {
@@ -118,17 +118,17 @@ public abstract class EntityTameableAnimal extends EntityAnimal implements Entit
 
     @Nullable
     public UUID getOwnerUUID() {
-        // Reaper start - Cache entity owner
+        // Beast start - Cache entity owner
         if (cachedOwnerId == null) cachedOwnerId = this.datawatcher.get(EntityTameableAnimal.by);
         return cachedOwnerId.orNull();
-        // Reaper end
+        // Beast end
     }
 
     public void setOwnerUUID(@Nullable UUID uuid) {
-        // Reaper start - Cache entity owner
+        // Beast start - Cache entity owner
         this.cachedOwnerId = Optional.fromNullable(uuid);
         this.datawatcher.set(EntityTameableAnimal.by, this.cachedOwnerId);
-        // Reaper end
+        // Beast end
     }
 
     public void c(EntityHuman entityhuman) {
@@ -192,7 +192,7 @@ public abstract class EntityTameableAnimal extends EntityAnimal implements Entit
     }
 
     public void die(DamageSource damagesource) {
-        if (this.world.getGameRules().getBoolean("showDeathMessages") && this.getOwner() instanceof EntityPlayer) { // Reaper - Remove isClientSide check
+        if (this.world.getGameRules().getBoolean("showDeathMessages") && this.getOwner() instanceof EntityPlayer) { // Beast - Remove isClientSide check
             this.getOwner().sendMessage(this.getCombatTracker().getDeathMessage());
         }
 
diff --git a/src/main/java/net/minecraft/server/EntityThrownExpBottle.java b/src/main/java/net/minecraft/server/EntityThrownExpBottle.java
index 297046827abe807d4e6043414df3817a670aa0e7..0ca329e876086e112b67b4b1360fb4f04f2ec249 100644
--- a/src/main/java/net/minecraft/server/EntityThrownExpBottle.java
+++ b/src/main/java/net/minecraft/server/EntityThrownExpBottle.java
@@ -23,7 +23,7 @@ public class EntityThrownExpBottle extends EntityProjectile {
     }
 
     protected void a(MovingObjectPosition movingobjectposition) {
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             // CraftBukkit - moved to after event
             // this.world.triggerEffect(2002, new BlockPosition(this), PotionUtil.a(Potions.b));
             int i = 3 + this.world.random.nextInt(5) + this.world.random.nextInt(5);
@@ -32,7 +32,7 @@ public class EntityThrownExpBottle extends EntityProjectile {
             org.bukkit.event.entity.ExpBottleEvent event = org.bukkit.craftbukkit.event.CraftEventFactory.callExpBottleEvent(this, i);
             i = event.getExperience();
             if (event.getShowEffect()) {
-                this.world.triggerEffect(2002, this.blockPos, PotionUtil.a(Potions.b)); // Reaper - Cache current block pos
+                this.world.triggerEffect(2002, this.blockPos, PotionUtil.a(Potions.b)); // Beast - Cache current block pos
             }
             // CraftBukkit end
 
diff --git a/src/main/java/net/minecraft/server/EntityTippedArrow.java b/src/main/java/net/minecraft/server/EntityTippedArrow.java
index c371da2108342979723e5bfd5adb5a7b21fac056..fdf23a7acc23f0ae1ff1e4b47ebdcf22577bfd5f 100644
--- a/src/main/java/net/minecraft/server/EntityTippedArrow.java
+++ b/src/main/java/net/minecraft/server/EntityTippedArrow.java
@@ -84,7 +84,7 @@ public class EntityTippedArrow extends EntityArrow {
 
     public void B_() {
         super.B_();
-        if (false) { // Reaper - Remove isClientSide check
+        if (false) { // Beast - Remove isClientSide check
             if (this.inGround) {
                 if (this.b % 5 == 0) {
                     this.c(1);
@@ -102,7 +102,7 @@ public class EntityTippedArrow extends EntityArrow {
     }
 
     private void c(int i) {
-        if (true) return; // Reaper - Clientside particles
+        if (true) return; // Beast - Clientside particles
         int j = this.getColor();
 
         if (j != -1 && i > 0) {
@@ -166,7 +166,7 @@ public class EntityTippedArrow extends EntityArrow {
             while (iterator.hasNext()) {
                 MobEffect mobeffect = (MobEffect) iterator.next();
 
-                nbttaglist.add(mobeffect.a(new NBTTagCompound(5))); // Reaper - Use initial capacity
+                nbttaglist.add(mobeffect.a(new NBTTagCompound(5))); // Beast - Use initial capacity
             }
 
             nbttagcompound.set("CustomPotionEffects", nbttaglist);
diff --git a/src/main/java/net/minecraft/server/EntityTracker.java b/src/main/java/net/minecraft/server/EntityTracker.java
index cc631e30315620819bea18fd2f1116e8f125d40d..9fe51003dc39fa69c5b8a01204fb5909b6493f74 100644
--- a/src/main/java/net/minecraft/server/EntityTracker.java
+++ b/src/main/java/net/minecraft/server/EntityTracker.java
@@ -168,7 +168,7 @@ public class EntityTracker {
         if (entitytrackerentry1 != null) {
             this.c.remove(entitytrackerentry1);
             entitytrackerentry1.a();
-            entitytrackerentry1.trackedPlayers.clear(); // Reaper - Attempt to reduce memory leakage
+            entitytrackerentry1.trackedPlayers.clear(); // Beast - Attempt to reduce memory leakage
         }
 
     }
@@ -263,7 +263,7 @@ public class EntityTracker {
                     arraylist.add(entity);
                 }
 
-                if (!entity.isPassengersEmpty()) { // Reaper
+                if (!entity.isPassengersEmpty()) { // Beast
                     arraylist1.add(entity);
                 }
             }
diff --git a/src/main/java/net/minecraft/server/EntityTrackerEntry.java b/src/main/java/net/minecraft/server/EntityTrackerEntry.java
index 361ecb4fea584c29c228d069472c01cad79a9814..7e69e87a14fbcd3c0e6f2493d3d19d8494dc6993 100644
--- a/src/main/java/net/minecraft/server/EntityTrackerEntry.java
+++ b/src/main/java/net/minecraft/server/EntityTrackerEntry.java
@@ -1,6 +1,6 @@
 package net.minecraft.server;
 
-import com.github.ruviolence.reaper.BeastConfig;
+import com.homomc.beast.BeastConfig;
 
 import java.util.Collection;
 import java.util.Collections;
@@ -15,10 +15,10 @@ import org.bukkit.entity.Player;
 import org.bukkit.event.player.PlayerVelocityEvent;
 // CraftBukkit end
 
-// Reaper start - FastUtil optimization
+// Beast start - FastUtil optimization
 import it.unimi.dsi.fastutil.objects.Object2BooleanMap;
 import it.unimi.dsi.fastutil.objects.Object2BooleanOpenHashMap;
-// Reaper end
+// Beast end
 
 public class EntityTrackerEntry {
 
@@ -50,7 +50,7 @@ public class EntityTrackerEntry {
     // Paper start
     // Replace trackedPlayers Set with a Map. The value is true until the player receives
     // their first update (which is forced to have absolute coordinates), false afterward.
-    public Object2BooleanMap<EntityPlayer> trackedPlayerMap = new Object2BooleanOpenHashMap<>(); // Reaper - FastUtil optimization
+    public Object2BooleanMap<EntityPlayer> trackedPlayerMap = new Object2BooleanOpenHashMap<>(); // Beast - FastUtil optimization
     public Set<EntityPlayer> trackedPlayers = trackedPlayerMap.keySet();
     // Paper end
 
@@ -183,7 +183,7 @@ public class EntityTrackerEntry {
                         this.v = 0;
                         // CraftBukkit start - Refresh list of who can see a player before sending teleport packet
                         if (this.tracker instanceof EntityPlayer) {
-                            this.scanPlayers(new java.util.ArrayList(this.tracker.world.players)); // Reaper - Fix teleport invisibility
+                            this.scanPlayers(new java.util.ArrayList(this.tracker.world.players)); // Beast - Fix teleport invisibility
                         }
                         // CraftBukkit end
                         this.c();
@@ -220,8 +220,8 @@ public class EntityTrackerEntry {
                     } else {
                         PacketPlayOutEntityTeleport teleportPacket = null;
 
-                        for (Object2BooleanMap.Entry<EntityPlayer> viewer : trackedPlayerMap.object2BooleanEntrySet()) { // Reaper - FastUtil optimization
-                            if (viewer.getBooleanValue()) { // Reaper - FastUtil optimization
+                        for (Object2BooleanMap.Entry<EntityPlayer> viewer : trackedPlayerMap.object2BooleanEntrySet()) { // Beast - FastUtil optimization
+                            if (viewer.getBooleanValue()) { // Beast - FastUtil optimization
                                 viewer.setValue(false);
                                 if (teleportPacket == null) {
                                     teleportPacket = new PacketPlayOutEntityTeleport(this.tracker);
@@ -406,7 +406,7 @@ public class EntityTrackerEntry {
                     }
 
                     if (this.tracker instanceof EntityLiving) {
-                        EnumItemSlot[] aenumitemslot = EnumItemSlot.VALUES; // Reaper - Single values array
+                        EnumItemSlot[] aenumitemslot = EnumItemSlot.VALUES; // Beast - Single values array
                         int i = aenumitemslot.length;
 
                         for (int j = 0; j < i; ++j) {
@@ -423,15 +423,15 @@ public class EntityTrackerEntry {
                         EntityHuman entityhuman = (EntityHuman) this.tracker;
 
                         if (entityhuman.isSleeping()) {
-                            entityplayer.playerConnection.sendPacket(new PacketPlayOutBed(entityhuman, this.tracker.blockPos)); // Reaper - Cache current block pos
+                            entityplayer.playerConnection.sendPacket(new PacketPlayOutBed(entityhuman, this.tracker.blockPos)); // Beast - Cache current block pos
                         }
                     }
 
                     // CraftBukkit start - Fix for nonsensical head yaw
-                    if (this.tracker instanceof EntityLiving) { // Reaper start - Fix packet spam
+                    if (this.tracker instanceof EntityLiving) { // Beast start - Fix packet spam
                     this.headYaw = MathHelper.d(this.tracker.getHeadRotation() * 256.0F / 360.0F);
                     this.broadcast(new PacketPlayOutEntityHeadRotation(this.tracker, (byte) headYaw));
-                    } // Reaper end
+                    } // Beast end
                     // CraftBukkit end
 
                     if (this.tracker instanceof EntityLiving) {
@@ -445,7 +445,7 @@ public class EntityTrackerEntry {
                         }
                     }
 
-                    if (!this.tracker.isPassengersEmpty()) { // Reaper
+                    if (!this.tracker.isPassengersEmpty()) { // Beast
                         entityplayer.playerConnection.sendPacket(new PacketPlayOutMount(this.tracker));
                     }
 
@@ -454,16 +454,16 @@ public class EntityTrackerEntry {
                     }
 
                     this.tracker.b(entityplayer);
-                    // entityplayer.d(this.tracker); // Reaper - Already removed above
+                    // entityplayer.d(this.tracker); // Beast - Already removed above
                     updatePassengers(entityplayer); // Paper
-                    if (MinecraftServer.getServer().hasEntityTrackedEvent) org.bukkit.craftbukkit.event.CraftEventFactory.callEntityTrackedEvent(entityplayer, tracker); // Reaper - EntityTrackedEvent
+                    if (MinecraftServer.getServer().hasEntityTrackedEvent) org.bukkit.craftbukkit.event.CraftEventFactory.callEntityTrackedEvent(entityplayer, tracker); // Beast - EntityTrackedEvent
                 }
             } else if (this.trackedPlayers.contains(entityplayer)) {
                 this.trackedPlayers.remove(entityplayer);
                 this.tracker.c(entityplayer);
                 entityplayer.c(this.tracker);
                 updatePassengers(entityplayer); // Paper
-                if (MinecraftServer.getServer().hasEntityUntrackedEvent) org.bukkit.craftbukkit.event.CraftEventFactory.callEntityUntrackedEvent(entityplayer, tracker); // Reaper - EntityUntrackedEvent
+                if (MinecraftServer.getServer().hasEntityUntrackedEvent) org.bukkit.craftbukkit.event.CraftEventFactory.callEntityUntrackedEvent(entityplayer, tracker); // Beast - EntityUntrackedEvent
             }
 
         }
@@ -510,21 +510,21 @@ public class EntityTrackerEntry {
     }
     private boolean isInRangeOfPlayer(EntityPlayer entityplayer) {
         // Paper end
-        // Reaper start - Fix clientside entity desynchronization
+        // Beast start - Fix clientside entity desynchronization
         double d0 = entityplayer.locX - this.tracker.locX;
         double d1 = entityplayer.locZ - this.tracker.locZ;
-        // Reaper end
-        int i = Math.min(this.e, BeastConfig.dynamicViewDistance ? entityplayer.getFurthestViewableBlock() : this.f); // Reaper - Dynamic view distance
+        // Beast end
+        int i = Math.min(this.e, BeastConfig.dynamicViewDistance ? entityplayer.getFurthestViewableBlock() : this.f); // Beast - Dynamic view distance
 
-        // Reaper start
+        // Beast start
         if (BeastConfig.entityTrackerCheckY) {
             double y0 = entityplayer.locY - this.tracker.locY;
             if (y0 < -i || y0 > i) {
                 return false;
             }
-        } // Reaper end
+        } // Beast end
         return d0 >= (double) (-i) && d0 <= (double) i && d1 >= (double) (-i) && d1 <= (double) i && this.tracker.a(entityplayer)
-                && (!BeastConfig.delayedChunksEnabled || !entityplayer.getDelayedChunks().contains(new ChunkCoordIntPair(this.tracker.ab, this.tracker.ad))); // Reaper - Delayed chunks
+                && (!BeastConfig.delayedChunksEnabled || !entityplayer.getDelayedChunks().contains(new ChunkCoordIntPair(this.tracker.ab, this.tracker.ad))); // Beast - Delayed chunks
     }
 
     private boolean e(EntityPlayer entityplayer) {
diff --git a/src/main/java/net/minecraft/server/EntityVex.java b/src/main/java/net/minecraft/server/EntityVex.java
index 9450d7446bb3514e2b7237ebd353d600e6e949eb..20dd9bb3a9caef326b2da052499905617f455a79 100644
--- a/src/main/java/net/minecraft/server/EntityVex.java
+++ b/src/main/java/net/minecraft/server/EntityVex.java
@@ -207,7 +207,7 @@ public class EntityVex extends EntityMonster {
             BlockPosition blockposition = EntityVex.this.dm();
 
             if (blockposition == null) {
-                blockposition = EntityVex.this.blockPos; // Reaper - Cache current block pos
+                blockposition = EntityVex.this.blockPos; // Beast - Cache current block pos
             }
 
             for (int i = 0; i < 3; ++i) {
diff --git a/src/main/java/net/minecraft/server/EntityVillager.java b/src/main/java/net/minecraft/server/EntityVillager.java
index 96c9fcacf5b3a1302099a40359724da8eb02ed4a..6d9e65b5007a3fc102a8cf6e0ba6d569e2e6f233 100644
--- a/src/main/java/net/minecraft/server/EntityVillager.java
+++ b/src/main/java/net/minecraft/server/EntityVillager.java
@@ -115,7 +115,7 @@ public class EntityVillager extends EntityAgeable implements NPC, IMerchant {
 
     protected void M() {
         if (--this.profession <= 0) {
-            BlockPosition blockposition = this.blockPos; // Reaper - Cache current block pos
+            BlockPosition blockposition = this.blockPos; // Beast - Cache current block pos
 
             this.world.ak().a(blockposition);
             this.profession = 70 + this.random.nextInt(50);
@@ -185,10 +185,10 @@ public class EntityVillager extends EntityAgeable implements NPC, IMerchant {
                 entityhuman.b(StatisticList.F);
             }
 
-            if (!this.trades.isEmpty()) { // Reaper - Remove isClientSide check
+            if (!this.trades.isEmpty()) { // Beast - Remove isClientSide check
                 this.setTradingPlayer(entityhuman);
                 entityhuman.openTrade(this);
-            } else if (/*this.trades.isEmpty()*/true) { // Reaper - Optimize
+            } else if (/*this.trades.isEmpty()*/true) { // Beast - Optimize
                 return super.a(entityhuman, enumhand);
             }
 
@@ -247,7 +247,7 @@ public class EntityVillager extends EntityAgeable implements NPC, IMerchant {
             ItemStack itemstack = this.inventory.getItem(i);
 
             if (!itemstack.isEmpty()) {
-                nbttaglist.add(itemstack.save(new NBTTagCompound(4))); // Reaper - Use initial capacity
+                nbttaglist.add(itemstack.save(new NBTTagCompound(4))); // Beast - Use initial capacity
             }
         }
 
@@ -447,7 +447,7 @@ public class EntityVillager extends EntityAgeable implements NPC, IMerchant {
     }
 
     public void a(ItemStack itemstack) {
-        if (this.a_ > -this.C() + 20) { // Reaper - Remove isClientSide check
+        if (this.a_ > -this.C() + 20) { // Beast - Remove isClientSide check
             this.a_ = -this.C();
             this.a(itemstack.isEmpty() ? SoundEffects.in : SoundEffects.ip, this.cq(), this.cr());
         }
@@ -489,7 +489,7 @@ public class EntityVillager extends EntityAgeable implements NPC, IMerchant {
                 int k = aentityvillager_imerchantrecipeoption2.length;
 
                 for (int l = 0; l < k; ++l) {
-                    EntityVillager.IMerchantRecipeOption entityvillager_imerchantrecipeoption = aentityvillager_imerchantrecipeoption2[l]; // Reaper - Inline
+                    EntityVillager.IMerchantRecipeOption entityvillager_imerchantrecipeoption = aentityvillager_imerchantrecipeoption2[l]; // Beast - Inline
 
                     // CraftBukkit start
                     // this is a hack. this must be done because otherwise, if
@@ -516,7 +516,7 @@ public class EntityVillager extends EntityAgeable implements NPC, IMerchant {
     }
 
     public BlockPosition v_() {
-        return this.blockPos; // Reaper - Cache current block pos
+        return this.blockPos; // Beast - Cache current block pos
     }
 
     public IChatBaseComponent getScoreboardDisplayName() {
@@ -626,7 +626,7 @@ public class EntityVillager extends EntityAgeable implements NPC, IMerchant {
     public EntityVillager b(EntityAgeable entityageable) {
         EntityVillager entityvillager = new EntityVillager(this.world);
 
-        entityvillager.prepare(this.world.D(entityvillager.blockPos), (GroupDataEntity) null); // Reaper - Cache current block pos
+        entityvillager.prepare(this.world.D(entityvillager.blockPos), (GroupDataEntity) null); // Beast - Cache current block pos
         return entityvillager;
     }
 
@@ -635,7 +635,7 @@ public class EntityVillager extends EntityAgeable implements NPC, IMerchant {
     }
 
     public void onLightningStrike(EntityLightning entitylightning) {
-        if (!this.dead) { // Reaper - Remove isClientSide check
+        if (!this.dead) { // Beast - Remove isClientSide check
             EntityWitch entitywitch = new EntityWitch(this.world);
 
             // Paper start
@@ -645,7 +645,7 @@ public class EntityVillager extends EntityAgeable implements NPC, IMerchant {
             // Paper end
 
             entitywitch.setPositionRotation(this.locX, this.locY, this.locZ, this.yaw, this.pitch);
-            entitywitch.prepare(this.world.D(entitywitch.blockPos), (GroupDataEntity) null); // Reaper - Cache current block pos
+            entitywitch.prepare(this.world.D(entitywitch.blockPos), (GroupDataEntity) null); // Beast - Cache current block pos
             entitywitch.setNoAI(this.isNoAI());
             if (this.hasCustomName()) {
                 entitywitch.setCustomName(this.getCustomName());
diff --git a/src/main/java/net/minecraft/server/EntityWitch.java b/src/main/java/net/minecraft/server/EntityWitch.java
index 44973b45038d6c8855f99203b0e7f7bd0d635429..f6c4554252b70ad9f4f1713fef50080e8ade2940 100644
--- a/src/main/java/net/minecraft/server/EntityWitch.java
+++ b/src/main/java/net/minecraft/server/EntityWitch.java
@@ -7,7 +7,7 @@ import javax.annotation.Nullable;
 
 public class EntityWitch extends EntityMonster implements IRangedEntity {
 
-    private static final UUID a = com.eatthepath.uuid.FastUUID.parseUUID("5CD17E52-A79A-43D3-A529-90FDE04B181E"); // Reaper - Use FastUUID
+    private static final UUID a = com.eatthepath.uuid.FastUUID.parseUUID("5CD17E52-A79A-43D3-A529-90FDE04B181E"); // Beast - Use FastUUID
     private static final AttributeModifier b = (new AttributeModifier(EntityWitch.a, "Drinking speed penalty", -0.25D, 0)).a(false);
     private static final DataWatcherObject<Boolean> c = DataWatcher.a(EntityWitch.class, DataWatcherRegistry.h);
     private int bx;
@@ -63,7 +63,7 @@ public class EntityWitch extends EntityMonster implements IRangedEntity {
     }
 
     public void n() {
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             if (this.p()) {
                 if (this.bx-- <= 0) {
                     this.a(false);
diff --git a/src/main/java/net/minecraft/server/EntityWither.java b/src/main/java/net/minecraft/server/EntityWither.java
index 934019251db1dade3317c2464035d462e79a5773..e4d5e1b2ffcfdda8de7d9ac32a6a62e5aaa07bec 100644
--- a/src/main/java/net/minecraft/server/EntityWither.java
+++ b/src/main/java/net/minecraft/server/EntityWither.java
@@ -20,10 +20,10 @@ public class EntityWither extends EntityMonster implements IRangedEntity {
     private static final DataWatcherObject<Integer> by = DataWatcher.a(EntityWither.class, DataWatcherRegistry.b);
     private final float[] bz = new float[2];
     private final float[] bA = new float[2];
-    /* // Reaper start - Optimize unused
+    /* // Beast start - Optimize unused
     private final float[] bB = new float[2];
     private final float[] bC = new float[2];
-    */ // Reaper end
+    */ // Beast end
     private final int[] bD = new int[2];
     private final int[] bE = new int[2];
     private int bF;
@@ -108,7 +108,7 @@ public class EntityWither extends EntityMonster implements IRangedEntity {
         double d1;
         double d2;
 
-        if (this.m(0) > 0) { // Reaper - Remove isClientSide check
+        if (this.m(0) > 0) { // Beast - Remove isClientSide check
             Entity entity = this.world.getEntity(this.m(0));
 
             if (entity != null) {
@@ -140,12 +140,12 @@ public class EntityWither extends EntityMonster implements IRangedEntity {
 
         int i;
 
-        /* // Reaper start - Optimize unused
+        /* // Beast start - Optimize unused
         for (i = 0; i < 2; ++i) {
             this.bC[i] = this.bA[i];
             this.bB[i] = this.bz[i];
         }
-        */ // Reaper end
+        */ // Beast end
 
         int j;
 
@@ -175,7 +175,7 @@ public class EntityWither extends EntityMonster implements IRangedEntity {
             }
         }
 
-        /* // Reaper start - Clientside particles
+        /* // Beast start - Clientside particles
         boolean flag = this.dn();
 
         for (j = 0; j < 3; ++j) {
@@ -194,7 +194,7 @@ public class EntityWither extends EntityMonster implements IRangedEntity {
                 this.world.addParticle(EnumParticle.SPELL_MOB, this.locX + this.random.nextGaussian(), this.locY + (double) (this.random.nextFloat() * 3.3F), this.locZ + this.random.nextGaussian(), 0.699999988079071D, 0.699999988079071D, 0.8999999761581421D, new int[0]);
             }
         }
-        */ // Reaper end
+        */ // Beast end
 
     }
 
@@ -343,7 +343,7 @@ public class EntityWither extends EntityMonster implements IRangedEntity {
                     }
 
                     if (flag) {
-                        this.world.a((EntityHuman) null, 1022, this.blockPos, 0); // Reaper - Cache current block pos
+                        this.world.a((EntityHuman) null, 1022, this.blockPos, 0); // Beast - Cache current block pos
                     }
                 }
             }
@@ -422,7 +422,7 @@ public class EntityWither extends EntityMonster implements IRangedEntity {
     }
 
     private void a(int i, double d0, double d1, double d2, boolean flag) {
-        this.world.a(null, 1024, this.blockPos, 0); // Reaper - Cache current block pos
+        this.world.a(null, 1024, this.blockPos, 0); // Beast - Cache current block pos
         double d3 = this.n(i);
         double d4 = this.o(i);
         double d5 = this.p(i);
@@ -438,7 +438,7 @@ public class EntityWither extends EntityMonster implements IRangedEntity {
         entitywitherskull.locY = d4;
         entitywitherskull.locX = d3;
         entitywitherskull.locZ = d5;
-        resetBlockPos(); // Reaper - Cache current block pos
+        resetBlockPos(); // Beast - Cache current block pos
         this.world.addEntity(entitywitherskull);
     }
 
@@ -463,7 +463,7 @@ public class EntityWither extends EntityMonster implements IRangedEntity {
                 }
 
                 entity = damagesource.getEntity();
-                if (!(entity instanceof EntityHuman) && entity instanceof EntityLiving && ((EntityLiving) entity).getMonsterType() == this.getMonsterType()) { // Reaper - Optimize
+                if (!(entity instanceof EntityHuman) && entity instanceof EntityLiving && ((EntityLiving) entity).getMonsterType() == this.getMonsterType()) { // Beast - Optimize
                     return false;
                 } else {
                     if (this.bF <= 0) {
diff --git a/src/main/java/net/minecraft/server/EntityWitherSkull.java b/src/main/java/net/minecraft/server/EntityWitherSkull.java
index e5deb65e250332d018d0f323d7ea4a360dff4da6..0ab32e2501ad80d52b613934f1aab9da78bac17f 100644
--- a/src/main/java/net/minecraft/server/EntityWitherSkull.java
+++ b/src/main/java/net/minecraft/server/EntityWitherSkull.java
@@ -40,7 +40,7 @@ public class EntityWitherSkull extends EntityFireball {
     }
 
     protected void a(MovingObjectPosition movingobjectposition) {
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             if (movingobjectposition.entity != null) {
                 // Spigot start
                 boolean didDamage = false;
diff --git a/src/main/java/net/minecraft/server/EntityWolf.java b/src/main/java/net/minecraft/server/EntityWolf.java
index 1e726d18644a393688ab6618494d8c9365778700..1c52e4c8c22fb56866f31481c268da20c97b990a 100644
--- a/src/main/java/net/minecraft/server/EntityWolf.java
+++ b/src/main/java/net/minecraft/server/EntityWolf.java
@@ -150,14 +150,14 @@ public class EntityWolf extends EntityTameableAnimal {
 
     public void n() {
         super.n();
-        if (this.bG && !this.bH && !this.de() && this.onGround) { // Reaper - Remove isClientSide check
+        if (this.bG && !this.bH && !this.de() && this.onGround) { // Beast - Remove isClientSide check
             this.bH = true;
             this.bI = 0.0F;
             this.bJ = 0.0F;
             this.world.broadcastEntityEffect(this, (byte) 8);
         }
 
-        if (this.getGoalTarget() == null && this.isAngry()) { // Reaper - Remove isClientSide check
+        if (this.getGoalTarget() == null && this.isAngry()) { // Beast - Remove isClientSide check
             this.setAngry(false);
         }
 
@@ -191,7 +191,7 @@ public class EntityWolf extends EntityTameableAnimal {
                 this.bI = 0.0F;
             }
 
-            /* // Reaper start - Clientside particles
+            /* // Beast start - Clientside particles
             if (this.bI > 0.4F) {
                 float f = (float) this.getBoundingBox().b;
                 int i = (int) (MathHelper.sin((this.bI - 0.4F) * 3.1415927F) * 7.0F);
@@ -203,7 +203,7 @@ public class EntityWolf extends EntityTameableAnimal {
                     this.world.addParticle(EnumParticle.WATER_SPLASH, this.locX + (double) f1, (double) (f + 0.8F), this.locZ + (double) f2, this.motX, this.motY, this.motZ, new int[0]);
                 }
             }
-            */ // Reaper end
+            */ // Beast end
         }
 
     }
@@ -285,7 +285,7 @@ public class EntityWolf extends EntityTameableAnimal {
                 }
             }
 
-            if (this.e((EntityLiving) entityhuman) && !this.e(itemstack)) { // Reaper - Remove isClientSide check
+            if (this.e((EntityLiving) entityhuman) && !this.e(itemstack)) { // Beast - Remove isClientSide check
                 this.goalSit.setSitting(!this.isSitting());
                 this.bd = false;
                 this.navigation.p();
@@ -296,7 +296,7 @@ public class EntityWolf extends EntityTameableAnimal {
                 itemstack.subtract(1);
             }
 
-            if (true) { // Reaper - Remove isClientSide check
+            if (true) { // Beast - Remove isClientSide check
                 // CraftBukkit - added event call and isCancelled check.
                 if (this.random.nextInt(3) == 0 && !CraftEventFactory.callEntityTameEvent(this, entityhuman).isCancelled()) {
                     this.c(entityhuman);
diff --git a/src/main/java/net/minecraft/server/EntityZombie.java b/src/main/java/net/minecraft/server/EntityZombie.java
index be4bdf820cab1fa64b7c81223bb34fc2ab38df05..41846aa58f39b2dcceddc6eef682a9c91d47779e 100644
--- a/src/main/java/net/minecraft/server/EntityZombie.java
+++ b/src/main/java/net/minecraft/server/EntityZombie.java
@@ -6,7 +6,7 @@ import java.util.UUID;
 import javax.annotation.Nullable;
 
 //CraftBukkit start
-import com.github.ruviolence.reaper.BeastConfig;
+import com.homomc.beast.BeastConfig;
 import org.bukkit.event.entity.CreatureSpawnEvent;
 import org.bukkit.event.entity.EntityCombustByEntityEvent;
 import org.bukkit.event.entity.EntityCombustEvent;
@@ -16,7 +16,7 @@ import org.bukkit.event.entity.EntityTargetEvent;
 public class EntityZombie extends EntityMonster {
 
     protected static final IAttribute a = (new AttributeRanged((IAttribute) null, "zombie.spawnReinforcements", 0.0D, 0.0D, 1.0D)).a("Spawn Reinforcements Chance");
-    private static final UUID b = com.eatthepath.uuid.FastUUID.parseUUID("B9766B59-9566-4402-BC1F-2EE2A276D836"); // Reaper - Use FastUUID
+    private static final UUID b = com.eatthepath.uuid.FastUUID.parseUUID("B9766B59-9566-4402-BC1F-2EE2A276D836"); // Beast - Use FastUUID
     private final AttributeModifier c = new AttributeModifier(EntityZombie.b, "Baby speed boost", world.paperConfig.babyZombieMovementSpeed, 1); // Paper - Remove static - Make baby speed configurable
     private static final DataWatcherObject<Boolean> bx = DataWatcher.a(EntityZombie.class, DataWatcherRegistry.h);
     private static final DataWatcherObject<Integer> by = DataWatcher.a(EntityZombie.class, DataWatcherRegistry.b);
@@ -100,7 +100,7 @@ public class EntityZombie extends EntityMonster {
 
     public void setBaby(boolean flag) {
         this.getDataWatcher().set(EntityZombie.bx, Boolean.valueOf(flag));
-        if (this.world != null) { // Reaper - Remove isClientSide check
+        if (this.world != null) { // Beast - Remove isClientSide check
             AttributeInstance attributeinstance = this.getAttributeInstance(GenericAttributes.MOVEMENT_SPEED);
 
             attributeinstance.c(this.c);
@@ -121,7 +121,7 @@ public class EntityZombie extends EntityMonster {
     }
 
     public void n() {
-        if (this.world.D() && !this.isBaby() && this.p()) { // Reaper - Remove isClientSide check
+        if (this.world.D() && !this.isBaby() && this.p()) { // Beast - Remove isClientSide check
             float f = this.aw();
 
             if (f > 0.5F && this.random.nextFloat() * 30.0F < (f - 0.4F) * 2.0F && this.world.h(new BlockPosition(this.locX, this.locY + (double) this.getHeadHeight(), this.locZ))) {
@@ -184,7 +184,7 @@ public class EntityZombie extends EntityMonster {
                         if (!this.world.isPlayerNearby((double) i1, (double) j1, (double) k1, 7.0D) && this.world.a(entityzombie.getBoundingBox(), (Entity) entityzombie) && this.world.getCubes(entityzombie, entityzombie.getBoundingBox()).isEmpty() && !this.world.containsLiquid(entityzombie.getBoundingBox())) {
                             this.world.addEntity(entityzombie, CreatureSpawnEvent.SpawnReason.REINFORCEMENTS); // CraftBukkit
                             entityzombie.setGoalTarget(entityliving, EntityTargetEvent.TargetReason.REINFORCEMENT_TARGET, true);
-                            entityzombie.prepare(this.world.D(entityzombie.blockPos), (GroupDataEntity) null); // Reaper - Cache current block pos
+                            entityzombie.prepare(this.world.D(entityzombie.blockPos), (GroupDataEntity) null); // Beast - Cache current block pos
                             this.getAttributeInstance(EntityZombie.a).b(new AttributeModifier("Zombie reinforcement caller charge", -0.05000000074505806D, 0));
                             entityzombie.getAttributeInstance(EntityZombie.a).b(new AttributeModifier("Zombie reinforcement callee charge", -0.05000000074505806D, 0));
                             break;
@@ -203,7 +203,7 @@ public class EntityZombie extends EntityMonster {
         boolean flag = super.B(entity);
 
         if (flag) {
-            float f = this.world.D(this.blockPos).b(); // Reaper - Cache current block pos
+            float f = this.world.D(this.blockPos).b(); // Beast - Cache current block pos
 
             if (this.getItemInMainHand().isEmpty() && this.isBurning() && this.random.nextFloat() < f * 0.3F) {
                 // CraftBukkit start
@@ -297,7 +297,7 @@ public class EntityZombie extends EntityMonster {
 
             entityzombievillager.u(entityvillager);
             this.world.kill(entityvillager);
-            entityzombievillager.prepare(this.world.D(entityzombievillager.blockPos), new EntityZombie.GroupDataZombie(false, null)); // Reaper - Cache current block pos
+            entityzombievillager.prepare(this.world.D(entityzombievillager.blockPos), new EntityZombie.GroupDataZombie(false, null)); // Beast - Cache current block pos
             entityzombievillager.setProfession(entityvillager.getProfession());
             entityzombievillager.setBaby(entityvillager.isBaby());
             entityzombievillager.setNoAI(entityvillager.isNoAI());
@@ -307,7 +307,7 @@ public class EntityZombie extends EntityMonster {
             }
 
             this.world.addEntity(entityzombievillager, CreatureSpawnEvent.SpawnReason.INFECTION); // CraftBukkit - add SpawnReason
-            this.world.a((EntityHuman) null, 1026, this.blockPos, 0); // Reaper - Cache current block pos
+            this.world.a((EntityHuman) null, 1026, this.blockPos, 0); // Beast - Cache current block pos
         }
 
     }
@@ -365,7 +365,7 @@ public class EntityZombie extends EntityMonster {
         this.p(this.random.nextFloat() < f * 0.1F);
         this.a(difficultydamagescaler);
         this.b(difficultydamagescaler);
-        if (BeastConfig.halloweenMobFeature && this.getEquipment(EnumItemSlot.HEAD).isEmpty()) { // Reaper
+        if (BeastConfig.halloweenMobFeature && this.getEquipment(EnumItemSlot.HEAD).isEmpty()) { // Beast
             Calendar calendar = this.world.ae();
 
             if (calendar.get(2) + 1 == 10 && calendar.get(5) == 31 && this.random.nextFloat() < 0.25F) {
diff --git a/src/main/java/net/minecraft/server/EntityZombieHusk.java b/src/main/java/net/minecraft/server/EntityZombieHusk.java
index 49643b37a545eff3243c5644e30e7d393066b55f..a816b659f19af5f4ad4d26023873ffdac9d1339b 100644
--- a/src/main/java/net/minecraft/server/EntityZombieHusk.java
+++ b/src/main/java/net/minecraft/server/EntityZombieHusk.java
@@ -13,7 +13,7 @@ public class EntityZombieHusk extends EntityZombie {
     }
 
     public boolean P() {
-        return super.P() && this.world.h(this.blockPos); // Reaper - Cache current block pos
+        return super.P() && this.world.h(this.blockPos); // Beast - Cache current block pos
     }
 
     protected boolean p() {
@@ -45,7 +45,7 @@ public class EntityZombieHusk extends EntityZombie {
         boolean flag = super.B(entity);
 
         if (flag && this.getItemInMainHand().isEmpty() && entity instanceof EntityLiving) {
-            float f = this.world.D(this.blockPos).b(); // Reaper - Cache current block pos
+            float f = this.world.D(this.blockPos).b(); // Beast - Cache current block pos
 
             ((EntityLiving) entity).addEffect(new MobEffect(MobEffects.HUNGER, 140 * (int) f));
         }
diff --git a/src/main/java/net/minecraft/server/EntityZombieVillager.java b/src/main/java/net/minecraft/server/EntityZombieVillager.java
index 6e8ae6458e5894b3a6cabe3ff1226ca1ae8a312e..bb843e44634364422016ca390ff1a96e4dc4b650 100644
--- a/src/main/java/net/minecraft/server/EntityZombieVillager.java
+++ b/src/main/java/net/minecraft/server/EntityZombieVillager.java
@@ -59,7 +59,7 @@ public class EntityZombieVillager extends EntityZombie {
     }
 
     public void B_() {
-        if (this.isConverting() && this.isAlive()) { // CraftBukkit // Reaper - Remove isClientSide check
+        if (this.isConverting() && this.isAlive()) { // CraftBukkit // Beast - Remove isClientSide check
             int i = this.du();
             // CraftBukkit start - Use wall time instead of ticks for villager conversion
             int elapsedTicks = MinecraftServer.currentTick - this.lastTick;
@@ -84,7 +84,7 @@ public class EntityZombieVillager extends EntityZombie {
                 itemstack.subtract(1);
             }
 
-            if (true) { // Reaper - Remove isClientSide check
+            if (true) { // Beast - Remove isClientSide check
                 this.a(entityhuman.getUniqueID(), this.random.nextInt(2401) + 3600);
             }
 
@@ -116,7 +116,7 @@ public class EntityZombieVillager extends EntityZombie {
 
         entityvillager.u(this);
         entityvillager.setProfession(this.getProfession());
-        entityvillager.a(this.world.D(entityvillager.blockPos), (GroupDataEntity) null, false); // Reaper - Cache current block pos
+        entityvillager.a(this.world.D(entityvillager.blockPos), (GroupDataEntity) null, false); // Beast - Cache current block pos
         entityvillager.dp();
         if (this.isBaby()) {
             entityvillager.setAgeRaw(-24000);
diff --git a/src/main/java/net/minecraft/server/EnumBannerPatternType.java b/src/main/java/net/minecraft/server/EnumBannerPatternType.java
index e3199dc3f7848694ca4514f218ac01c615971695..c14b7e4407f80109485f0b430b0a4bbd91cdac5a 100644
--- a/src/main/java/net/minecraft/server/EnumBannerPatternType.java
+++ b/src/main/java/net/minecraft/server/EnumBannerPatternType.java
@@ -8,7 +8,7 @@ public enum EnumBannerPatternType {
     private final String O;
     private final String[] P;
     private ItemStack Q;
-    public static final EnumBannerPatternType[] VALUES = values(); // Reaper - Single values array
+    public static final EnumBannerPatternType[] VALUES = values(); // Beast - Single values array
 
     private EnumBannerPatternType(String s, String s1) {
         this.P = new String[3];
diff --git a/src/main/java/net/minecraft/server/EnumBlockRotation.java b/src/main/java/net/minecraft/server/EnumBlockRotation.java
index b40d04df298dec505da0a981797ecc9ec76a2f2f..414e1ccde7b8d07c63d454446afa19070646f7a3 100644
--- a/src/main/java/net/minecraft/server/EnumBlockRotation.java
+++ b/src/main/java/net/minecraft/server/EnumBlockRotation.java
@@ -6,7 +6,7 @@ public enum EnumBlockRotation {
 
     private final String e;
     private static final String[] f = new String[values().length];
-    public static final EnumBlockRotation[] VALUES = values(); // Reaper - Single values array
+    public static final EnumBlockRotation[] VALUES = values(); // Beast - Single values array
 
     private EnumBlockRotation(String s) {
         this.e = s;
diff --git a/src/main/java/net/minecraft/server/EnumColor.java b/src/main/java/net/minecraft/server/EnumColor.java
index e570087bbb13dbdc6f974eed7a1acb033adc0f24..ad031c2f9bc7a4edf24473195782c6559528c1c5 100644
--- a/src/main/java/net/minecraft/server/EnumColor.java
+++ b/src/main/java/net/minecraft/server/EnumColor.java
@@ -13,7 +13,7 @@ public enum EnumColor implements INamable {
     private final int w;
     private final float[] x;
     private final EnumChatFormat y;
-    public static final EnumColor[] VALUES = values(); // Reaper - Single values array
+    public static final EnumColor[] VALUES = values(); // Beast - Single values array
 
     private EnumColor(int i, int j, String s, String s1, int k, EnumChatFormat enumchatformat) {
         this.s = i;
diff --git a/src/main/java/net/minecraft/server/EnumCreatureType.java b/src/main/java/net/minecraft/server/EnumCreatureType.java
index 11c3e85dffee1aaa9036083f5a06d86e6b6088e5..09d9a5dcb7121a8db5ad740be83f2bc3dad4a61a 100644
--- a/src/main/java/net/minecraft/server/EnumCreatureType.java
+++ b/src/main/java/net/minecraft/server/EnumCreatureType.java
@@ -9,7 +9,7 @@ public enum EnumCreatureType {
     private final Material g;
     private final boolean h;
     private final boolean i;
-    public static final EnumCreatureType[] VALUES = values(); // Reaper - Single values array
+    public static final EnumCreatureType[] VALUES = values(); // Beast - Single values array
 
     private EnumCreatureType(Class<? extends IAnimal> oclass, int i, Material material, boolean flag, boolean flag1) {
         this.e = oclass;
diff --git a/src/main/java/net/minecraft/server/EnumDirection.java b/src/main/java/net/minecraft/server/EnumDirection.java
index f3ec1d9e46d355695fd2542b1a87ab1ab46cdbad..a0c29df4169843bd1d04543c192fc4bae1936a34 100644
--- a/src/main/java/net/minecraft/server/EnumDirection.java
+++ b/src/main/java/net/minecraft/server/EnumDirection.java
@@ -20,20 +20,20 @@ public enum EnumDirection implements INamable {
     private final EnumDirection.EnumAxis k;
     private final EnumDirection.EnumAxisDirection l;
     private final BaseBlockPosition m;
-    // Reaper start - Optimize
+    // Beast start - Optimize
     public final int adjacentX;
     public final int adjacentY;
     public final int adjacentZ;
     public EnumDirection opposite;
     public static final EnumDirection[] HORIZONTALS;
     public static final EnumDirection[] VERTICALS;
-    // Reaper end
+    // Beast end
     private static final EnumDirection[] n = new EnumDirection[6];
     private static final EnumDirection[] o = new EnumDirection[4];
-    // private static final Map<String, EnumDirection> p = Maps.newHashMap(); // Reaper - Optimize unused
-    public static final EnumDirection[] VALUES = values(); // Reaper - Single values array
+    // private static final Map<String, EnumDirection> p = Maps.newHashMap(); // Beast - Optimize unused
+    public static final EnumDirection[] VALUES = values(); // Beast - Single values array
 
-    // Reaper start - Optimize
+    // Beast start - Optimize
     static {
         java.util.List<EnumDirection> horizontals = new java.util.ArrayList<>();
         java.util.List<EnumDirection> verticals = new java.util.ArrayList<>();
@@ -49,7 +49,7 @@ public enum EnumDirection implements INamable {
         HORIZONTALS = horizontals.toArray(new EnumDirection[0]);
         VERTICALS = verticals.toArray(new EnumDirection[0]);
     }
-    // Reaper end
+    // Beast end
 
     private EnumDirection(int i, int j, int k, String s, EnumDirection.EnumAxisDirection enumdirection_enumaxisdirection, EnumDirection.EnumAxis enumdirection_enumaxis, BaseBlockPosition baseblockposition) {
         this.g = i;
@@ -59,11 +59,11 @@ public enum EnumDirection implements INamable {
         this.k = enumdirection_enumaxis;
         this.l = enumdirection_enumaxisdirection;
         this.m = baseblockposition;
-        // Reaper start - Optimize
+        // Beast start - Optimize
         this.adjacentX = enumdirection_enumaxis == EnumDirection.EnumAxis.X ? enumdirection_enumaxisdirection.a() : 0;
         this.adjacentY = enumdirection_enumaxis == EnumDirection.EnumAxis.Y ? enumdirection_enumaxisdirection.a() : 0;
         this.adjacentZ = enumdirection_enumaxis == EnumDirection.EnumAxis.Z ? enumdirection_enumaxisdirection.a() : 0;
-        // Reaper end
+        // Beast end
     }
 
     public int a() {
@@ -79,7 +79,7 @@ public enum EnumDirection implements INamable {
     }
 
     public EnumDirection opposite() {
-        return this.opposite; // Reaper - Optimize
+        return this.opposite; // Beast - Optimize
     }
 
     public EnumDirection e() {
@@ -121,15 +121,15 @@ public enum EnumDirection implements INamable {
     }
 
     public int getAdjacentX() {
-        return adjacentX; // Reaper - Optimize
+        return adjacentX; // Beast - Optimize
     }
 
     public int getAdjacentY() {
-        return adjacentY; // Reaper - Optimize
+        return adjacentY; // Beast - Optimize
     }
 
     public int getAdjacentZ() {
-        return adjacentZ; // Reaper - Optimize
+        return adjacentZ; // Beast - Optimize
     }
 
     public String j() {
@@ -157,7 +157,7 @@ public enum EnumDirection implements INamable {
     }
 
     public static EnumDirection a(Random random) {
-        return EnumDirection.n[random.nextInt(6)]; // Reaper - Single values array
+        return EnumDirection.n[random.nextInt(6)]; // Beast - Single values array
     }
 
     public String toString() {
@@ -169,7 +169,7 @@ public enum EnumDirection implements INamable {
     }
 
     public static EnumDirection a(EnumDirection.EnumAxisDirection enumdirection_enumaxisdirection, EnumDirection.EnumAxis enumdirection_enumaxis) {
-        EnumDirection[] aenumdirection = VALUES; // Reaper - Single values array
+        EnumDirection[] aenumdirection = VALUES; // Beast - Single values array
         int i = aenumdirection.length;
 
         for (int j = 0; j < i; ++j) {
@@ -211,8 +211,8 @@ public enum EnumDirection implements INamable {
                 EnumDirection.o[enumdirection.i] = enumdirection;
             }
 
-            enumdirection.opposite = values()[enumdirection.h]; // Reaper - Optimize
-            // EnumDirection.p.put(enumdirection.j().toLowerCase(Locale.ROOT), enumdirection); // Reaper - Optimize unused
+            enumdirection.opposite = values()[enumdirection.h]; // Beast - Optimize
+            // EnumDirection.p.put(enumdirection.j().toLowerCase(Locale.ROOT), enumdirection); // Beast - Optimize unused
         }
 
     }
@@ -226,10 +226,10 @@ public enum EnumDirection implements INamable {
         public EnumDirection[] a() {
             switch (this) {
             case HORIZONTAL:
-                return HORIZONTALS; // Reaper - Optimize
+                return HORIZONTALS; // Beast - Optimize
 
             case VERTICAL:
-                return VERTICALS; // Reaper - Optimize
+                return VERTICALS; // Beast - Optimize
 
             default:
                 throw new Error("Someone\'s been tampering with the universe!");
@@ -237,7 +237,7 @@ public enum EnumDirection implements INamable {
         }
 
         public EnumDirection a(Random random) {
-            // Reaper start - Optimize
+            // Beast start - Optimize
             if (this.ordinal() == 0) {
                 switch (random.nextInt(4)) {
                     case 0:
@@ -256,7 +256,7 @@ public enum EnumDirection implements INamable {
                     return UP;
                 }
             }
-            // Reaper end
+            // Beast end
         }
 
         public boolean a(@Nullable EnumDirection enumdirection) {
@@ -278,7 +278,7 @@ public enum EnumDirection implements INamable {
 
         private final int c;
         private final String d;
-        public static final EnumDirection.EnumAxisDirection[] VALUES = values(); // Reaper - Single values array
+        public static final EnumDirection.EnumAxisDirection[] VALUES = values(); // Beast - Single values array
 
         private EnumAxisDirection(int i, String s) {
             this.c = i;
@@ -301,18 +301,18 @@ public enum EnumDirection implements INamable {
         private static final Map<String, EnumDirection.EnumAxis> d = Maps.newHashMap();
         private final String e;
         private final EnumDirection.EnumDirectionLimit f;
-        // Reaper start - Optimize
+        // Beast start - Optimize
         public final boolean isVertical;
         public final boolean isHorizontal;
-        // Reaper end
+        // Beast end
 
         private EnumAxis(String s, EnumDirection.EnumDirectionLimit enumdirection_enumdirectionlimit) {
             this.e = s;
             this.f = enumdirection_enumdirectionlimit;
-            // Reaper start - Optimize
+            // Beast start - Optimize
             this.isVertical = enumdirection_enumdirectionlimit == EnumDirection.EnumDirectionLimit.VERTICAL;
             this.isHorizontal = enumdirection_enumdirectionlimit == EnumDirection.EnumDirectionLimit.HORIZONTAL;
-            // Reaper end - Optimize
+            // Beast end - Optimize
         }
 
         public String a() {
@@ -320,11 +320,11 @@ public enum EnumDirection implements INamable {
         }
 
         public boolean b() {
-            return isVertical; // Reaper - Optimize
+            return isVertical; // Beast - Optimize
         }
 
         public boolean c() {
-            return isHorizontal; // Reaper - Optimize
+            return isHorizontal; // Beast - Optimize
         }
 
         public String toString() {
diff --git a/src/main/java/net/minecraft/server/EnumGamemode.java b/src/main/java/net/minecraft/server/EnumGamemode.java
index c25c146dd4baa6d80c2520711fee63b96e64f852..7f95a9b7fcbfb2e96d57d4de0f3917ce8313c20c 100644
--- a/src/main/java/net/minecraft/server/EnumGamemode.java
+++ b/src/main/java/net/minecraft/server/EnumGamemode.java
@@ -7,7 +7,7 @@ public enum EnumGamemode {
     int f;
     String g;
     String h;
-    public static final EnumGamemode[] VALUES = values(); // Reaper - Single values array
+    public static final EnumGamemode[] VALUES = values(); // Beast - Single values array
 
     private EnumGamemode(int i, String s, String s1) {
         this.f = i;
@@ -24,7 +24,7 @@ public enum EnumGamemode {
     }
 
     public void a(PlayerAbilities playerabilities) {
-        // Reaper start - Replace 'if' with 'switch'
+        // Beast start - Replace 'if' with 'switch'
         switch (this) {
         case CREATIVE:
             playerabilities.canFly = true;
@@ -44,7 +44,7 @@ public enum EnumGamemode {
             playerabilities.isFlying = false;
             break;
         }
-        // Reaper end
+        // Beast end
 
         playerabilities.mayBuild = !this.c();
     }
@@ -66,7 +66,7 @@ public enum EnumGamemode {
     }
 
     public static EnumGamemode a(int i, EnumGamemode enumgamemode) {
-        EnumGamemode[] aenumgamemode = VALUES; // Reaper - Single values array
+        EnumGamemode[] aenumgamemode = VALUES; // Beast - Single values array
         int j = aenumgamemode.length;
 
         for (int k = 0; k < j; ++k) {
@@ -81,7 +81,7 @@ public enum EnumGamemode {
     }
 
     public static EnumGamemode a(String s, EnumGamemode enumgamemode) {
-        EnumGamemode[] aenumgamemode = VALUES; // Reaper - Single values array
+        EnumGamemode[] aenumgamemode = VALUES; // Beast - Single values array
         int i = aenumgamemode.length;
 
         for (int j = 0; j < i; ++j) {
diff --git a/src/main/java/net/minecraft/server/EnumHand.java b/src/main/java/net/minecraft/server/EnumHand.java
index e7d1b4cfdf10143ac8f626300ee90a687a13b533..34fccc51c324e1b6ae362571901a16c05c364a88 100644
--- a/src/main/java/net/minecraft/server/EnumHand.java
+++ b/src/main/java/net/minecraft/server/EnumHand.java
@@ -3,7 +3,7 @@ package net.minecraft.server;
 public enum EnumHand {
 
     MAIN_HAND, OFF_HAND;
-    public static final EnumHand[] VALUES = values(); // Reaper - Single values array
+    public static final EnumHand[] VALUES = values(); // Beast - Single values array
 
     private EnumHand() {}
 }
diff --git a/src/main/java/net/minecraft/server/EnumItemSlot.java b/src/main/java/net/minecraft/server/EnumItemSlot.java
index 6afc7a57bac30c502dfb7c826e5a1869cb896f7d..da88fe7eeb85fddab552acecc2da5ece9d4918a7 100644
--- a/src/main/java/net/minecraft/server/EnumItemSlot.java
+++ b/src/main/java/net/minecraft/server/EnumItemSlot.java
@@ -8,7 +8,7 @@ public enum EnumItemSlot {
     private final int h;
     private final int i;
     private final String j;
-    public static final EnumItemSlot[] VALUES = values(); // Reaper - Single values array
+    public static final EnumItemSlot[] VALUES = values(); // Beast - Single values array
 
     private EnumItemSlot(EnumItemSlot.Function enumitemslot_function, int i, int j, String s) {
         this.g = enumitemslot_function;
@@ -35,7 +35,7 @@ public enum EnumItemSlot {
     }
 
     public static EnumItemSlot a(String s) {
-        EnumItemSlot[] aenumitemslot = VALUES; // Reaper - Single values array
+        EnumItemSlot[] aenumitemslot = VALUES; // Beast - Single values array
         int i = aenumitemslot.length;
 
         for (int j = 0; j < i; ++j) {
diff --git a/src/main/java/net/minecraft/server/EnumParticle.java b/src/main/java/net/minecraft/server/EnumParticle.java
index 1a141d5fc6689262275368a014d034260ea734c6..d97711436a605d3d2e435d77c0abd4a5280497d7 100644
--- a/src/main/java/net/minecraft/server/EnumParticle.java
+++ b/src/main/java/net/minecraft/server/EnumParticle.java
@@ -4,7 +4,7 @@ import com.google.common.collect.Maps;
 import java.util.Map;
 import java.util.Set;
 import javax.annotation.Nullable;
-import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap; // Reaper - FastUtil optimization
+import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap; // Beast - FastUtil optimization
 
 public enum EnumParticle {
 
@@ -14,9 +14,9 @@ public enum EnumParticle {
     private final int Y;
     private final boolean Z;
     private final int aa;
-    private static final Int2ObjectOpenHashMap<EnumParticle> ab = new Int2ObjectOpenHashMap<>(); // Reaper - FastUtil optimization
+    private static final Int2ObjectOpenHashMap<EnumParticle> ab = new Int2ObjectOpenHashMap<>(); // Beast - FastUtil optimization
     private static final Map<String, EnumParticle> ac = Maps.newHashMap();
-    public static final EnumParticle[] VALUES = values(); // Reaper - Single values array 
+    public static final EnumParticle[] VALUES = values(); // Beast - Single values array
 
     private EnumParticle(String s, int i, boolean flag, int j) {
         this.X = s;
@@ -51,7 +51,7 @@ public enum EnumParticle {
 
     @Nullable
     public static EnumParticle a(int i) {
-        return EnumParticle.ab.get(i); // Reaper - FastUtil optimization
+        return EnumParticle.ab.get(i); // Beast - FastUtil optimization
     }
 
     @Nullable
@@ -66,7 +66,7 @@ public enum EnumParticle {
         for (int j = 0; j < i; ++j) {
             EnumParticle enumparticle = aenumparticle[j];
 
-            EnumParticle.ab.put(enumparticle.c(), enumparticle); // Reaper - FastUtil optimization
+            EnumParticle.ab.put(enumparticle.c(), enumparticle); // Beast - FastUtil optimization
             EnumParticle.ac.put(enumparticle.b(), enumparticle);
         }
 
diff --git a/src/main/java/net/minecraft/server/Explosion.java b/src/main/java/net/minecraft/server/Explosion.java
index b3febd3bb119a217595cedccdc1514b52d20f547..decb5115bdd9289948e9b1f7637f33d3f3c6e54a 100644
--- a/src/main/java/net/minecraft/server/Explosion.java
+++ b/src/main/java/net/minecraft/server/Explosion.java
@@ -168,13 +168,13 @@ public class Explosion {
 
     public void a(boolean flag) {
         this.world.a((EntityHuman) null, this.posX, this.posY, this.posZ, SoundEffects.bV, SoundCategory.BLOCKS, 4.0F, (1.0F + (this.world.random.nextFloat() - this.world.random.nextFloat()) * 0.2F) * 0.7F);
-        /* // Reaper start - Clientside particles
+        /* // Beast start - Clientside particles
         if (this.size >= 2.0F && this.b) {
             this.world.addParticle(EnumParticle.EXPLOSION_HUGE, this.posX, this.posY, this.posZ, 1.0D, 0.0D, 0.0D, new int[0]);
         } else {
             this.world.addParticle(EnumParticle.EXPLOSION_LARGE, this.posX, this.posY, this.posZ, 1.0D, 0.0D, 0.0D, new int[0]);
         }
-        */ // Reaper end
+        */ // Beast end
 
         Iterator iterator;
         BlockPosition blockposition;
@@ -231,7 +231,7 @@ public class Explosion {
                 IBlockData iblockdata = this.world.getType(blockposition);
                 Block block = iblockdata.getBlock();
 
-                /* // Reaper start - Clientside particles
+                /* // Beast start - Clientside particles
                 if (flag) {
                     double d0 = (double) ((float) blockposition.getX() + this.world.random.nextFloat());
                     double d1 = (double) ((float) blockposition.getY() + this.world.random.nextFloat());
@@ -253,7 +253,7 @@ public class Explosion {
                     this.world.addParticle(EnumParticle.EXPLOSION_NORMAL, (d0 + this.posX) / 2.0D, (d1 + this.posY) / 2.0D, (d2 + this.posZ) / 2.0D, d3, d4, d5, new int[0]);
                     this.world.addParticle(EnumParticle.SMOKE_NORMAL, d0, d1, d2, d3, d4, d5, new int[0]);
                 }
-                */ // Reaper end
+                */ // Beast end
 
                 if (iblockdata.getMaterial() != Material.AIR) {
                     if (block.a(this)) {
diff --git a/src/main/java/net/minecraft/server/FoodMetaData.java b/src/main/java/net/minecraft/server/FoodMetaData.java
index 64dcda36c955f3dfbb00ed4973bb7710e780e6e7..0e948566fc4b52e5cb3fc2f433547bb54c096ec0 100644
--- a/src/main/java/net/minecraft/server/FoodMetaData.java
+++ b/src/main/java/net/minecraft/server/FoodMetaData.java
@@ -1,6 +1,6 @@
 package net.minecraft.server;
 
-import com.github.ruviolence.reaper.BeastConfig;
+import com.homomc.beast.BeastConfig;
 
 public class FoodMetaData {
 
@@ -62,7 +62,7 @@ public class FoodMetaData {
 
         boolean flag = entityhuman.world.getGameRules().getBoolean("naturalRegeneration");
 
-        if (flag && !BeastConfig.oldCombatRegen && this.saturationLevel > 0.0F && entityhuman.dj() && this.foodLevel >= 20) { // Reaper - Old combat
+        if (flag && !BeastConfig.oldCombatRegen && this.saturationLevel > 0.0F && entityhuman.dj() && this.foodLevel >= 20) { // Beast - Old combat
             ++this.foodTickTimer;
             if (this.foodTickTimer >= 10) {
                 float f = Math.min(this.saturationLevel, 6.0F);
diff --git a/src/main/java/net/minecraft/server/GameProfileBanEntry.java b/src/main/java/net/minecraft/server/GameProfileBanEntry.java
index 7ec8c7b97754233bef69b1183f0495c143a827b1..173c5fbc770211986bf4a2cb6c9b254484d02754 100644
--- a/src/main/java/net/minecraft/server/GameProfileBanEntry.java
+++ b/src/main/java/net/minecraft/server/GameProfileBanEntry.java
@@ -21,7 +21,7 @@ public class GameProfileBanEntry extends ExpirableListEntry<GameProfile> {
 
     protected void a(JsonObject jsonobject) {
         if (this.getKey() != null) {
-            jsonobject.addProperty("uuid", ((GameProfile) this.getKey()).getId() == null ? "" : com.eatthepath.uuid.FastUUID.toString(((GameProfile) this.getKey()).getId())); // Reaper - Use FastUUID
+            jsonobject.addProperty("uuid", ((GameProfile) this.getKey()).getId() == null ? "" : com.eatthepath.uuid.FastUUID.toString(((GameProfile) this.getKey()).getId())); // Beast - Use FastUUID
             jsonobject.addProperty("name", ((GameProfile) this.getKey()).getName());
             super.a(jsonobject);
         }
@@ -36,7 +36,7 @@ public class GameProfileBanEntry extends ExpirableListEntry<GameProfile> {
             String s = jsonobject.get("uuid").getAsString();
 
             try {
-                uuid = com.eatthepath.uuid.FastUUID.parseUUID(s); // Reaper - Use FastUUID
+                uuid = com.eatthepath.uuid.FastUUID.parseUUID(s); // Beast - Use FastUUID
             } catch (Throwable throwable) {
             }
 
diff --git a/src/main/java/net/minecraft/server/GenericAttributes.java b/src/main/java/net/minecraft/server/GenericAttributes.java
index 9218eafdbe3e6398962ab8a358623a2673ec4c15..cbf78da487cdd3ff94fed011a2dc138a2c705bd3 100644
--- a/src/main/java/net/minecraft/server/GenericAttributes.java
+++ b/src/main/java/net/minecraft/server/GenericAttributes.java
@@ -24,11 +24,11 @@ public class GenericAttributes {
     // Spigot end
 
     public static NBTTagList a(AttributeMapBase attributemapbase) {
-        // Reaper start - Use initial capacity
+        // Beast start - Use initial capacity
         Collection<AttributeInstance> values = attributemapbase.a();
         NBTTagList nbttaglist = new NBTTagList(values.size());
         Iterator iterator = values.iterator();
-        // Reaper end
+        // Beast end
 
         while (iterator.hasNext()) {
             AttributeInstance attributeinstance = (AttributeInstance) iterator.next();
@@ -40,7 +40,7 @@ public class GenericAttributes {
     }
 
     private static NBTTagCompound a(AttributeInstance attributeinstance) {
-        NBTTagCompound nbttagcompound = new NBTTagCompound(3); // Reaper - Use initial capacity
+        NBTTagCompound nbttagcompound = new NBTTagCompound(3); // Beast - Use initial capacity
         IAttribute iattribute = attributeinstance.getAttribute();
 
         nbttagcompound.setString("Name", iattribute.getName());
@@ -48,7 +48,7 @@ public class GenericAttributes {
         Collection collection = attributeinstance.c();
 
         if (collection != null && !collection.isEmpty()) {
-            NBTTagList nbttaglist = new NBTTagList(collection.size()); // Reaper - Use initial capacity
+            NBTTagList nbttaglist = new NBTTagList(collection.size()); // Beast - Use initial capacity
             Iterator iterator = collection.iterator();
 
             while (iterator.hasNext()) {
@@ -66,7 +66,7 @@ public class GenericAttributes {
     }
 
     public static NBTTagCompound a(AttributeModifier attributemodifier) {
-        NBTTagCompound nbttagcompound = new NBTTagCompound(5); // Reaper - Use initial capacity
+        NBTTagCompound nbttagcompound = new NBTTagCompound(5); // Beast - Use initial capacity
 
         nbttagcompound.setString("Name", attributemodifier.b());
         nbttagcompound.setDouble("Amount", attributemodifier.d());
diff --git a/src/main/java/net/minecraft/server/HandshakeListener.java b/src/main/java/net/minecraft/server/HandshakeListener.java
index 3a972199c72b64b4757211eb7ac1a4267aa09a1b..3b18531bb0c894af5f7fb37f1aa65e7f070ea04b 100644
--- a/src/main/java/net/minecraft/server/HandshakeListener.java
+++ b/src/main/java/net/minecraft/server/HandshakeListener.java
@@ -35,10 +35,10 @@ public class HandshakeListener implements PacketHandshakingInListener {
                 InetAddress address = ((java.net.InetSocketAddress) this.b.getSocketAddress()).getAddress();
 
                 synchronized (throttleTracker) {
-                    // Reaper start - Optimize map get
+                    // Beast start - Optimize map get
                     Long throttleO = throttleTracker.get(address);
                     if (throttleO != null && !"127.0.0.1".equals(address.getHostAddress()) && currentTime - throttleO < connectionThrottle) {
-                        // Reaper end
+                        // Beast end
                         throttleTracker.put(address, currentTime);
                         chatmessage = new ChatMessage("Connection throttled! Please wait before reconnecting.");
                         this.b.sendPacket(new PacketLoginOutDisconnect(chatmessage));
@@ -67,11 +67,11 @@ public class HandshakeListener implements PacketHandshakingInListener {
             // CraftBukkit end
 
             if (packethandshakinginsetprotocol.b() > 340) {
-                chatmessage = new ChatMessage( java.text.MessageFormat.format( org.apache.commons.lang3.StringUtils.replace( org.spigotmc.SpigotConfig.outdatedServerMessage, "'", "''"), "1.12.2" ) ); // Spigot // Reaper - Optimize
+                chatmessage = new ChatMessage( java.text.MessageFormat.format( org.apache.commons.lang3.StringUtils.replace( org.spigotmc.SpigotConfig.outdatedServerMessage, "'", "''"), "1.12.2" ) ); // Spigot // Beast - Optimize
                 this.b.sendPacket(new PacketLoginOutDisconnect(chatmessage));
                 this.b.close(chatmessage);
             } else if (packethandshakinginsetprotocol.b() < 340) {
-                chatmessage = new ChatMessage( java.text.MessageFormat.format( org.apache.commons.lang3.StringUtils.replace( org.spigotmc.SpigotConfig.outdatedClientMessage, "'", "''"), "1.12.2" ) ); // Spigot // Reaper - Optimize
+                chatmessage = new ChatMessage( java.text.MessageFormat.format( org.apache.commons.lang3.StringUtils.replace( org.spigotmc.SpigotConfig.outdatedClientMessage, "'", "''"), "1.12.2" ) ); // Spigot // Beast - Optimize
                 this.b.sendPacket(new PacketLoginOutDisconnect(chatmessage));
                 this.b.close(chatmessage);
             } else {
@@ -103,7 +103,7 @@ public class HandshakeListener implements PacketHandshakingInListener {
                 // Paper end
                 // Spigot Start
                 //if (org.spigotmc.SpigotConfig.bungee) { // Paper - comment out, we check above!
-                    String[] split = org.apache.commons.lang3.StringUtils.splitPreserveAllTokens(packethandshakinginsetprotocol.hostname, '\00'); // Reaper - Optimize
+                    String[] split = org.apache.commons.lang3.StringUtils.splitPreserveAllTokens(packethandshakinginsetprotocol.hostname, '\00'); // Beast - Optimize
                     if ( split.length == 3 || split.length == 4 ) {
                         packethandshakinginsetprotocol.hostname = split[0];
                         b.l = new java.net.InetSocketAddress(split[1], ((java.net.InetSocketAddress) b.getSocketAddress()).getPort());
diff --git a/src/main/java/net/minecraft/server/IBlockAccess.java b/src/main/java/net/minecraft/server/IBlockAccess.java
index 87bac87c0372e00e65257cd44721e4f80f326ec3..030ed6b1f80ab572e09ed0bc17915f8797aebb13 100644
--- a/src/main/java/net/minecraft/server/IBlockAccess.java
+++ b/src/main/java/net/minecraft/server/IBlockAccess.java
@@ -13,5 +13,5 @@ public interface IBlockAccess {
 
     int getBlockPower(BlockPosition blockposition, EnumDirection enumdirection);
 
-    Chunk getChunkAt(int x, int z); // Reaper - Lithium: ai/pathing/LandPathNodeMaker
+    Chunk getChunkAt(int x, int z); // Beast - Lithium: ai/pathing/LandPathNodeMaker
 }
diff --git a/src/main/java/net/minecraft/server/IBlockData.java b/src/main/java/net/minecraft/server/IBlockData.java
index 709ab2df1b8005dc401b8b9050e44ad33d5f87c6..dd0a1274dce86c443109dc19645a30268fbce653 100644
--- a/src/main/java/net/minecraft/server/IBlockData.java
+++ b/src/main/java/net/minecraft/server/IBlockData.java
@@ -1,9 +1,11 @@
 package net.minecraft.server;
 
 import com.google.common.collect.ImmutableMap;
+import com.homomc.beast.lithium.ai.pathing.BlockPathingBehavior;
+
 import java.util.Collection;
 
-public interface IBlockData extends IBlockPhysics, IBlockProperties, com.github.ruviolence.reaper.lithium.ai.pathing.BlockPathingBehavior { // Reaper - Lithium: ai/pathing/LandPathNodeMaker
+public interface IBlockData extends IBlockPhysics, IBlockProperties, BlockPathingBehavior { // Beast - Lithium: ai/pathing/LandPathNodeMaker
 
     Collection<IBlockState<?>> s();
 
diff --git a/src/main/java/net/minecraft/server/IntCache.java b/src/main/java/net/minecraft/server/IntCache.java
index 0690c844feec62ac80b3b6ae5583e3aa37616711..e137a4f2a6e22094da8dd3ce8b2f3e49a680269e 100644
--- a/src/main/java/net/minecraft/server/IntCache.java
+++ b/src/main/java/net/minecraft/server/IntCache.java
@@ -29,7 +29,7 @@ public class IntCache {
             IntCache.d.clear();
             IntCache.e.clear();
             aint = new int[IntCache.a];
-            if (/*e.size()*/0 < org.spigotmc.SpigotConfig.intCacheLimit) IntCache.e.add(aint); // Reaper - Optimize
+            if (/*e.size()*/0 < org.spigotmc.SpigotConfig.intCacheLimit) IntCache.e.add(aint); // Beast - Optimize
             return aint;
         } else if (IntCache.d.isEmpty()) {
             aint = new int[IntCache.a];
diff --git a/src/main/java/net/minecraft/server/InventoryEnderChest.java b/src/main/java/net/minecraft/server/InventoryEnderChest.java
index f4a7525416ddb6ce0b904e847c4e22ef0f47ea71..0744a4159a25a8bac106cf185a7683f291d96626 100644
--- a/src/main/java/net/minecraft/server/InventoryEnderChest.java
+++ b/src/main/java/net/minecraft/server/InventoryEnderChest.java
@@ -54,7 +54,7 @@ public class InventoryEnderChest extends InventorySubcontainer {
             ItemStack itemstack = this.getItem(i);
 
             if (!itemstack.isEmpty()) {
-                NBTTagCompound nbttagcompound = new NBTTagCompound(5); // Reaper - Use initial capacity
+                NBTTagCompound nbttagcompound = new NBTTagCompound(5); // Beast - Use initial capacity
 
                 nbttagcompound.setByte("Slot", (byte) i);
                 itemstack.save(nbttagcompound);
diff --git a/src/main/java/net/minecraft/server/ItemArmor.java b/src/main/java/net/minecraft/server/ItemArmor.java
index cc83165acfdda7eef2f1511909e802e8591985ea..986904374015d860d1db6a33ffa97f37b28b1ad3 100644
--- a/src/main/java/net/minecraft/server/ItemArmor.java
+++ b/src/main/java/net/minecraft/server/ItemArmor.java
@@ -13,7 +13,7 @@ import org.bukkit.event.block.BlockDispenseEvent;
 public class ItemArmor extends Item {
 
     private static final int[] n = new int[] { 13, 15, 16, 11};
-    private static final UUID[] o = new UUID[] { com.eatthepath.uuid.FastUUID.parseUUID("845DB27C-C624-495F-8C9F-6020A9A58B6B"), com.eatthepath.uuid.FastUUID.parseUUID("D8499B04-0E66-4726-AB29-64469D734E0D"), com.eatthepath.uuid.FastUUID.parseUUID("9F3D476D-C118-4544-8365-64846904B48E"), com.eatthepath.uuid.FastUUID.parseUUID("2AD3F246-FEE1-4E67-B886-69FD380BB150")}; // Reaper - Use FastUUID
+    private static final UUID[] o = new UUID[] { com.eatthepath.uuid.FastUUID.parseUUID("845DB27C-C624-495F-8C9F-6020A9A58B6B"), com.eatthepath.uuid.FastUUID.parseUUID("D8499B04-0E66-4726-AB29-64469D734E0D"), com.eatthepath.uuid.FastUUID.parseUUID("9F3D476D-C118-4544-8365-64846904B48E"), com.eatthepath.uuid.FastUUID.parseUUID("2AD3F246-FEE1-4E67-B886-69FD380BB150")}; // Beast - Use FastUUID
     public static final String[] a = new String[] { "minecraft:items/empty_armor_slot_boots", "minecraft:items/empty_armor_slot_leggings", "minecraft:items/empty_armor_slot_chestplate", "minecraft:items/empty_armor_slot_helmet"};
     public static final IDispenseBehavior b = new DispenseBehaviorItem() {
         protected ItemStack b(ISourceBlock isourceblock, ItemStack itemstack) {
diff --git a/src/main/java/net/minecraft/server/ItemAxe.java b/src/main/java/net/minecraft/server/ItemAxe.java
index a814ebd85288bc77be4d60fb736db502fe770806..910027589aba433fffb6a8fea740e78e761b470c 100644
--- a/src/main/java/net/minecraft/server/ItemAxe.java
+++ b/src/main/java/net/minecraft/server/ItemAxe.java
@@ -1,6 +1,8 @@
 package net.minecraft.server;
 
 import com.google.common.collect.Sets;
+import com.homomc.beast.OldCombatHelper;
+
 import java.util.Set;
 
 public class ItemAxe extends ItemTool {
@@ -11,7 +13,7 @@ public class ItemAxe extends ItemTool {
 
     protected ItemAxe(Item.EnumToolMaterial item_enumtoolmaterial) {
         super(item_enumtoolmaterial, ItemAxe.e);
-        this.b = com.github.ruviolence.reaper.OldCombatHelper.calcItemDamage(this, item_enumtoolmaterial, ItemAxe.f[item_enumtoolmaterial.ordinal()]); // Reaper - Old combat
+        this.b = OldCombatHelper.calcItemDamage(this, item_enumtoolmaterial, ItemAxe.f[item_enumtoolmaterial.ordinal()]); // Beast - Old combat
         this.c = ItemAxe.n[item_enumtoolmaterial.ordinal()];
     }
 
diff --git a/src/main/java/net/minecraft/server/ItemBanner.java b/src/main/java/net/minecraft/server/ItemBanner.java
index 8b0024f13effdd9edb88b360e5d2a1cc979b0a86..634cc438ab1fcfab9a9768c6ed4705d224ab0a9a 100644
--- a/src/main/java/net/minecraft/server/ItemBanner.java
+++ b/src/main/java/net/minecraft/server/ItemBanner.java
@@ -21,7 +21,7 @@ public class ItemBanner extends ItemBlock {
             ItemStack itemstack = entityhuman.b(enumhand);
 
             if (entityhuman.a(blockposition, enumdirection, itemstack) && Blocks.STANDING_BANNER.canPlace(world, blockposition)) {
-                if (false) { // Reaper - Remove isClientSide check
+                if (false) { // Beast - Remove isClientSide check
                     return EnumInteractionResult.SUCCESS;
                 } else {
                     blockposition = flag ? blockposition.down() : blockposition;
@@ -64,7 +64,7 @@ public class ItemBanner extends ItemBlock {
 
     public void a(CreativeModeTab creativemodetab, NonNullList<ItemStack> nonnulllist) {
         if (this.a(creativemodetab)) {
-            EnumColor[] aenumcolor = EnumColor.VALUES; // Reaper - Single values array
+            EnumColor[] aenumcolor = EnumColor.VALUES; // Beast - Single values array
             int i = aenumcolor.length;
 
             for (int j = 0; j < i; ++j) {
diff --git a/src/main/java/net/minecraft/server/ItemBlock.java b/src/main/java/net/minecraft/server/ItemBlock.java
index 0b8c48e95867476f18f41cdfef30e3d2297a1438..f9c9a3d83664608e9780424984a11faf55d229bf 100644
--- a/src/main/java/net/minecraft/server/ItemBlock.java
+++ b/src/main/java/net/minecraft/server/ItemBlock.java
@@ -34,7 +34,7 @@ public class ItemBlock extends Item {
                     }
                 }
 
-                // SoundEffectType soundeffecttype = this.a.getStepSound(); // Reaper - Unused
+                // SoundEffectType soundeffecttype = this.a.getStepSound(); // Beast - Unused
 
                 // world.a(entityhuman, blockposition, soundeffecttype.e(), SoundCategory.BLOCKS, (soundeffecttype.a() + 1.0F) / 2.0F, soundeffecttype.b() * 0.8F); // CraftBukkit - SPIGOT-1288
                 itemstack.subtract(1);
@@ -58,7 +58,7 @@ public class ItemBlock extends Item {
                 TileEntity tileentity = world.getTileEntity(blockposition);
 
                 if (tileentity != null) {
-                    if (tileentity.isFilteredNBT() && (entityhuman == null || !entityhuman.isCreativeAndOp())) { // Reaper - Remove isClientSide check
+                    if (tileentity.isFilteredNBT() && (entityhuman == null || !entityhuman.isCreativeAndOp())) { // Beast - Remove isClientSide check
                         return false;
                     }
 
diff --git a/src/main/java/net/minecraft/server/ItemBoat.java b/src/main/java/net/minecraft/server/ItemBoat.java
index 69734dca22190aa559ef8b83c587b20b149d3bbb..bb7756c7c7f3b2c86b7affaf3fc1925af4724fed 100644
--- a/src/main/java/net/minecraft/server/ItemBoat.java
+++ b/src/main/java/net/minecraft/server/ItemBoat.java
@@ -72,7 +72,7 @@ public class ItemBoat extends Item {
                 if (!world.getCubes(entityboat, entityboat.getBoundingBox().g(-0.1D)).isEmpty()) {
                     return new InteractionResultWrapper(EnumInteractionResult.FAIL, itemstack);
                 } else {
-                    if (true) { // Reaper - Remove isClientSide check
+                    if (true) { // Beast - Remove isClientSide check
                         if (!world.addEntity(entityboat)) return new InteractionResultWrapper(EnumInteractionResult.PASS, itemstack); // CraftBukkit
                     }
 
diff --git a/src/main/java/net/minecraft/server/ItemBookAndQuill.java b/src/main/java/net/minecraft/server/ItemBookAndQuill.java
index 4a254b30ba4da873304f8c8c012f9d1097c543d2..eea64761208406fc42259154992c4c9edcc0b10f 100644
--- a/src/main/java/net/minecraft/server/ItemBookAndQuill.java
+++ b/src/main/java/net/minecraft/server/ItemBookAndQuill.java
@@ -21,7 +21,7 @@ public class ItemBookAndQuill extends Item {
             return false;
         } else {
             NBTTagList nbttaglist = nbttagcompound.getList("pages", 8);
-            if (nbttaglist.size() > 50) return false; // Reaper
+            if (nbttaglist.size() > 50) return false; // Beast
 
             for (int i = 0; i < nbttaglist.size(); ++i) {
                 String s = nbttaglist.getString(i);
diff --git a/src/main/java/net/minecraft/server/ItemBow.java b/src/main/java/net/minecraft/server/ItemBow.java
index 0cbee650a2fd17c007898c4bab975e7ef54e93a5..df6d3858e352a3385f775f7608afface80927bd4 100644
--- a/src/main/java/net/minecraft/server/ItemBow.java
+++ b/src/main/java/net/minecraft/server/ItemBow.java
@@ -1,6 +1,7 @@
 package net.minecraft.server;
 
-import com.github.ruviolence.reaper.BeastConfig;
+import com.homomc.beast.BeastConfig;
+import com.homomc.beast.InventoryUpdateHelper;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.event.entity.EntityCombustEvent; // CraftBukkit
 
@@ -64,7 +65,7 @@ public class ItemBow extends Item {
                     boolean flag1 = flag && itemstack1.getItem() == Items.ARROW;
 
                     boolean consumeArrow = true; // Paper
-                    if (true) { // Reaper - Remove isClientSide check
+                    if (true) { // Beast - Remove isClientSide check
                         ItemArrow itemarrow = (ItemArrow) ((ItemArrow) (itemstack1.getItem() instanceof ItemArrow ? itemstack1.getItem() : Items.ARROW));
                         EntityArrow entityarrow = itemarrow.a(world, itemstack1, (EntityLiving) entityhuman);
 
@@ -111,11 +112,11 @@ public class ItemBow extends Item {
                         if (event.getProjectile() == entityarrow.getBukkitEntity()) {
                             if (!world.addEntity(entityarrow)) {
                                 if (entityhuman instanceof EntityPlayer) {
-                                    // Reaper start - Reduce inventory updates
+                                    // Beast start - Reduce inventory updates
                                     if (BeastConfig.reduceInventoryUpdates) {
-                                        com.github.ruviolence.reaper.InventoryUpdateHelper.onBowShoot((EntityPlayer) entityhuman);
+                                        InventoryUpdateHelper.onBowShoot((EntityPlayer) entityhuman);
                                     } else
-                                    // Reaper end - Reduce inventory updates
+                                    // Beast end - Reduce inventory updates
                                     ((EntityPlayer) entityhuman).getBukkitEntity().updateInventory();
                                 }
                                 return;
@@ -162,7 +163,7 @@ public class ItemBow extends Item {
         boolean flag = !this.a(entityhuman, itemstack).isEmpty(); // Paper
 
         if (!entityhuman.abilities.canInstantlyBuild && !flag) {
-            return /*flag*/false ? new InteractionResultWrapper(EnumInteractionResult.PASS, itemstack) : new InteractionResultWrapper(EnumInteractionResult.FAIL, itemstack); // Reaper - Optimize
+            return /*flag*/false ? new InteractionResultWrapper(EnumInteractionResult.PASS, itemstack) : new InteractionResultWrapper(EnumInteractionResult.FAIL, itemstack); // Beast - Optimize
         } else {
             entityhuman.c(enumhand);
             return new InteractionResultWrapper(EnumInteractionResult.SUCCESS, itemstack);
diff --git a/src/main/java/net/minecraft/server/ItemBucket.java b/src/main/java/net/minecraft/server/ItemBucket.java
index 6f65c8881e7423aa1c20ec59764086bdcad87c63..a0f149f0bbe7d54fdcd965a1dd172631ca63cffc 100644
--- a/src/main/java/net/minecraft/server/ItemBucket.java
+++ b/src/main/java/net/minecraft/server/ItemBucket.java
@@ -135,7 +135,7 @@ public class ItemBucket extends Item {
                 }
                 // CraftBukkit end
                 if (world.worldProvider.l() && this.a == Blocks.FLOWING_WATER) {
-                    /* // Reaper start - Clientside particles
+                    /* // Beast start - Clientside particles
                     int i = blockposition.getX();
                     int j = blockposition.getY();
                     int k = blockposition.getZ();
@@ -147,9 +147,9 @@ public class ItemBucket extends Item {
                     for (int l = 0; l < 8; ++l) {
                         world.addParticle(EnumParticle.SMOKE_LARGE, (double) i + Math.random(), (double) j + Math.random(), (double) k + Math.random(), 0.0D, 0.0D, 0.0D, new int[0]);
                     }
-                    */ // Reaper end
+                    */ // Beast end
                 } else {
-                    if ((flag || flag1) && !material.isLiquid()) { // Reaper - Remove isClientSide check
+                    if ((flag || flag1) && !material.isLiquid()) { // Beast - Remove isClientSide check
                         world.setAir(blockposition, true);
                     }
 
diff --git a/src/main/java/net/minecraft/server/ItemChorusFruit.java b/src/main/java/net/minecraft/server/ItemChorusFruit.java
index de2224ac799371486cca457d3e6a709d0ebd33e8..5ff69c63a826f716e8f71759dd74c4144a056324 100644
--- a/src/main/java/net/minecraft/server/ItemChorusFruit.java
+++ b/src/main/java/net/minecraft/server/ItemChorusFruit.java
@@ -15,7 +15,7 @@ public class ItemChorusFruit extends ItemFood {
     public ItemStack a(ItemStack itemstack, World world, EntityLiving entityliving) {
         ItemStack itemstack1 = super.a(itemstack, world, entityliving);
 
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             double d0 = entityliving.locX;
             double d1 = entityliving.locY;
             double d2 = entityliving.locZ;
diff --git a/src/main/java/net/minecraft/server/ItemDye.java b/src/main/java/net/minecraft/server/ItemDye.java
index ad9fa67c354621f48c33023c159390101ba71948..d796d210e51c8999e81173ef61445a4eab8c161a 100644
--- a/src/main/java/net/minecraft/server/ItemDye.java
+++ b/src/main/java/net/minecraft/server/ItemDye.java
@@ -28,7 +28,7 @@ public class ItemDye extends Item {
 
             if (enumcolor == EnumColor.WHITE) {
                 if (a(itemstack, world, blockposition)) {
-                    if (true) { // Reaper - Remove isClientSide check
+                    if (true) { // Beast - Remove isClientSide check
                         world.triggerEffect(2005, blockposition, 0);
                     }
 
@@ -69,8 +69,8 @@ public class ItemDye extends Item {
         if (iblockdata.getBlock() instanceof IBlockFragilePlantElement) {
             IBlockFragilePlantElement iblockfragileplantelement = (IBlockFragilePlantElement) iblockdata.getBlock();
 
-            if (iblockfragileplantelement.a(world, blockposition, iblockdata, false)) { // Reaper - Remove isClientSide check
-                if (true) { // Reaper - Remove isClientSide check
+            if (iblockfragileplantelement.a(world, blockposition, iblockdata, false)) { // Beast - Remove isClientSide check
+                if (true) { // Beast - Remove isClientSide check
                     if (iblockfragileplantelement.a(world, world.random, blockposition, iblockdata)) {
                         iblockfragileplantelement.b(world, world.random, blockposition, iblockdata);
                     }
diff --git a/src/main/java/net/minecraft/server/ItemEnderEye.java b/src/main/java/net/minecraft/server/ItemEnderEye.java
index 30ead1d666a42a8a27e3ac7d22e74c95fc968193..97849156d632ebd410502e1d6064e4cbbe76e295 100644
--- a/src/main/java/net/minecraft/server/ItemEnderEye.java
+++ b/src/main/java/net/minecraft/server/ItemEnderEye.java
@@ -1,6 +1,6 @@
 package net.minecraft.server;
 
-import com.github.ruviolence.reaper.BeastConfig;
+import com.homomc.beast.BeastConfig;
 
 public class ItemEnderEye extends Item {
 
@@ -13,14 +13,14 @@ public class ItemEnderEye extends Item {
         ItemStack itemstack = entityhuman.b(enumhand);
 
         if (entityhuman.a(blockposition.shift(enumdirection), enumdirection, itemstack) && iblockdata.getBlock() == Blocks.END_PORTAL_FRAME && !((Boolean) iblockdata.get(BlockEnderPortalFrame.EYE)).booleanValue()) {
-            if (false) { // Reaper - Remove isClientSide check
+            if (false) { // Beast - Remove isClientSide check
                 return EnumInteractionResult.SUCCESS;
             } else {
                 world.setTypeAndData(blockposition, iblockdata.set(BlockEnderPortalFrame.EYE, Boolean.valueOf(true)), 2);
                 world.updateAdjacentComparators(blockposition, Blocks.END_PORTAL_FRAME);
                 itemstack.subtract(1);
 
-                /* // Reaper start - Clientside particles
+                /* // Beast start - Clientside particles
                 for (int i = 0; i < 16; ++i) {
                     double d0 = (double) ((float) blockposition.getX() + (5.0F + ItemEnderEye.j.nextFloat() * 6.0F) / 16.0F);
                     double d1 = (double) ((float) blockposition.getY() + 0.8125F);
@@ -31,10 +31,10 @@ public class ItemEnderEye extends Item {
 
                     world.addParticle(EnumParticle.SMOKE_NORMAL, d0, d1, d2, 0.0D, 0.0D, 0.0D, new int[0]);
                 }
-                */ // Reaper end
+                */ // Beast end
 
                 world.a((EntityHuman) null, blockposition, SoundEffects.bp, SoundCategory.BLOCKS, 1.0F, 1.0F);
-                if (!BeastConfig.shapeCheckEndPortal) return EnumInteractionResult.SUCCESS; // Reaper
+                if (!BeastConfig.shapeCheckEndPortal) return EnumInteractionResult.SUCCESS; // Beast
                 ShapeDetector.ShapeDetectorCollection shapedetector_shapedetectorcollection = BlockEnderPortalFrame.e().a(world, blockposition);
 
                 if (shapedetector_shapedetectorcollection != null) {
@@ -64,8 +64,8 @@ public class ItemEnderEye extends Item {
             return new InteractionResultWrapper(EnumInteractionResult.PASS, itemstack);
         } else {
             entityhuman.c(enumhand);
-            if (true) { // Reaper - Remove isClientSide check
-                BlockPosition blockposition = ((WorldServer) world).getChunkProviderServer().a(world, "Stronghold", entityhuman.blockPos, false); // Reaper - Cache current block pos
+            if (true) { // Beast - Remove isClientSide check
+                BlockPosition blockposition = ((WorldServer) world).getChunkProviderServer().a(world, "Stronghold", entityhuman.blockPos, false); // Beast - Cache current block pos
 
                 if (blockposition != null) {
                     EntityEnderSignal entityendersignal = new EntityEnderSignal(world, entityhuman.locX, entityhuman.locY + (double) (entityhuman.length / 2.0F), entityhuman.locZ);
@@ -77,7 +77,7 @@ public class ItemEnderEye extends Item {
                     }
 
                     world.a((EntityHuman) null, entityhuman.locX, entityhuman.locY, entityhuman.locZ, SoundEffects.bc, SoundCategory.NEUTRAL, 0.5F, 0.4F / (ItemEnderEye.j.nextFloat() * 0.4F + 0.8F));
-                    world.a((EntityHuman) null, 1003, entityhuman.blockPos, 0); // Reaper - Cache current block pos
+                    world.a((EntityHuman) null, 1003, entityhuman.blockPos, 0); // Beast - Cache current block pos
                     if (!entityhuman.abilities.canInstantlyBuild) {
                         itemstack.subtract(1);
                     }
diff --git a/src/main/java/net/minecraft/server/ItemEnderPearl.java b/src/main/java/net/minecraft/server/ItemEnderPearl.java
index f22d641ca15847f3ea33b9113c845cf85c3508f2..276f7ae12e42ffcdce585f90bd2ea01a85ec735d 100644
--- a/src/main/java/net/minecraft/server/ItemEnderPearl.java
+++ b/src/main/java/net/minecraft/server/ItemEnderPearl.java
@@ -1,6 +1,7 @@
 package net.minecraft.server;
 
-import com.github.ruviolence.reaper.BeastConfig;
+import com.homomc.beast.BeastConfig;
+import com.homomc.beast.InventoryUpdateHelper;
 
 public class ItemEnderPearl extends Item {
 
@@ -13,17 +14,17 @@ public class ItemEnderPearl extends Item {
         ItemStack itemstack = entityhuman.b(enumhand);
 
         // CraftBukkit start - change order
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             EntityEnderPearl entityenderpearl = new EntityEnderPearl(world, entityhuman);
 
             entityenderpearl.a(entityhuman, entityhuman.pitch, entityhuman.yaw, 0.0F, 1.5F, 1.0F);
             if (!world.addEntity(entityenderpearl)) {
                 if (entityhuman instanceof EntityPlayer) {
-                    // Reaper start - Reduce inventory updates
+                    // Beast start - Reduce inventory updates
                     if (BeastConfig.reduceInventoryUpdates) {
-                        com.github.ruviolence.reaper.InventoryUpdateHelper.updateHeld((EntityPlayer) entityhuman, enumhand);
+                        InventoryUpdateHelper.updateHeld((EntityPlayer) entityhuman, enumhand);
                     } else
-                    // Reaper end - Reduce inventory updates
+                    // Beast end - Reduce inventory updates
                     ((EntityPlayer) entityhuman).getBukkitEntity().updateInventory();
                 }
                 return new InteractionResultWrapper(EnumInteractionResult.FAIL, itemstack);
@@ -35,7 +36,7 @@ public class ItemEnderPearl extends Item {
         }
 
         world.a((EntityHuman) null, entityhuman.locX, entityhuman.locY, entityhuman.locZ, SoundEffects.bn, SoundCategory.NEUTRAL, 0.5F, 0.4F / (ItemEnderPearl.j.nextFloat() * 0.4F + 0.8F));
-        if (!BeastConfig.oldCombatDisablePearlCooldown) // Reaper - Old combat
+        if (!BeastConfig.oldCombatDisablePearlCooldown) // Beast - Old combat
         entityhuman.getCooldownTracker().a(this, 20);
         // CraftBukkit end
 
diff --git a/src/main/java/net/minecraft/server/ItemFireball.java b/src/main/java/net/minecraft/server/ItemFireball.java
index f61a39de44e9ec417a007432dc7fa76c89905ffd..c191983cf08254641281c587504825693c6aec32 100644
--- a/src/main/java/net/minecraft/server/ItemFireball.java
+++ b/src/main/java/net/minecraft/server/ItemFireball.java
@@ -7,7 +7,7 @@ public class ItemFireball extends Item {
     }
 
     public EnumInteractionResult a(EntityHuman entityhuman, World world, BlockPosition blockposition, EnumHand enumhand, EnumDirection enumdirection, float f, float f1, float f2) {
-        if (false) { // Reaper - Remove isClientSide check
+        if (false) { // Beast - Remove isClientSide check
             return EnumInteractionResult.SUCCESS;
         } else {
             blockposition = blockposition.shift(enumdirection);
diff --git a/src/main/java/net/minecraft/server/ItemFireworks.java b/src/main/java/net/minecraft/server/ItemFireworks.java
index ade1db53457b96bbfd381fe4f43c8459e53dd813..f4626e144da3329b2f2be5b42525dc358896294c 100644
--- a/src/main/java/net/minecraft/server/ItemFireworks.java
+++ b/src/main/java/net/minecraft/server/ItemFireworks.java
@@ -5,7 +5,7 @@ public class ItemFireworks extends Item {
     public ItemFireworks() {}
 
     public EnumInteractionResult a(EntityHuman entityhuman, World world, BlockPosition blockposition, EnumHand enumhand, EnumDirection enumdirection, float f, float f1, float f2) {
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             ItemStack itemstack = entityhuman.b(enumhand);
             EntityFireworks entityfireworks = new EntityFireworks(world, (double) ((float) blockposition.getX() + f), (double) ((float) blockposition.getY() + f1), (double) ((float) blockposition.getZ() + f2), itemstack);
 
@@ -23,7 +23,7 @@ public class ItemFireworks extends Item {
         if (entityhuman.cP()) {
             ItemStack itemstack = entityhuman.b(enumhand);
 
-            if (true) { // Reaper - Remove isClientSide check
+            if (true) { // Beast - Remove isClientSide check
                 EntityFireworks entityfireworks = new EntityFireworks(world, itemstack, entityhuman);
 
                 entityfireworks.spawningEntity = entityhuman.getUniqueID(); // Paper
diff --git a/src/main/java/net/minecraft/server/ItemFishingRod.java b/src/main/java/net/minecraft/server/ItemFishingRod.java
index e1ff12f4bd09a587accaafbe461c4020cbe1c0fb..310d7088827f340cdfc3a8a1f98d8e97cf9afbf8 100644
--- a/src/main/java/net/minecraft/server/ItemFishingRod.java
+++ b/src/main/java/net/minecraft/server/ItemFishingRod.java
@@ -23,7 +23,7 @@ public class ItemFishingRod extends Item {
             world.a((EntityHuman) null, entityhuman.locX, entityhuman.locY, entityhuman.locZ, SoundEffects.J, SoundCategory.NEUTRAL, 1.0F, 0.4F / (ItemFishingRod.j.nextFloat() * 0.4F + 0.8F));
         } else {
             // world.a((EntityHuman) null, entityhuman.locX, entityhuman.locY, entityhuman.locZ, SoundEffects.L, SoundCategory.NEUTRAL, 0.5F, 0.4F / (ItemFishingRod.j.nextFloat() * 0.4F + 0.8F)); // CraftBukkit - moved down
-            if (true) { // Reaper - Remove isClientSide check
+            if (true) { // Beast - Remove isClientSide check
                 EntityFishingHook entityfishinghook = new EntityFishingHook(world, entityhuman);
                 int j = EnchantmentManager.c(itemstack);
 
diff --git a/src/main/java/net/minecraft/server/ItemGoldenApple.java b/src/main/java/net/minecraft/server/ItemGoldenApple.java
index d5a066f62e75257c25b862a0e35cbac08977e884..16c80d5d52076579409e28775b0367935952626c 100644
--- a/src/main/java/net/minecraft/server/ItemGoldenApple.java
+++ b/src/main/java/net/minecraft/server/ItemGoldenApple.java
@@ -1,6 +1,6 @@
 package net.minecraft.server;
 
-import com.github.ruviolence.reaper.BeastConfig;
+import com.homomc.beast.BeastConfig;
 
 public class ItemGoldenApple extends ItemFood {
 
@@ -14,8 +14,8 @@ public class ItemGoldenApple extends ItemFood {
     }
 
     protected void a(ItemStack itemstack, World world, EntityHuman entityhuman) {
-        if (true) { // Reaper - Remove isClientSide check
-            // Reaper start - Old combat
+        if (true) { // Beast - Remove isClientSide check
+            // Beast start - Old combat
             if (BeastConfig.oldCombatGoldenApple) {
                 entityhuman.addEffect(new MobEffect(MobEffects.ABSORBTION, 2400, 0));
                 if (itemstack.getData() > 0) {
@@ -27,7 +27,7 @@ public class ItemGoldenApple extends ItemFood {
                 }
                 return;
             }
-            // Reaper end
+            // Beast end
             if (itemstack.getData() > 0) {
                 entityhuman.addEffect(new MobEffect(MobEffects.REGENERATION, 400, 1));
                 entityhuman.addEffect(new MobEffect(MobEffects.RESISTANCE, 6000, 0));
diff --git a/src/main/java/net/minecraft/server/ItemHanging.java b/src/main/java/net/minecraft/server/ItemHanging.java
index 824b26704f4d36a9ebd6e9af67667d01351b8b84..9b2dc9f97c2116f2d60f6ef436884641e49c8502 100644
--- a/src/main/java/net/minecraft/server/ItemHanging.java
+++ b/src/main/java/net/minecraft/server/ItemHanging.java
@@ -23,9 +23,9 @@ public class ItemHanging extends Item {
             EntityHanging entityhanging = this.a(world, blockposition1, enumdirection);
 
             if (entityhanging != null && entityhanging.survives()) {
-                if (true) { // Reaper - Remove isClientSide check
+                if (true) { // Beast - Remove isClientSide check
                     // CraftBukkit start - fire HangingPlaceEvent
-                    Player who = (/*entityhuman == null*/false) ? null : (Player) entityhuman.getBukkitEntity(); // Reaper - Optimize
+                    Player who = (/*entityhuman == null*/false) ? null : (Player) entityhuman.getBukkitEntity(); // Beast - Optimize
                     org.bukkit.block.Block blockClicked = world.getWorld().getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ());
                     org.bukkit.block.BlockFace blockFace = org.bukkit.craftbukkit.block.CraftBlock.notchToBlockFace(enumdirection);
 
diff --git a/src/main/java/net/minecraft/server/ItemLeash.java b/src/main/java/net/minecraft/server/ItemLeash.java
index 750a34fcd0ea269bf57c464bb4c187e60cc5301b..4de77b932f6ec8d9b0d8ed2abe57a38f10abb954 100644
--- a/src/main/java/net/minecraft/server/ItemLeash.java
+++ b/src/main/java/net/minecraft/server/ItemLeash.java
@@ -17,7 +17,7 @@ public class ItemLeash extends Item {
         if (!(block instanceof BlockFence)) {
             return EnumInteractionResult.PASS;
         } else {
-            if (true) { // Reaper - Remove isClientSide check
+            if (true) { // Beast - Remove isClientSide check
                 a(entityhuman, world, blockposition);
             }
 
diff --git a/src/main/java/net/minecraft/server/ItemMinecart.java b/src/main/java/net/minecraft/server/ItemMinecart.java
index 525dee550be473ca42a0005eb378db4f19fa5c37..74b323ec35b845f021ba80e2ce0db28536f7c317 100644
--- a/src/main/java/net/minecraft/server/ItemMinecart.java
+++ b/src/main/java/net/minecraft/server/ItemMinecart.java
@@ -103,7 +103,7 @@ public class ItemMinecart extends Item {
         } else {
             ItemStack itemstack = entityhuman.b(enumhand);
 
-            if (true) { // Reaper - Remove isClientSide check
+            if (true) { // Beast - Remove isClientSide check
                 BlockMinecartTrackAbstract.EnumTrackPosition blockminecarttrackabstract_enumtrackposition = iblockdata.getBlock() instanceof BlockMinecartTrackAbstract ? (BlockMinecartTrackAbstract.EnumTrackPosition) iblockdata.get(((BlockMinecartTrackAbstract) iblockdata.getBlock()).g()) : BlockMinecartTrackAbstract.EnumTrackPosition.NORTH_SOUTH;
                 double d0 = 0.0D;
 
diff --git a/src/main/java/net/minecraft/server/ItemMonsterEgg.java b/src/main/java/net/minecraft/server/ItemMonsterEgg.java
index 75ac04e2ba43ef68776f80455f5203e3d3af6d1d..2bd0577570391658192f744c41ba71a84decdcb0 100644
--- a/src/main/java/net/minecraft/server/ItemMonsterEgg.java
+++ b/src/main/java/net/minecraft/server/ItemMonsterEgg.java
@@ -25,7 +25,7 @@ public class ItemMonsterEgg extends Item {
     public EnumInteractionResult a(EntityHuman entityhuman, World world, BlockPosition blockposition, EnumHand enumhand, EnumDirection enumdirection, float f, float f1, float f2) {
         ItemStack itemstack = entityhuman.b(enumhand);
 
-        if (false) { // Reaper - Remove isClientSide check
+        if (false) { // Beast - Remove isClientSide check
             return EnumInteractionResult.SUCCESS;
         } else if (!entityhuman.a(blockposition.shift(enumdirection), enumdirection, itemstack)) {
             return EnumInteractionResult.FAIL;
@@ -95,7 +95,7 @@ public class ItemMonsterEgg extends Item {
             NBTTagCompound nbttagcompound = itemstack.getTag();
 
             if (nbttagcompound != null && nbttagcompound.hasKeyOfType("EntityTag", 10)) {
-                if (entity.bC() && (entityhuman == null || !minecraftserver.getPlayerList().isOp(entityhuman.getProfile()))) { // Reaper - Remove isClientSide check
+                if (entity.bC() && (entityhuman == null || !minecraftserver.getPlayerList().isOp(entityhuman.getProfile()))) { // Beast - Remove isClientSide check
                     return;
                 }
 
@@ -120,7 +120,7 @@ public class ItemMonsterEgg extends Item {
     public InteractionResultWrapper<ItemStack> a(World world, EntityHuman entityhuman, EnumHand enumhand) {
         ItemStack itemstack = entityhuman.b(enumhand);
 
-        if (false) { // Reaper - Remove isClientSide check
+        if (false) { // Beast - Remove isClientSide check
             return new InteractionResultWrapper(EnumInteractionResult.PASS, itemstack);
         } else {
             MovingObjectPosition movingobjectposition = this.a(world, entityhuman, true);
@@ -175,7 +175,7 @@ public class ItemMonsterEgg extends Item {
                     entity.setPositionRotation(d0, d1, d2, MathHelper.g(world.random.nextFloat() * 360.0F), 0.0F);
                     entityinsentient.aP = entityinsentient.yaw;
                     entityinsentient.aN = entityinsentient.yaw;
-                    entityinsentient.prepare(world.D(entityinsentient.blockPos), (GroupDataEntity) null); // Reaper - Cache current block pos
+                    entityinsentient.prepare(world.D(entityinsentient.blockPos), (GroupDataEntity) null); // Beast - Cache current block pos
                     // CraftBukkit start - don't return an entity when CreatureSpawnEvent is canceled
                     if (!world.addEntity(entity, spawnReason)) {
                         entity = null;
diff --git a/src/main/java/net/minecraft/server/ItemRecord.java b/src/main/java/net/minecraft/server/ItemRecord.java
index 44d6d232d4d2bccf0780e356f1514e01a4c7c468..9f43a57dce91a3988ed5aa94e58fb8ef2c0139af 100644
--- a/src/main/java/net/minecraft/server/ItemRecord.java
+++ b/src/main/java/net/minecraft/server/ItemRecord.java
@@ -5,7 +5,7 @@ import java.util.Map;
 
 public class ItemRecord extends Item {
 
-    // private static final Map<SoundEffect, ItemRecord> a = Maps.newHashMap(); // Reaper - Optimize unused
+    // private static final Map<SoundEffect, ItemRecord> a = Maps.newHashMap(); // Beast - Optimize unused
     private final SoundEffect b;
     private final String c;
 
@@ -14,14 +14,14 @@ public class ItemRecord extends Item {
         this.b = soundeffect;
         this.maxStackSize = 1;
         this.b(CreativeModeTab.f);
-        // ItemRecord.a.put(this.b, this); // Reaper - Optimize unused
+        // ItemRecord.a.put(this.b, this); // Beast - Optimize unused
     }
 
     public EnumInteractionResult a(EntityHuman entityhuman, World world, BlockPosition blockposition, EnumHand enumhand, EnumDirection enumdirection, float f, float f1, float f2) {
         IBlockData iblockdata = world.getType(blockposition);
 
         if (iblockdata.getBlock() == Blocks.JUKEBOX && !((Boolean) iblockdata.get(BlockJukeBox.HAS_RECORD)).booleanValue()) {
-            if (true) { // Reaper - Remove isClientSide check
+            if (true) { // Beast - Remove isClientSide check
                 if (true) return EnumInteractionResult.SUCCESS; // CraftBukkit - handled in ItemStack
                 ItemStack itemstack = entityhuman.b(enumhand);
 
diff --git a/src/main/java/net/minecraft/server/ItemSkull.java b/src/main/java/net/minecraft/server/ItemSkull.java
index 1420cc794744fcac6dddd1c29ca616b7c138effc..71678c00ba74e991230657ae0d113594e8cb1259 100644
--- a/src/main/java/net/minecraft/server/ItemSkull.java
+++ b/src/main/java/net/minecraft/server/ItemSkull.java
@@ -33,7 +33,7 @@ public class ItemSkull extends Item {
             ItemStack itemstack = entityhuman.b(enumhand);
 
             if (entityhuman.a(blockposition, enumdirection, itemstack) && Blocks.SKULL.canPlace(world, blockposition)) {
-                if (false) { // Reaper - Remove isClientSide check
+                if (false) { // Beast - Remove isClientSide check
                     return EnumInteractionResult.SUCCESS;
                 } else {
                     // Spigot Start
@@ -140,7 +140,7 @@ public class ItemSkull extends Item {
 
                 @Override
                 public boolean apply(GameProfile gameprofile) {
-                    nbttagcompound.set("SkullOwner", GameProfileSerializer.serialize(new NBTTagCompound(3), gameprofile)); // Reaper - Use initial capacity
+                    nbttagcompound.set("SkullOwner", GameProfileSerializer.serialize(new NBTTagCompound(3), gameprofile)); // Beast - Use initial capacity
                     return false;
                 }
             }, false);
diff --git a/src/main/java/net/minecraft/server/ItemSnowball.java b/src/main/java/net/minecraft/server/ItemSnowball.java
index 56ede2c02df237aa6d27f2e427c6ff6c2122d569..6a2fe349b2abeeee53ecd82e22a2f57ad1ffc13e 100644
--- a/src/main/java/net/minecraft/server/ItemSnowball.java
+++ b/src/main/java/net/minecraft/server/ItemSnowball.java
@@ -1,6 +1,7 @@
 package net.minecraft.server;
 
-import com.github.ruviolence.reaper.BeastConfig;
+import com.homomc.beast.BeastConfig;
+import com.homomc.beast.InventoryUpdateHelper;
 
 public class ItemSnowball extends Item {
 
@@ -20,7 +21,7 @@ public class ItemSnowball extends Item {
 
         world.a((EntityHuman) null, entityhuman.locX, entityhuman.locY, entityhuman.locZ, SoundEffects.hp, SoundCategory.NEUTRAL, 0.5F, 0.4F / (ItemSnowball.j.nextFloat() * 0.4F + 0.8F));
         */
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             EntitySnowball entitysnowball = new EntitySnowball(world, entityhuman);
 
             entitysnowball.a(entityhuman, entityhuman.pitch, entityhuman.yaw, 0.0F, 1.5F, 1.0F);
@@ -31,11 +32,11 @@ public class ItemSnowball extends Item {
 
                 world.a((EntityHuman) null, entityhuman.locX, entityhuman.locY, entityhuman.locZ, SoundEffects.hp, SoundCategory.NEUTRAL, 0.5F, 0.4F / (ItemSnowball.j.nextFloat() * 0.4F + 0.8F));
             } else if (entityhuman instanceof EntityPlayer) {
-                // Reaper start - Reduce inventory updates
+                // Beast start - Reduce inventory updates
                 if (BeastConfig.reduceInventoryUpdates) {
-                    com.github.ruviolence.reaper.InventoryUpdateHelper.updateHeld((EntityPlayer) entityhuman, enumhand);
+                    InventoryUpdateHelper.updateHeld((EntityPlayer) entityhuman, enumhand);
                 } else
-                // Reaper end - Reduce inventory updates
+                // Beast end - Reduce inventory updates
                 ((EntityPlayer) entityhuman).getBukkitEntity().updateInventory();
             }
         }
diff --git a/src/main/java/net/minecraft/server/ItemStack.java b/src/main/java/net/minecraft/server/ItemStack.java
index ca38ff1f3b1accf15630afb6b249224ac5808eca..578048a85fee0ba4f7311747f121a9419ed6c385 100644
--- a/src/main/java/net/minecraft/server/ItemStack.java
+++ b/src/main/java/net/minecraft/server/ItemStack.java
@@ -1,6 +1,6 @@
 package net.minecraft.server;
 
-import com.github.ruviolence.reaper.BeastConfig;
+import com.homomc.beast.BeastConfig;
 import com.google.common.collect.HashMultimap;
 import com.google.common.collect.Multimap;
 import java.text.DecimalFormat;
@@ -11,6 +11,7 @@ import javax.annotation.Nullable;
 import java.util.List;
 import java.util.Map;
 
+import com.homomc.beast.InventoryUpdateHelper;
 import org.bukkit.Location;
 import org.bukkit.TreeType;
 import org.bukkit.block.BlockState;
@@ -107,7 +108,7 @@ public final class ItemStack {
                 return;
             }
 
-            NBTTagCompound savedStack = new NBTTagCompound(4); // Reaper - Use initial capacity
+            NBTTagCompound savedStack = new NBTTagCompound(4); // Beast - Use initial capacity
             this.save(savedStack);
             MinecraftServer.getServer().dataConverterManager.a(DataConverterTypes.ITEM_INSTANCE, savedStack); // PAIL: convert
             this.load(savedStack);
@@ -121,22 +122,22 @@ public final class ItemStack {
 
     // CraftBukkit - break into own method
     public void load(NBTTagCompound nbttagcompound) {
-        // Reaper start - Optimize
+        // Beast start - Optimize
         String id = nbttagcompound.getStringNullable("id");
         this.item = id != null ? Item.b(id) : Item.getItemOf(Blocks.AIR); // Paper - fix NumberFormatException caused by attempting to read an EMPTY ItemStack
-        // Reaper end
+        // Beast end
         this.count = nbttagcompound.getByte("Count");
         // CraftBukkit start - Route through setData for filtering
         // this.damage = Math.max(0, nbttagcompound.getShort("Damage"));
         this.setData(nbttagcompound.getShort("Damage"));
         // CraftBukkit end
 
-        // Reaper start - Optimize
+        // Beast start - Optimize
         NBTTagCompound tag = nbttagcompound.getCompoundNullable("tag");
         if (tag != null) {
             // CraftBukkit start - make defensive copy as this data may be coming from the save thread
             this.tag = (NBTTagCompound) tag.clone();
-            // Reaper end
+            // Beast end
             processEnchantOrder(this.tag); // Paper
             if (this.item != null) {
                 this.item.a(this.tag);
@@ -244,11 +245,11 @@ public final class ItemStack {
             if (placeEvent != null && (placeEvent.isCancelled() || !placeEvent.canBuild())) {
                 enuminteractionresult = EnumInteractionResult.FAIL; // cancel placement
                 // PAIL: Remove this when MC-99075 fixed
-                // Reaper start - Reduce inventory updates
+                // Beast start - Reduce inventory updates
                 if (BeastConfig.reduceInventoryUpdates) {
-                    com.github.ruviolence.reaper.InventoryUpdateHelper.updateHeld((EntityPlayer) entityhuman, enumhand);
+                    InventoryUpdateHelper.updateHeld((EntityPlayer) entityhuman, enumhand);
                 } else
-                // Reaper end - Reduce inventory updates
+                // Beast end - Reduce inventory updates
                 placeEvent.getPlayer().updateInventory();
 
                 // Paper start
@@ -441,11 +442,11 @@ public final class ItemStack {
                     org.bukkit.event.player.PlayerItemDamageEvent event = new org.bukkit.event.player.PlayerItemDamageEvent(entityplayer.getBukkitEntity(), item, i);
                     org.bukkit.Bukkit.getServer().getPluginManager().callEvent(event);
                     if (i != event.getDamage() || event.isCancelled()) {
-                        // Reaper start - Reduce inventory updates
+                        // Beast start - Reduce inventory updates
                         if (BeastConfig.reduceInventoryUpdates) {
-                            com.github.ruviolence.reaper.InventoryUpdateHelper.updateHeld(entityplayer);
+                            InventoryUpdateHelper.updateHeld(entityplayer);
                         } else
-                        // Reaper end - Reduce inventory updates
+                        // Beast end - Reduce inventory updates
                         event.getPlayer().updateInventory();
                     }
                     if (event.isCancelled()) return false;
@@ -519,7 +520,7 @@ public final class ItemStack {
     public ItemStack cloneItemStack() {
         ItemStack itemstack = new ItemStack(this.item, this.count, this.damage, false); // CraftBukkit
 
-        // itemstack.d(this.D()); // Reaper - Clientside animation
+        // itemstack.d(this.D()); // Beast - Clientside animation
         if (this.tag != null) {
             itemstack.tag = this.tag.g();
         }
@@ -576,11 +577,11 @@ public final class ItemStack {
     }
 
     public void a(World world, Entity entity, int i, boolean flag) {
-        /* // Reaper start - Clientside animation
+        /* // Beast start - Clientside animation
         if (this.d > 0) {
             --this.d;
         }
-        */ // Reaper end
+        */ // Beast end
 
         if (this.item != null) {
             this.item.a(this, world, entity, i, flag);
@@ -662,18 +663,18 @@ public final class ItemStack {
         NBTTagCompound nbttagcompound = this.d("display");
 
         if (nbttagcompound != null) {
-            // Reaper start - Optimize
+            // Beast start - Optimize
             String name = nbttagcompound.getStringNullable("Name");
             if (name != null) {
                 return name;
-                // Reaper end
+                // Beast end
             }
 
-            // Reaper start - Optimize
+            // Beast start - Optimize
             String locName = nbttagcompound.getStringNullable("LocName");
             if (locName != null) {
                 return LocaleI18n.get(locName);
-                // Reaper end
+                // Beast end
             }
         }
 
@@ -845,7 +846,7 @@ public final class ItemStack {
         IChatBaseComponent ichatbasecomponent = (new ChatComponentText("[")).addSibling(chatcomponenttext).a("]");
 
         if (!this.g) {
-            NBTTagCompound nbttagcompound = this.save(new NBTTagCompound(4)); // Reaper - Use initial capacity
+            NBTTagCompound nbttagcompound = this.save(new NBTTagCompound(4)); // Beast - Use initial capacity
 
             ichatbasecomponent.getChatModifier().setChatHoverable(new ChatHoverable(ChatHoverable.EnumHoverAction.SHOW_ITEM, new ChatComponentText(nbttagcompound.toString())));
             ichatbasecomponent.getChatModifier().setColor(this.v().e);
diff --git a/src/main/java/net/minecraft/server/ItemSword.java b/src/main/java/net/minecraft/server/ItemSword.java
index 7d5d6a89d3c1df6e2f4a216b8a720adc9b2ada8e..04f5214b118b8aba38724b107f06d9632e3f052c 100644
--- a/src/main/java/net/minecraft/server/ItemSword.java
+++ b/src/main/java/net/minecraft/server/ItemSword.java
@@ -1,6 +1,7 @@
 package net.minecraft.server;
 
 import com.google.common.collect.Multimap;
+import com.homomc.beast.OldCombatHelper;
 
 public class ItemSword extends Item {
 
@@ -12,7 +13,7 @@ public class ItemSword extends Item {
         this.maxStackSize = 1;
         this.setMaxDurability(item_enumtoolmaterial.a());
         this.b(CreativeModeTab.j);
-        this.a = com.github.ruviolence.reaper.OldCombatHelper.calcItemDamage(this, item_enumtoolmaterial, 3.0F + item_enumtoolmaterial.c()); // Reaper - Old combat
+        this.a = OldCombatHelper.calcItemDamage(this, item_enumtoolmaterial, 3.0F + item_enumtoolmaterial.c()); // Beast - Old combat
     }
 
     public float g() {
diff --git a/src/main/java/net/minecraft/server/ItemTool.java b/src/main/java/net/minecraft/server/ItemTool.java
index f7f9735ebc6800f50eeff957acb82f7f3d62e9ba..595329ed552596c641d17fb772ce8e4c98910635 100644
--- a/src/main/java/net/minecraft/server/ItemTool.java
+++ b/src/main/java/net/minecraft/server/ItemTool.java
@@ -1,6 +1,8 @@
 package net.minecraft.server;
 
 import com.google.common.collect.Multimap;
+import com.homomc.beast.OldCombatHelper;
+
 import java.util.Set;
 
 public class ItemTool extends Item {
@@ -18,7 +20,7 @@ public class ItemTool extends Item {
         this.maxStackSize = 1;
         this.setMaxDurability(item_enumtoolmaterial.a());
         this.a = item_enumtoolmaterial.b();
-        this.b = com.github.ruviolence.reaper.OldCombatHelper.calcItemDamage(this, item_enumtoolmaterial, f + item_enumtoolmaterial.c()); // Reaper - Old combat
+        this.b = OldCombatHelper.calcItemDamage(this, item_enumtoolmaterial, f + item_enumtoolmaterial.c()); // Beast - Old combat
         this.c = f1;
         this.b(CreativeModeTab.i);
     }
@@ -37,7 +39,7 @@ public class ItemTool extends Item {
     }
 
     public boolean a(ItemStack itemstack, World world, IBlockData iblockdata, BlockPosition blockposition, EntityLiving entityliving) {
-        if ((double) iblockdata.b(world, blockposition) != 0.0D) { // Reaper - Remove isClientSide check
+        if ((double) iblockdata.b(world, blockposition) != 0.0D) { // Beast - Remove isClientSide check
             itemstack.damage(1, entityliving);
         }
 
diff --git a/src/main/java/net/minecraft/server/ItemWaterLily.java b/src/main/java/net/minecraft/server/ItemWaterLily.java
index 8c149bab60d628c3eb45c87113ef924cb79be1bf..a3eff4e746f756d7773ff13dba58bbb9363fec91 100644
--- a/src/main/java/net/minecraft/server/ItemWaterLily.java
+++ b/src/main/java/net/minecraft/server/ItemWaterLily.java
@@ -28,7 +28,7 @@ public class ItemWaterLily extends ItemWithAuxData {
                     org.bukkit.block.BlockState blockstate = org.bukkit.craftbukkit.block.CraftBlockState.getBlockState(world, blockposition1.getX(), blockposition1.getY(), blockposition1.getZ());
                     world.setTypeAndData(blockposition1, Blocks.WATERLILY.getBlockData(), 11);
                     org.bukkit.event.block.BlockPlaceEvent placeEvent = org.bukkit.craftbukkit.event.CraftEventFactory.callBlockPlaceEvent(world, entityhuman, enumhand, blockstate, blockposition.getX(), blockposition.getY(), blockposition.getZ());
-                    if (/*placeEvent != null*/true && (placeEvent.isCancelled() || !placeEvent.canBuild())) { // Reaper - Optimize
+                    if (/*placeEvent != null*/true && (placeEvent.isCancelled() || !placeEvent.canBuild())) { // Beast - Optimize
                         blockstate.update(true, false);
                         return new InteractionResultWrapper(EnumInteractionResult.PASS, itemstack);
                     }
diff --git a/src/main/java/net/minecraft/server/ItemWorldMap.java b/src/main/java/net/minecraft/server/ItemWorldMap.java
index 9cf5def08da1319e769d17f62900a64fa6958428..fb53ab91b9b7e78ca1ed6952b9e4c780bd1304e4 100644
--- a/src/main/java/net/minecraft/server/ItemWorldMap.java
+++ b/src/main/java/net/minecraft/server/ItemWorldMap.java
@@ -39,7 +39,7 @@ public class ItemWorldMap extends ItemWorldMapBase {
         String s = "map_" + itemstack.getData();
         WorldMap worldmap = (WorldMap) worldMain.a(WorldMap.class, s); // CraftBukkit - use primary world for maps
 
-        if (worldmap == null) { // Reaper - Remove isClientSide check
+        if (worldmap == null) { // Beast - Remove isClientSide check
             itemstack.setData(worldMain.b("map")); // CraftBukkit - use primary world for maps
             s = "map_" + itemstack.getData();
             worldmap = new WorldMap(s);
@@ -90,9 +90,9 @@ public class ItemWorldMap extends ItemWorldMapBase {
                             int k2 = (j / i + k1 - 64) * i;
                             int l2 = (k / i + l1 - 64) * i;
                             HashMultiset hashmultiset = HashMultiset.create();
-                            Chunk chunk = world.getChunkIfLoaded(new BlockPosition(k2, 0, l2)); // Reaper - Maps shouldn't load chunks
+                            Chunk chunk = world.getChunkIfLoaded(new BlockPosition(k2, 0, l2)); // Beast - Maps shouldn't load chunks
 
-                            if (chunk != null && !chunk.isEmpty()) { // Reaper - Maps shouldn't load chunks
+                            if (chunk != null && !chunk.isEmpty()) { // Beast - Maps shouldn't load chunks
                                 int i3 = k2 & 15;
                                 int j3 = l2 & 15;
                                 int k3 = 0;
@@ -284,7 +284,7 @@ public class ItemWorldMap extends ItemWorldMapBase {
     }
 
     public void a(ItemStack itemstack, World world, Entity entity, int i, boolean flag) {
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             WorldMap worldmap = this.getSavedMap(itemstack, world);
 
             if (entity instanceof EntityHuman) {
diff --git a/src/main/java/net/minecraft/server/ItemWrittenBook.java b/src/main/java/net/minecraft/server/ItemWrittenBook.java
index 55208c44cb53ce9cc63f76240b0e6a145f6e39b7..1799818a1b8ef3476da0f9379a24ce88ef5b8cf2 100644
--- a/src/main/java/net/minecraft/server/ItemWrittenBook.java
+++ b/src/main/java/net/minecraft/server/ItemWrittenBook.java
@@ -38,7 +38,7 @@ public class ItemWrittenBook extends Item {
     public InteractionResultWrapper<ItemStack> a(World world, EntityHuman entityhuman, EnumHand enumhand) {
         ItemStack itemstack = entityhuman.b(enumhand);
 
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             this.a(itemstack, entityhuman);
         }
 
diff --git a/src/main/java/net/minecraft/server/JsonList.java b/src/main/java/net/minecraft/server/JsonList.java
index 103cc590130feebb39463df596922d2819433c3a..e39c690c312a3d297e5b64caf79e61713d307fdb 100644
--- a/src/main/java/net/minecraft/server/JsonList.java
+++ b/src/main/java/net/minecraft/server/JsonList.java
@@ -1,6 +1,6 @@
 package net.minecraft.server;
 
-import com.github.ruviolence.reaper.BeastConfig;
+import com.homomc.beast.BeastConfig;
 import com.google.common.collect.Maps;
 import com.google.common.io.Files;
 import com.google.gson.Gson;
@@ -166,7 +166,7 @@ public class JsonList<K, V extends JsonListEntry<K>> {
     public void save() throws IOException {
         this.removeStaleEntries(); // Paper - remove expired values before saving
         
-        // Reaper start - Save json list async
+        // Beast start - Save json list async
         Runnable runnable = () -> {
         Collection collection = this.d.values();
         String s = this.b.toJson(collection);
@@ -175,8 +175,8 @@ public class JsonList<K, V extends JsonListEntry<K>> {
         try {
             bufferedwriter = Files.newWriter(this.c, StandardCharsets.UTF_8);
             bufferedwriter.write(s);
-        } catch (IOException ex) { // Reaper
-            JsonList.a.warn("Failed to save " + this.c, ex); // Reaper
+        } catch (IOException ex) { // Beast
+            JsonList.a.warn("Failed to save " + this.c, ex); // Beast
         } finally {
             IOUtils.closeQuietly(bufferedwriter);
         }
@@ -186,7 +186,7 @@ public class JsonList<K, V extends JsonListEntry<K>> {
         } else {
             runnable.run();
         }
-        // Reaper end
+        // Beast end
 
     }
 
diff --git a/src/main/java/net/minecraft/server/LegacyPingHandler.java b/src/main/java/net/minecraft/server/LegacyPingHandler.java
index 3dfad8778e533edae9291b9d82ed35edbd61630f..2979db4e7beaf09f3f75c38b3f10213552384f82 100644
--- a/src/main/java/net/minecraft/server/LegacyPingHandler.java
+++ b/src/main/java/net/minecraft/server/LegacyPingHandler.java
@@ -232,7 +232,7 @@ public class LegacyPingHandler extends ChannelInboundHandlerAdapter {
         int i = achar.length;
 
         for (int j = 0; j < i; ++j) {
-            char c0 = achar[j]; // Reaper - Inline
+            char c0 = achar[j]; // Beast - Inline
 
             bytebuf.writeChar(c0);
         }
diff --git a/src/main/java/net/minecraft/server/LoginListener.java b/src/main/java/net/minecraft/server/LoginListener.java
index 13091d1806b53165e20bc787c03d85c639d4ff31..420f50989bc244a31043ed2788c9e8b4d553d1dd 100644
--- a/src/main/java/net/minecraft/server/LoginListener.java
+++ b/src/main/java/net/minecraft/server/LoginListener.java
@@ -165,7 +165,7 @@ public class LoginListener implements PacketLoginInListener, ITickable {
                     public void operationComplete(ChannelFuture future) throws Exception { // CraftBukkit - fix decompile error
                         this.a((ChannelFuture) future);
                     }
-                }); // Reaper
+                }); // Beast
             }
 
             this.networkManager.sendPacket(new PacketLoginOutSuccess(this.i));
@@ -242,7 +242,7 @@ public class LoginListener implements PacketLoginInListener, ITickable {
                             }
 
                             new LoginHandler().fireEvents();
-                        } else if (/*LoginListener.this.server.R()*/false) { // Reaper - Remove singleplayer code
+                        } else if (/*LoginListener.this.server.R()*/false) { // Beast - Remove singleplayer code
                             LoginListener.c.warn("Failed to verify username but will let them in anyway!");
                             LoginListener.this.i = LoginListener.this.a(gameprofile);
                             LoginListener.this.g = LoginListener.EnumProtocolState.READY_TO_ACCEPT;
@@ -251,7 +251,7 @@ public class LoginListener implements PacketLoginInListener, ITickable {
                             LoginListener.c.error("Username \'{}\' tried to join with an invalid session", gameprofile.getName());
                         }
                     } catch (AuthenticationUnavailableException authenticationunavailableexception) {
-                        if (/*LoginListener.this.server.R()*/false) { // Reaper - Remove singleplayer code
+                        if (/*LoginListener.this.server.R()*/false) { // Beast - Remove singleplayer code
                             LoginListener.c.warn("Authentication servers are down but will let them in anyway!");
                             LoginListener.this.i = LoginListener.this.a(gameprofile);
                             LoginListener.this.g = LoginListener.EnumProtocolState.READY_TO_ACCEPT;
diff --git a/src/main/java/net/minecraft/server/MathHelper.java b/src/main/java/net/minecraft/server/MathHelper.java
index 617619b9ad58ff9336319683a4caeeed3e7ac240..a30e9ad8835e55ac79285b25109779c4de24ded5 100644
--- a/src/main/java/net/minecraft/server/MathHelper.java
+++ b/src/main/java/net/minecraft/server/MathHelper.java
@@ -1,12 +1,14 @@
 package net.minecraft.server;
 
+import com.homomc.beast.lithium.common.util.math.CompactSineLUT;
+
 import java.util.Random;
 import java.util.UUID;
 
 public class MathHelper {
 
     public static final float a = c(2.0F);
-    public static final float[] b = new float[65536]; // Reaper - private -> public
+    public static final float[] b = new float[65536]; // Beast - private -> public
     private static final Random c = new Random();
     private static final int[] d;
     private static final double e;
@@ -14,11 +16,11 @@ public class MathHelper {
     private static final double[] g;
 
     public static float sin(float f) {
-        return com.github.ruviolence.reaper.lithium.common.util.math.CompactSineLUT.sin(f); // Reaper - Lithium: math/sine_lut/MathHelper
+        return CompactSineLUT.sin(f); // Beast - Lithium: math/sine_lut/MathHelper
     }
 
     public static float cos(float f) {
-        return com.github.ruviolence.reaper.lithium.common.util.math.CompactSineLUT.cos(f); // Reaper - Lithium: math/sine_lut/MathHelper
+        return CompactSineLUT.cos(f); // Beast - Lithium: math/sine_lut/MathHelper
     }
 
     public static float c(float f) {
diff --git a/src/main/java/net/minecraft/server/MerchantRecipe.java b/src/main/java/net/minecraft/server/MerchantRecipe.java
index 7b8f72aedae14474218bf40cd6412655f65396d8..a3c97d2b28afd8468b714bc6fea618206a1208c1 100644
--- a/src/main/java/net/minecraft/server/MerchantRecipe.java
+++ b/src/main/java/net/minecraft/server/MerchantRecipe.java
@@ -124,12 +124,12 @@ public class MerchantRecipe {
     }
 
     public NBTTagCompound k() {
-        NBTTagCompound nbttagcompound = new NBTTagCompound(6); // Reaper - Use initial capacity
+        NBTTagCompound nbttagcompound = new NBTTagCompound(6); // Beast - Use initial capacity
 
-        nbttagcompound.set("buy", this.buyingItem1.save(new NBTTagCompound(4))); // Reaper - Use initial capacity
-        nbttagcompound.set("sell", this.sellingItem.save(new NBTTagCompound(4))); // Reaper - Use initial capacity
+        nbttagcompound.set("buy", this.buyingItem1.save(new NBTTagCompound(4))); // Beast - Use initial capacity
+        nbttagcompound.set("sell", this.sellingItem.save(new NBTTagCompound(4))); // Beast - Use initial capacity
         if (!this.buyingItem2.isEmpty()) {
-            nbttagcompound.set("buyB", this.buyingItem2.save(new NBTTagCompound(4))); // Reaper - Use initial capacity
+            nbttagcompound.set("buyB", this.buyingItem2.save(new NBTTagCompound(4))); // Beast - Use initial capacity
         }
 
         nbttagcompound.setInt("uses", this.uses);
diff --git a/src/main/java/net/minecraft/server/MethodProfiler.java b/src/main/java/net/minecraft/server/MethodProfiler.java
index 3023ec12bbae5bcc32ecadce0f66d4ba82aa06f5..fc39f850220ae7f74affc0ff197fd94de4b53813 100644
--- a/src/main/java/net/minecraft/server/MethodProfiler.java
+++ b/src/main/java/net/minecraft/server/MethodProfiler.java
@@ -13,7 +13,7 @@ import org.apache.logging.log4j.Logger;
 
 public class MethodProfiler {
 
-    /* // Reaper start - Remove MethodProfiler
+    /* // Beast start - Remove MethodProfiler
     public static final boolean ENABLED = Boolean.getBoolean("enableDebugMethodProfiler"); // CraftBukkit - disable unless specified in JVM arguments
     private static final Logger b = LogManager.getLogger();
     private final List<String> c = Lists.newArrayList();
@@ -21,21 +21,21 @@ public class MethodProfiler {
     public boolean a;
     private String e = "";
     private final Map<String, Long> f = Maps.newHashMap();
-    */ // Reaper end
+    */ // Beast end
 
     public MethodProfiler() {}
 
     public void a() {
-        /* // Reaper start - Remove MethodProfiler
+        /* // Beast start - Remove MethodProfiler
         if (!ENABLED) return;  // CraftBukkit
         this.f.clear();
         this.e = "";
         this.c.clear();
-        */ // Reaper end
+        */ // Beast end
     }
 
     public void a(String s) {
-        /* // Reaper start - Remove MethodProfiler
+        /* // Beast start - Remove MethodProfiler
         if (!ENABLED) return;  // CraftBukkit
         if (this.a) {
             if (!this.e.isEmpty()) {
@@ -46,20 +46,20 @@ public class MethodProfiler {
             this.c.add(this.e);
             this.d.add(Long.valueOf(System.nanoTime()));
         }
-        */ // Reaper end
+        */ // Beast end
     }
 
     public void a(Supplier<String> supplier) {
-        /* // Reaper start - Remove MethodProfiler
+        /* // Beast start - Remove MethodProfiler
         if (!ENABLED) return;  // CraftBukkit
         if (this.a) {
             this.a((String) supplier.get());
         }
-        */ // Reaper end
+        */ // Beast end
     }
 
     public void b() {
-        /* // Reaper start - Remove MethodProfiler
+        /* // Beast start - Remove MethodProfiler
         if (!ENABLED) return;  // CraftBukkit
         if (this.a) {
             long i = System.nanoTime();
@@ -80,11 +80,11 @@ public class MethodProfiler {
 
             this.e = this.c.isEmpty() ? "" : (String) this.c.get(this.c.size() - 1);
         }
-        */ // Reaper end
+        */ // Beast end
     }
 
     public List<MethodProfiler.ProfilerInfo> b(String s) {
-        // Reaper start - Remove MethodProfiler
+        // Beast start - Remove MethodProfiler
         return Collections.emptyList();
         /*
         if (!ENABLED || !this.a) {  // CraftBukkit
@@ -150,54 +150,54 @@ public class MethodProfiler {
             arraylist.add(0, new MethodProfiler.ProfilerInfo(s, 100.0D, (double) k * 100.0D / (double) i));
             return arraylist;
         }
-        */ // Reaper end
+        */ // Beast end
     }
 
     public void c(String s) {
-        /* // Reaper start - Remove MethodProfiler
+        /* // Beast start - Remove MethodProfiler
         if (!ENABLED) return;  // CraftBukkit
         this.b();
         this.a(s);
-        */ // Reaper end
+        */ // Beast end
     }
 
     public String c() {
-        // Reaper start - Remove MethodProfiler
+        // Beast start - Remove MethodProfiler
         return "[REMOVED]";
         /*
         if (!ENABLED) return "[DISABLED]";  // CraftBukkit
         return this.c.isEmpty() ? "[UNKNOWN]" : (String) this.c.get(this.c.size() - 1);
-        */ // Reaper end
+        */ // Beast end
     }
 
     public static final class ProfilerInfo implements Comparable<MethodProfiler.ProfilerInfo> {
 
-        /* // Reaper start - Remove MethodProfiler
+        /* // Beast start - Remove MethodProfiler
         public double a;
         public double b;
         public String c;
-        */ // Reaper end
+        */ // Beast end
 
         public ProfilerInfo(String s, double d0, double d1) {
-            /* // Reaper start - Remove MethodProfiler
+            /* // Beast start - Remove MethodProfiler
             this.c = s;
             this.a = d0;
             this.b = d1;
-            */ // Reaper end
+            */ // Beast end
         }
 
-        /* // Reaper start - Remove MethodProfiler
+        /* // Beast start - Remove MethodProfiler
         public int a(MethodProfiler.ProfilerInfo methodprofiler_profilerinfo) {
             return methodprofiler_profilerinfo.a < this.a ? -1 : (methodprofiler_profilerinfo.a > this.a ? 1 : methodprofiler_profilerinfo.c.compareTo(this.c));
         }
-        */ // Reaper end
+        */ // Beast end
 
         public int compareTo(MethodProfiler.ProfilerInfo object) { // CraftBukkit: decompile error
-            // Reaper start - Remove MethodProfiler
+            // Beast start - Remove MethodProfiler
             return 0;
             /*
             return this.a((MethodProfiler.ProfilerInfo) object);
-            */ // Reaper end
+            */ // Beast end
         }
     }
 }
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index b7864248dfac800958ef256664fe9f291c0fbadc..51326965a07bff8dc5e5f3b2a36e538f4af5a4f3 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -1,10 +1,20 @@
 package net.minecraft.server;
 
-import com.github.ruviolence.reaper.BeastConfig;
+import com.homomc.beast.BeastConfig;
 import com.google.common.collect.Lists;
 import com.google.common.util.concurrent.Futures;
 import com.google.common.util.concurrent.ListenableFuture;
 import com.google.common.util.concurrent.ListenableFutureTask;
+import com.homomc.beast.Constants;
+import com.homomc.beast.event.block.TileEntityTickEvent;
+import com.homomc.beast.event.entity.EntityMoveEvent;
+import com.homomc.beast.event.entity.EntityTickEvent;
+import com.homomc.beast.event.player.EntityTrackedEvent;
+import com.homomc.beast.event.player.EntityUntrackedEvent;
+import com.homomc.beast.event.server.ServerTickEndEvent;
+import com.homomc.beast.event.server.ServerTickStartEvent;
+import com.homomc.beast.event.server.WorldTickEndEvent;
+import com.homomc.beast.event.server.WorldTickStartEvent;
 import com.mojang.authlib.GameProfile;
 import com.mojang.authlib.GameProfileRepository;
 import com.mojang.authlib.minecraft.MinecraftSessionService;
@@ -50,7 +60,7 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IAs
     public static final Logger LOGGER = LogManager.getLogger();
     public static final File a = new File("usercache.json");
     public Convertable convertable;
-    // private final MojangStatisticsGenerator m = new MojangStatisticsGenerator("server", this, aw()); // Reaper - Remove snooper
+    // private final MojangStatisticsGenerator m = new MojangStatisticsGenerator("server", this, aw()); // Beast - Remove snooper
     public File universe;
     private final List<ITickable> o = Lists.newArrayList();
     public final ICommandHandler b;
@@ -82,7 +92,7 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IAs
     public final long[] h = new long[100];
     public long[][] i;
     private KeyPair I;
-    // private String J; // Reaper - Remove singleplayer code
+    // private String J; // Beast - Remove singleplayer code
     private String K;
     private boolean demoMode;
     private boolean N;
@@ -118,14 +128,14 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IAs
     // Spigot start
     public final SlackActivityAccountant slackActivityAccountant = new SlackActivityAccountant();
     // Spigot end
-    public int timeUpdateTicks; // Reaper - Custom time update period
-    // Reaper start
+    public int timeUpdateTicks; // Beast - Custom time update period
+    // Beast start
     boolean hasEntityMoveEvent;
     boolean hasEntityTickEvent;
     boolean hasTileEntityTickEvent;
     boolean hasEntityTrackedEvent;
     boolean hasEntityUntrackedEvent;
-    // Reaper end
+    // Beast end
 
     public MinecraftServer(OptionSet options, Proxy proxy, DataConverterManager dataconvertermanager, YggdrasilAuthenticationService yggdrasilauthenticationservice, MinecraftSessionService minecraftsessionservice, GameProfileRepository gameprofilerepository, UserCache usercache) {
         SERVER = this; // Paper - better singleton
@@ -330,7 +340,7 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IAs
             this.server.getPluginManager().callEvent(new org.bukkit.event.world.WorldInitEvent(world.getWorld()));
 
             world.addIWorldAccess(new WorldManager(this, world));
-            if (/*!this.R()*/true) { // Reaper - Remove singleplayer code
+            if (/*!this.R()*/true) { // Beast - Remove singleplayer code
                 world.getWorldData().setGameType(this.getGamemode());
             }
 
@@ -393,7 +403,7 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IAs
                     }
 
                     ++i;
-                    worldserver.getChunkProviderServer().getChunkAt(blockposition.getX() + k >> 4, blockposition.getZ() + l >> 4, com.github.ruviolence.reaper.Constants.NULL_RUNNABLE); // Reaper - Async Spawn Chunks
+                    worldserver.getChunkProviderServer().getChunkAt(blockposition.getX() + k >> 4, blockposition.getZ() + l >> 4, Constants.NULL_RUNNABLE); // Beast - Async Spawn Chunks
                 }
             }
         }
@@ -482,10 +492,10 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IAs
         }
         // CraftBukkit end
         MinecraftServer.LOGGER.info("Stopping server");
-        // Reaper start
+        // Beast start
         MinecraftServer.LOGGER.info("Flushing lighting queue");
-        ReaperLightingQueue.processQueueAnyway();
-        // Reaper end
+        BeastLightingQueue.processQueueAnyway();
+        // Beast end
         // CraftBukkit start
         if (this.server != null) {
             this.server.disablePlugins();
@@ -531,11 +541,11 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IAs
             // CraftBukkit end */
         }
 
-        /* // Reaper start - Remove snooper
+        /* // Beast start - Remove snooper
         if (this.m.d()) {
             this.m.e();
         }
-        */ // Reaper end
+        */ // Beast end
 
         // Spigot start
         if (org.spigotmc.SpigotConfig.saveUserCacheOnStopOnly) {
@@ -583,47 +593,47 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IAs
     public static class RollingAverage {
         private final int size;
         private long time;
-        private java.math.BigDecimal total; // Reaper
+        private java.math.BigDecimal total; // Beast
         private int index = 0;
-        private final java.math.BigDecimal[] samples; // Reaper
+        private final java.math.BigDecimal[] samples; // Beast
         private final long[] times;
 
         RollingAverage(int size) {
             this.size = size;
             this.time = size * SEC_IN_NANO;
-            // Reaper start
+            // Beast start
             this.total = dec(TPS).multiply(dec(SEC_IN_NANO)).multiply(dec(size));
             this.samples = new java.math.BigDecimal[size];
-            // Reaper end
+            // Beast end
             this.times = new long[size];
             for (int i = 0; i < size; i++) {
-                this.samples[i] = dec(TPS); // Reaper
+                this.samples[i] = dec(TPS); // Beast
                 this.times[i] = SEC_IN_NANO;
             }
         }
 
-        // Reaper start
+        // Beast start
         private static java.math.BigDecimal dec(long t) {
             return new java.math.BigDecimal(t);
         }
-        // Reaper end
-        public void add(java.math.BigDecimal x, long t) { // Reaper
+        // Beast end
+        public void add(java.math.BigDecimal x, long t) { // Beast
             time -= times[index];
-            total = total.subtract(samples[index].multiply(dec(times[index]))); // Reaper
+            total = total.subtract(samples[index].multiply(dec(times[index]))); // Beast
             samples[index] = x;
             times[index] = t;
             time += t;
-            total = total.add(x.multiply(dec(t))); // Reaper
+            total = total.add(x.multiply(dec(t))); // Beast
             if (++index == size) {
                 index = 0;
             }
         }
 
         public double getAverage() {
-            return total.divide(dec(time), 30, java.math.RoundingMode.HALF_UP).doubleValue(); // Reaper
+            return total.divide(dec(time), 30, java.math.RoundingMode.HALF_UP).doubleValue(); // Beast
         }
     }
-    private static final java.math.BigDecimal TPS_BASE = new java.math.BigDecimal(1E9).multiply(new java.math.BigDecimal(SAMPLE_INTERVAL)); // Reaper
+    private static final java.math.BigDecimal TPS_BASE = new java.math.BigDecimal(1E9).multiply(new java.math.BigDecimal(SAMPLE_INTERVAL)); // Beast
     // Paper End
 
     public void run() {
@@ -665,7 +675,7 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IAs
                     if ( ++MinecraftServer.currentTick % SAMPLE_INTERVAL == 0 )
                     {
                         final long diff = curTime - tickSection;
-                        java.math.BigDecimal currentTps = TPS_BASE.divide(new java.math.BigDecimal(diff), 30, java.math.RoundingMode.HALF_UP); // Reaper
+                        java.math.BigDecimal currentTps = TPS_BASE.divide(new java.math.BigDecimal(diff), 30, java.math.RoundingMode.HALF_UP); // Beast
                         tps1.add(currentTps, diff);
                         tps5.add(currentTps, diff);
                         tps15.add(currentTps, diff);
@@ -678,15 +688,15 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IAs
                     }
                     lastTick = curTime;
 
-                    if (com.github.ruviolence.reaper.event.server.ServerTickStartEvent.getHandlerList().getRegisteredListeners().length != 0) org.bukkit.craftbukkit.event.CraftEventFactory.callServerTickStartEvent(this.ticks); // Reaper - ServerTickStartEvent
+                    if (ServerTickStartEvent.getHandlerList().getRegisteredListeners().length != 0) org.bukkit.craftbukkit.event.CraftEventFactory.callServerTickStartEvent(this.ticks); // Beast - ServerTickStartEvent
                     this.C();
-                    // Reaper start - ServerTickEndEvent
-                    if (com.github.ruviolence.reaper.event.server.ServerTickEndEvent.getHandlerList().getRegisteredListeners().length != 0) {
+                    // Beast start - ServerTickEndEvent
+                    if (ServerTickEndEvent.getHandlerList().getRegisteredListeners().length != 0) {
                         long endTime = System.nanoTime();
                         long remaining = (TICK_TIME - (endTime - lastTick)) - catchupTime;
                         org.bukkit.craftbukkit.event.CraftEventFactory.callServerTickEndEvent(this.ticks, ((double) (endTime - lastTick) / 1000000D), remaining);
                     }
-                    // Reaper end
+                    // Beast end
                     this.Q = true;
                 }
                 // Spigot end
@@ -758,7 +768,7 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IAs
                 ImageIO.write(bufferedimage, "PNG", new ByteBufOutputStream(bytebuf));
                 /*ByteBuf */ bytebuf1 = Base64.encode(bytebuf); // Paper - cleanup favicon bytebuf
 
-                serverping.setFavicon("data:image/png;base64," + org.apache.commons.lang3.StringUtils.remove(bytebuf1.toString(StandardCharsets.UTF_8), '\n')); // Paper - Fix encoding for 1.13+ clients, still compat w/ 1.12 clients // Reaper - Optimize
+                serverping.setFavicon("data:image/png;base64," + org.apache.commons.lang3.StringUtils.remove(bytebuf1.toString(StandardCharsets.UTF_8), '\n')); // Paper - Fix encoding for 1.13+ clients, still compat w/ 1.12 clients // Beast - Optimize
             } catch (Exception exception) {
                 MinecraftServer.LOGGER.error("Couldn\'t load server icon", exception);
             } finally {
@@ -788,13 +798,13 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IAs
         ++this.ticks;
         if (this.T) {
             this.T = false;
-            /* // Reaper start - Remove MethodProfiler
+            /* // Beast start - Remove MethodProfiler
             this.methodProfiler.a = true;
             this.methodProfiler.a();
-            */ // Reaper end
+            */ // Beast end
         }
 
-        // this.methodProfiler.a("root"); // Reaper - Remove MethodProfiler
+        // this.methodProfiler.a("root"); // Beast - Remove MethodProfiler
         this.D();
         if (i - this.Z >= 5000000000L) {
             this.Z = i;
@@ -810,7 +820,7 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IAs
             this.q.b().a(agameprofile);
         }
 
-            // this.methodProfiler.a("save"); // Reaper - Remove MethodProfiler
+            // this.methodProfiler.a("save"); // Beast - Remove MethodProfiler
 
         serverAutoSave = (autosavePeriod > 0 && this.ticks % autosavePeriod == 0); // Paper
         int playerSaveInterval = com.destroystokyo.paper.PaperConfig.playerAutoSaveRate;
@@ -832,17 +842,17 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IAs
             server.playerCommandState = false;
             // this.saveChunks(true);
             // Spigot End
-            // this.methodProfiler.b(); // Reaper - Remove MethodProfiler
+            // this.methodProfiler.b(); // Beast - Remove MethodProfiler
         //} // Paper - Incremental Auto Saving
 
-        // this.methodProfiler.a("tallying"); // Reaper - Remove MethodProfiler
+        // this.methodProfiler.a("tallying"); // Beast - Remove MethodProfiler
         // Spigot start
         long tickNanos;
         this.h[this.ticks % 100] = tickNanos = System.nanoTime() - i;
         // Spigot end
-        // this.methodProfiler.b(); // Reaper - Remove MethodProfiler
-        // this.methodProfiler.a("snooper"); // Reaper - Remove MethodProfiler
-        /* // Reaper start - Remove snooper
+        // this.methodProfiler.b(); // Beast - Remove MethodProfiler
+        // this.methodProfiler.a("snooper"); // Beast - Remove MethodProfiler
+        /* // Beast start - Remove snooper
         if (getSnooperEnabled() && !this.m.d() && this.ticks > 100) {  // Spigot
             this.m.a();
         }
@@ -850,20 +860,20 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IAs
         if (getSnooperEnabled() && this.ticks % 6000 == 0) { // Spigot
             this.m.b();
         }
-        */ // Reaper end
+        */ // Beast end
 
-        // this.methodProfiler.b(); // Reaper - Remove MethodProfiler
-        // this.methodProfiler.b(); // Reaper - Remove MethodProfiler
+        // this.methodProfiler.b(); // Beast - Remove MethodProfiler
+        // this.methodProfiler.b(); // Beast - Remove MethodProfiler
 
         org.spigotmc.WatchdogThread.tick(); // Spigot
-        // PaperLightingQueue.processQueue(i); // Paper // Reaper - Inline
-        ReaperLightingQueue.processQueue(i); // Reaper
+        // PaperLightingQueue.processQueue(i); // Paper // Beast - Inline
+        BeastLightingQueue.processQueue(i); // Beast
         this.slackActivityAccountant.tickEnded(tickNanos); // Spigot
     }
 
     public void D() {
         this.server.getScheduler().mainThreadHeartbeat(this.ticks); // CraftBukkit
-        // this.methodProfiler.a("jobs"); // Reaper - Remove MethodProfiler
+        // this.methodProfiler.a("jobs"); // Beast - Remove MethodProfiler
         Queue queue = this.j;
 
         // Spigot start
@@ -873,7 +883,7 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IAs
             SystemUtils.a(entry, MinecraftServer.LOGGER);
          }
         // Spigot end
-        // this.methodProfiler.c("levels"); // Reaper - Remove MethodProfiler
+        // this.methodProfiler.c("levels"); // Beast - Remove MethodProfiler
 
         // CraftBukkit start
         // Run tasks that are waiting on processing
@@ -884,37 +894,37 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IAs
         org.bukkit.craftbukkit.chunkio.ChunkIOExecutor.tick();
 
         // Send time updates to everyone, it will get the right time from the world the player is in.
-        if (++this.timeUpdateTicks > BeastConfig.timeUpdatePeriod) { this.timeUpdateTicks = 0; // Reaper - Custom time update period
+        if (++this.timeUpdateTicks > BeastConfig.timeUpdatePeriod) { this.timeUpdateTicks = 0; // Beast - Custom time update period
             for (int i = 0; i < this.getPlayerList().players.size(); ++i) {
                 EntityPlayer entityplayer = (EntityPlayer) this.getPlayerList().players.get(i);
                 entityplayer.playerConnection.sendPacket(new PacketPlayOutUpdateTime(entityplayer.world.getTime(), entityplayer.getPlayerTime(), entityplayer.world.getGameRules().getBoolean("doDaylightCycle"))); // Add support for per player time
             }
         }
 
-        // Reaper start
-        hasEntityMoveEvent = com.github.ruviolence.reaper.event.entity.EntityMoveEvent.getHandlerList().getRegisteredListeners().length != 0;
-        hasEntityTickEvent = com.github.ruviolence.reaper.event.entity.EntityTickEvent.getHandlerList().getRegisteredListeners().length != 0;
-        hasTileEntityTickEvent = com.github.ruviolence.reaper.event.block.TileEntityTickEvent.getHandlerList().getRegisteredListeners().length != 0;
-        hasEntityTrackedEvent = com.github.ruviolence.reaper.event.player.EntityTrackedEvent.getHandlerList().getRegisteredListeners().length != 0;
-        hasEntityUntrackedEvent = com.github.ruviolence.reaper.event.player.EntityUntrackedEvent.getHandlerList().getRegisteredListeners().length != 0;
-        boolean hasWorldTickStartEvent = com.github.ruviolence.reaper.event.server.WorldTickStartEvent.getHandlerList().getRegisteredListeners().length != 0;
-        boolean hasWorldTickEndEvent = com.github.ruviolence.reaper.event.server.WorldTickEndEvent.getHandlerList().getRegisteredListeners().length != 0;
-        // Reaper end
+        // Beast start
+        hasEntityMoveEvent = EntityMoveEvent.getHandlerList().getRegisteredListeners().length != 0;
+        hasEntityTickEvent = EntityTickEvent.getHandlerList().getRegisteredListeners().length != 0;
+        hasTileEntityTickEvent = TileEntityTickEvent.getHandlerList().getRegisteredListeners().length != 0;
+        hasEntityTrackedEvent = EntityTrackedEvent.getHandlerList().getRegisteredListeners().length != 0;
+        hasEntityUntrackedEvent = EntityUntrackedEvent.getHandlerList().getRegisteredListeners().length != 0;
+        boolean hasWorldTickStartEvent = WorldTickStartEvent.getHandlerList().getRegisteredListeners().length != 0;
+        boolean hasWorldTickEndEvent = WorldTickEndEvent.getHandlerList().getRegisteredListeners().length != 0;
+        // Beast end
 
         int i;
 
         for (i = 0; i < this.worlds.size(); ++i) { // CraftBukkit
-            // long j = System.nanoTime(); // Reaper - Optimize
+            // long j = System.nanoTime(); // Beast - Optimize
 
             // if (i == 0 || this.getAllowNether()) {
                 WorldServer worldserver = this.worlds.get(i);
                 TileEntityHopper.skipHopperEvents = worldserver.paperConfig.disableHopperMoveEvents || org.bukkit.event.inventory.InventoryMoveItemEvent.getHandlerList().getRegisteredListeners().length == 0;
 
-                /* // Reaper start - Remove MethodProfiler
+                /* // Beast start - Remove MethodProfiler
                 this.methodProfiler.a(() -> {
                     return worldserver.getWorldData().getName();
                 });
-                */ // Reaper end
+                */ // Beast end
                 /* Drop global time updates
                 if (this.ticks % 20 == 0) {
                     this.methodProfiler.a("timeSync");
@@ -923,9 +933,9 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IAs
                 }
                 // CraftBukkit end */
 
-                // this.methodProfiler.a("tick"); // Reaper - Remove MethodProfiler
-                long startTime = hasWorldTickEndEvent ? System.nanoTime() : 0; // Reaper - WorldTickEndEvent
-                if (hasWorldTickStartEvent) org.bukkit.craftbukkit.event.CraftEventFactory.callWorldTickStartEvent(worldserver, MinecraftServer.currentTick); // Reaper - WorldTickStartEvent
+                // this.methodProfiler.a("tick"); // Beast - Remove MethodProfiler
+                long startTime = hasWorldTickEndEvent ? System.nanoTime() : 0; // Beast - WorldTickEndEvent
+                if (hasWorldTickStartEvent) org.bukkit.craftbukkit.event.CraftEventFactory.callWorldTickStartEvent(worldserver, MinecraftServer.currentTick); // Beast - WorldTickStartEvent
 
                 CrashReport crashreport;
 
@@ -957,9 +967,9 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IAs
                     throw new ReportedException(crashreport);
                 }
 
-                // this.methodProfiler.b(); // Reaper - Remove MethodProfiler
-                // this.methodProfiler.a("tracker"); // Reaper - Remove MethodProfiler
-                // Reaper start - Flush consolidation
+                // this.methodProfiler.b(); // Beast - Remove MethodProfiler
+                // this.methodProfiler.a("tracker"); // Beast - Remove MethodProfiler
+                // Beast start - Flush consolidation
                 List<net.minecraft.server.PlayerConnection> disabledFlushes = new java.util.ArrayList<>(worldserver.players.size());
                 for (EntityHuman entityHuman : worldserver.players) {
                     if (entityHuman instanceof EntityPlayer) {
@@ -970,40 +980,40 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IAs
                         }
                     }
                 }
-                try { // Reaper end - Flush consolidation
-                if (this.getPlayerList().getPlayerCount() != 0) // Reaper - Skip updating entity tracker without players
+                try { // Beast end - Flush consolidation
+                if (this.getPlayerList().getPlayerCount() != 0) // Beast - Skip updating entity tracker without players
                 worldserver.getTracker().updatePlayers();
-                // Reaper start - Flush consolidation
+                // Beast start - Flush consolidation
                 } finally {
                     for (net.minecraft.server.PlayerConnection playerConnection : disabledFlushes) {
                         playerConnection.networkManager.enableAutomaticFlush();
                     }
                 }
-                // Reaper end - Flush consolidation
-                // this.methodProfiler.b(); // Reaper - Remove MethodProfiler
-                // this.methodProfiler.b(); // Reaper - Remove MethodProfiler
+                // Beast end - Flush consolidation
+                // this.methodProfiler.b(); // Beast - Remove MethodProfiler
+                // this.methodProfiler.b(); // Beast - Remove MethodProfiler
                 worldserver.explosionDensityCache.clear(); // Paper - Optimize explosions
             // } // CraftBukkit
 
-            if (hasWorldTickEndEvent) org.bukkit.craftbukkit.event.CraftEventFactory.callWorldTickEndEvent(worldserver, MinecraftServer.currentTick, ((double) (System.nanoTime() - startTime) / 1000000D)); // Reaper - WorldTickEndEvent
+            if (hasWorldTickEndEvent) org.bukkit.craftbukkit.event.CraftEventFactory.callWorldTickEndEvent(worldserver, MinecraftServer.currentTick, ((double) (System.nanoTime() - startTime) / 1000000D)); // Beast - WorldTickEndEvent
             // this.i[i][this.ticks % 100] = System.nanoTime() - j; // CraftBukkit
         }
 
-        // this.methodProfiler.c("connection"); // Reaper - Remove MethodProfiler
+        // this.methodProfiler.c("connection"); // Beast - Remove MethodProfiler
         this.an().c();
-        // this.methodProfiler.c("players"); // Reaper - Remove MethodProfiler
+        // this.methodProfiler.c("players"); // Beast - Remove MethodProfiler
         this.v.tick();
-        // this.methodProfiler.c("commandFunctions"); // Reaper - Remove MethodProfiler
-        if (false) { // Reaper start - Deactivate gameLoopFunction
+        // this.methodProfiler.c("commandFunctions"); // Beast - Remove MethodProfiler
+        if (false) { // Beast start - Deactivate gameLoopFunction
         this.aL().e();
-        } // Reaper end - Deactivate gameLoopFunction
-        // this.methodProfiler.c("tickables"); // Reaper - Remove MethodProfiler
+        } // Beast end - Deactivate gameLoopFunction
+        // this.methodProfiler.c("tickables"); // Beast - Remove MethodProfiler
 
         for (i = 0; i < this.o.size(); ++i) {
             ((ITickable) this.o.get(i)).e();
         }
 
-        // this.methodProfiler.b(); // Reaper - Remove MethodProfiler
+        // this.methodProfiler.b(); // Beast - Remove MethodProfiler
     }
 
     public boolean getAllowNether() {
@@ -1015,7 +1025,7 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IAs
     }
 
     public static void main(final OptionSet options) { // CraftBukkit - replaces main(String[] astring)
-        BeastConfig.init((File) options.valueOf("beast-settings")); // Reaper
+        BeastConfig.init((File) options.valueOf("beast-settings")); // Beast
         DispenserRegistry.c();
 
         try {
@@ -1067,7 +1077,7 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IAs
             */ // CraftBukkit end
 
             String s1 = "."; // PAIL?
-            YggdrasilAuthenticationService yggdrasilauthenticationservice = new com.destroystokyo.paper.profile.PaperAuthenticationService(Proxy.NO_PROXY, com.eatthepath.uuid.FastUUID.toString(UUID.randomUUID())); // Paper // Reaper - Use FastUUID
+            YggdrasilAuthenticationService yggdrasilauthenticationservice = new com.destroystokyo.paper.profile.PaperAuthenticationService(Proxy.NO_PROXY, com.eatthepath.uuid.FastUUID.toString(UUID.randomUUID())); // Paper // Beast - Use FastUUID
             MinecraftSessionService minecraftsessionservice = yggdrasilauthenticationservice.createMinecraftSessionService();
             GameProfileRepository gameprofilerepository = yggdrasilauthenticationservice.createProfileRepository();
             UserCache usercache = new UserCache(gameprofilerepository, new File(s1, MinecraftServer.a.getName()));
@@ -1203,7 +1213,7 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IAs
     public CrashReport b(CrashReport crashreport) {
         crashreport.g().a("Profiler Position", new CrashReportCallable() {
             public String a() throws Exception {
-                return "N/A (disabled)"; // Reaper - Remove MethodProfiler
+                return "N/A (disabled)"; // Beast - Remove MethodProfiler
             }
 
             public Object call() throws Exception {
@@ -1308,15 +1318,15 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IAs
     }
 
     public String Q() {
-        return /*this.J*/null; // Reaper - Remove singleplayer code
+        return /*this.J*/null; // Beast - Remove singleplayer code
     }
 
     public void i(String s) {
-        // this.J = s; // Reaper - Remove singleplayer code
+        // this.J = s; // Beast - Remove singleplayer code
     }
 
     public boolean R() {
-        return /*this.J != null*/false; // Reaper - Remove singleplayer code
+        return /*this.J != null*/false; // Beast - Remove singleplayer code
     }
 
     public String S() {
@@ -1344,7 +1354,7 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IAs
                 if (worldserver.getWorldData().isHardcore()) {
                     worldserver.getWorldData().setDifficulty(EnumDifficulty.HARD);
                     worldserver.setSpawnFlags(true, true);
-                } else if (/*this.R()*/false) { // Reaper - Remove singleplayer code
+                } else if (/*this.R()*/false) { // Beast - Remove singleplayer code
                     worldserver.getWorldData().setDifficulty(enumdifficulty);
                     worldserver.setSpawnFlags(worldserver.getDifficulty() != EnumDifficulty.PEACEFUL, true);
                 } else {
@@ -1390,7 +1400,7 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IAs
     }
 
     public void a(MojangStatisticsGenerator mojangstatisticsgenerator) {
-        /* // Reaper start - Remove snooper
+        /* // Beast start - Remove snooper
         mojangstatisticsgenerator.a("whitelist_enabled", Boolean.valueOf(false));
         mojangstatisticsgenerator.a("whitelist_count", Integer.valueOf(0));
         if (this.v != null) {
@@ -1427,16 +1437,16 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IAs
         }
 
         mojangstatisticsgenerator.a("worlds", Integer.valueOf(i));
-        */ // Reaper end
+        */ // Beast end
     }
 
     public void b(MojangStatisticsGenerator mojangstatisticsgenerator) {
-        /* // Reaper start - Remove snooper
+        /* // Beast start - Remove snooper
         mojangstatisticsgenerator.b("singleplayer", Boolean.valueOf(this.R()));
         mojangstatisticsgenerator.b("server_brand", this.getServerModName());
         mojangstatisticsgenerator.b("gui_supported", GraphicsEnvironment.isHeadless() ? "headless" : "supported");
         mojangstatisticsgenerator.b("dedicated", Boolean.valueOf(this.aa()));
-        */ // Reaper end
+        */ // Beast end
     }
 
     public boolean getSnooperEnabled() {
diff --git a/src/main/java/net/minecraft/server/MobEffectList.java b/src/main/java/net/minecraft/server/MobEffectList.java
index a01afedda2e82bb2a5a838ad65d2ab747fff457f..29e364dcd6764280ff22e15a9dc36b1614748db7 100644
--- a/src/main/java/net/minecraft/server/MobEffectList.java
+++ b/src/main/java/net/minecraft/server/MobEffectList.java
@@ -3,11 +3,11 @@ package net.minecraft.server;
 import com.google.common.collect.Maps;
 import java.util.Iterator;
 import java.util.Map;
-import java.util.UUID;
 import java.util.Map.Entry;
 import javax.annotation.Nullable;
 
 // CraftBukkit start
+import com.homomc.beast.OldCombatHelper;
 import org.bukkit.craftbukkit.event.CraftEventFactory;
 import org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason;
 // CraftBukkit end
@@ -65,9 +65,9 @@ public class MobEffectList {
         } else if (this == MobEffects.WITHER) {
             entityliving.damageEntity(DamageSource.WITHER, 1.0F);
         } else if (this == MobEffects.HUNGER && entityliving instanceof EntityHuman) {
-            ((EntityHuman) entityliving).applyExhaustion(com.github.ruviolence.reaper.OldCombatHelper.EXHAUSTION_HUNGER_EFFECT * (i + 1));
+            ((EntityHuman) entityliving).applyExhaustion(OldCombatHelper.EXHAUSTION_HUNGER_EFFECT * (i + 1));
         } else if (this == MobEffects.SATURATION && entityliving instanceof EntityHuman) {
-            if (true) { // Reaper - Remove isClientSide check
+            if (true) { // Beast - Remove isClientSide check
                 // CraftBukkit start
                 EntityHuman entityhuman = (EntityHuman) entityliving;
                 int oldFoodLevel = entityhuman.getFoodData().foodLevel;
@@ -150,7 +150,7 @@ public class MobEffectList {
     }
 
     public MobEffectList a(IAttribute iattribute, String s, double d0, int i) {
-        AttributeModifier attributemodifier = new AttributeModifier(com.eatthepath.uuid.FastUUID.parseUUID(s), this.a(), d0, i); // Reaper - Use FastUUID
+        AttributeModifier attributemodifier = new AttributeModifier(com.eatthepath.uuid.FastUUID.parseUUID(s), this.a(), d0, i); // Beast - Use FastUUID
 
         this.a.put(iattribute, attributemodifier);
         return this;
@@ -201,7 +201,7 @@ public class MobEffectList {
         MobEffectList.REGISTRY.a(2, new MinecraftKey("slowness"), (new MobEffectList(true, 5926017)).c("effect.moveSlowdown").b(1, 0).a(GenericAttributes.MOVEMENT_SPEED, "7107DE5E-7CE8-4030-940E-514C1F160890", -0.15000000596046448D, 2));
         MobEffectList.REGISTRY.a(3, new MinecraftKey("haste"), (new MobEffectList(false, 14270531)).c("effect.digSpeed").b(2, 0).a(1.5D).j().a(GenericAttributes.g, "AF8B6E3F-3328-4C0A-AA36-5BA2BB9DBEF3", 0.10000000149011612D, 2));
         MobEffectList.REGISTRY.a(4, new MinecraftKey("mining_fatigue"), (new MobEffectList(true, 4866583)).c("effect.digSlowDown").b(3, 0).a(GenericAttributes.g, "55FCED67-E92A-486E-9800-B47F202C4386", -0.10000000149011612D, 2));
-        MobEffectList.REGISTRY.a(5, new MinecraftKey("strength"), (new MobEffectAttackDamage(false, 9643043, com.github.ruviolence.reaper.OldCombatHelper.POTION_MODIFIER_STRENGTH)).c("effect.damageBoost").b(4, 0).a(GenericAttributes.ATTACK_DAMAGE, "648D7064-6A60-4F59-8ABE-C2C23A6DD7A9", 0.0D, 0).j());
+        MobEffectList.REGISTRY.a(5, new MinecraftKey("strength"), (new MobEffectAttackDamage(false, 9643043, OldCombatHelper.POTION_MODIFIER_STRENGTH)).c("effect.damageBoost").b(4, 0).a(GenericAttributes.ATTACK_DAMAGE, "648D7064-6A60-4F59-8ABE-C2C23A6DD7A9", 0.0D, 0).j());
         MobEffectList.REGISTRY.a(6, new MinecraftKey("instant_health"), (new InstantMobEffect(false, 16262179)).c("effect.heal").j());
         MobEffectList.REGISTRY.a(7, new MinecraftKey("instant_damage"), (new InstantMobEffect(true, 4393481)).c("effect.harm").j());
         MobEffectList.REGISTRY.a(8, new MinecraftKey("jump_boost"), (new MobEffectList(false, 2293580)).c("effect.jump").b(2, 1).j());
@@ -214,7 +214,7 @@ public class MobEffectList {
         MobEffectList.REGISTRY.a(15, new MinecraftKey("blindness"), (new MobEffectList(true, 2039587)).c("effect.blindness").b(5, 1).a(0.25D));
         MobEffectList.REGISTRY.a(16, new MinecraftKey("night_vision"), (new MobEffectList(false, 2039713)).c("effect.nightVision").b(4, 1).j());
         MobEffectList.REGISTRY.a(17, new MinecraftKey("hunger"), (new MobEffectList(true, 5797459)).c("effect.hunger").b(1, 1));
-        MobEffectList.REGISTRY.a(18, new MinecraftKey("weakness"), (new MobEffectAttackDamage(true, 4738376, com.github.ruviolence.reaper.OldCombatHelper.POTION_MODIFIER_WEAKNESS)).c("effect.weakness").b(5, 0).a(GenericAttributes.ATTACK_DAMAGE, "22653B89-116E-49DC-9B6B-9971489B5BE5", 0.0D, 0));
+        MobEffectList.REGISTRY.a(18, new MinecraftKey("weakness"), (new MobEffectAttackDamage(true, 4738376, OldCombatHelper.POTION_MODIFIER_WEAKNESS)).c("effect.weakness").b(5, 0).a(GenericAttributes.ATTACK_DAMAGE, "22653B89-116E-49DC-9B6B-9971489B5BE5", 0.0D, 0));
         MobEffectList.REGISTRY.a(19, new MinecraftKey("poison"), (new MobEffectList(true, 5149489)).c("effect.poison").b(6, 0).a(0.25D));
         MobEffectList.REGISTRY.a(20, new MinecraftKey("wither"), (new MobEffectList(true, 3484199)).c("effect.wither").b(1, 2).a(0.25D));
         MobEffectList.REGISTRY.a(21, new MinecraftKey("health_boost"), (new MobEffectHealthBoost(false, 16284963)).c("effect.healthBoost").b(7, 2).a(GenericAttributes.maxHealth, "5D6F0BA2-1186-46AC-B896-C61C5CEE99CC", 4.0D, 0).j());
diff --git a/src/main/java/net/minecraft/server/MobSpawnerAbstract.java b/src/main/java/net/minecraft/server/MobSpawnerAbstract.java
index f7619e78f649ee113e7a1c5099e074e71950af5d..4ece16b5ab12061dbe718a013f4ea7ff604cbb65 100644
--- a/src/main/java/net/minecraft/server/MobSpawnerAbstract.java
+++ b/src/main/java/net/minecraft/server/MobSpawnerAbstract.java
@@ -55,7 +55,7 @@ public abstract class MobSpawnerAbstract {
         } else {
             BlockPosition blockposition = this.b();
 
-            if (false) { // Reaper - Remove isClientSide check
+            if (false) { // Beast - Remove isClientSide check
                 double d0 = (double) ((float) blockposition.getX() + this.a().random.nextFloat());
                 double d1 = (double) ((float) blockposition.getY() + this.a().random.nextFloat());
                 double d2 = (double) ((float) blockposition.getZ() + this.a().random.nextFloat());
@@ -128,7 +128,7 @@ public abstract class MobSpawnerAbstract {
                     entity.setPositionRotation(entity.locX, entity.locY, entity.locZ, world.random.nextFloat() * 360.0F, 0.0F);
                     if (entityinsentient == null || entityinsentient.P() && entityinsentient.canSpawn()) {
                         if (this.spawnData.b().d() == 1 && this.spawnData.b().hasKeyOfType("id", 8) && entity instanceof EntityInsentient) {
-                            ((EntityInsentient) entity).prepare(world.D(entity.blockPos), (GroupDataEntity) null); // Reaper - Cache current block pos
+                            ((EntityInsentient) entity).prepare(world.D(entity.blockPos), (GroupDataEntity) null); // Beast - Cache current block pos
                         }
                         entity.spawnedViaMobSpawner = true; // Paper
                         // Spigot Start
@@ -248,7 +248,7 @@ public abstract class MobSpawnerAbstract {
     }
 
     public boolean b(int i) {
-        if (false) { // Reaper - Remove isClientSide check
+        if (false) { // Beast - Remove isClientSide check
             this.spawnDelay = this.minSpawnDelay;
             return true;
         } else {
diff --git a/src/main/java/net/minecraft/server/NBTBase.java b/src/main/java/net/minecraft/server/NBTBase.java
index 19d7cee6f0582a30968d8b30067abec6f389905c..c412ee461d563ca3fc32d05b1259f99f47bc5d12 100644
--- a/src/main/java/net/minecraft/server/NBTBase.java
+++ b/src/main/java/net/minecraft/server/NBTBase.java
@@ -7,10 +7,10 @@ import java.io.IOException;
 public abstract class NBTBase {
 
     public static final String[] a = new String[] { "END", "BYTE", "SHORT", "INT", "LONG", "FLOAT", "DOUBLE", "BYTE[]", "STRING", "LIST", "COMPOUND", "INT[]", "LONG[]"};
-    // Reaper start - Use constants
+    // Beast start - Use constants
     public static final byte[] EMPTY_BYTE_ARRAY = new byte[0];
     public static final int[] EMPTY_INT_ARRAY = new int[0];
-    // Reaper end
+    // Beast end
 
     abstract void write(DataOutput dataoutput) throws IOException;
 
diff --git a/src/main/java/net/minecraft/server/NBTCompressedStreamTools.java b/src/main/java/net/minecraft/server/NBTCompressedStreamTools.java
index 92b88432d87eeb94257dcebae4e71b05600a76c1..071e5f8cb900efaab208966c705ad1f01a1c66c9 100644
--- a/src/main/java/net/minecraft/server/NBTCompressedStreamTools.java
+++ b/src/main/java/net/minecraft/server/NBTCompressedStreamTools.java
@@ -2,7 +2,7 @@ package net.minecraft.server;
 
 import com.github.luben.zstd.ZstdInputStream;
 import com.github.luben.zstd.ZstdOutputStream;
-import com.github.ruviolence.reaper.BeastConfig;
+import com.homomc.beast.BeastConfig;
 
 import java.io.BufferedInputStream;
 import java.io.BufferedOutputStream;
diff --git a/src/main/java/net/minecraft/server/NBTTagCompound.java b/src/main/java/net/minecraft/server/NBTTagCompound.java
index 44854e9a67536fce441ad0639f9c77ffc4bf95c1..6d4aed8a12bdbc52589be4d7bf01a6c08ef84f72 100644
--- a/src/main/java/net/minecraft/server/NBTTagCompound.java
+++ b/src/main/java/net/minecraft/server/NBTTagCompound.java
@@ -22,18 +22,18 @@ public class NBTTagCompound extends NBTBase {
 
     private static final Logger b = LogManager.getLogger();
     private static final Pattern c = Pattern.compile("[A-Za-z0-9._+-]+");
-    public final Map<String, NBTBase> map; // Paper // Reaper
+    public final Map<String, NBTBase> map; // Paper // Beast
 
-    // Reaper start
+    // Beast start
     public NBTTagCompound() { map = new java.util.HashMap<>(); }
     public NBTTagCompound(int initialCapacity) { map = new it.unimi.dsi.fastutil.objects.Object2ObjectArrayMap<>(initialCapacity); }
-    // Reaper end
+    // Beast end
 
     void write(DataOutput dataoutput) throws IOException {
-        // Reaper start - Optimize
+        // Beast start - Optimize
         for (Map.Entry<String, NBTBase> entry : this.map.entrySet()) {
             a(entry.getKey(), entry.getValue(), dataoutput);
-            // Reaper end
+            // Beast end
         }
 
         dataoutput.writeByte(0);
@@ -148,11 +148,11 @@ public class NBTTagCompound extends NBTBase {
         return this.map.containsKey(s);
     }
 
-    // Reaper start
+    // Beast start
     public static boolean isKeyOfType(byte type, int needed) {
         return type == needed ? true : (needed != 99 ? false : type == 1 || type == 2 || type == 3 || type == 4 || type == 5 || type == 6);
     }
-    // Reaper end
+    // Beast end
 
     public boolean hasKeyOfType(String s, int i) {
         byte b0 = this.d(s);
@@ -162,11 +162,11 @@ public class NBTTagCompound extends NBTBase {
 
     public byte getByte(String s) {
         try {
-            // Reaper start - Optimize
+            // Beast start - Optimize
             NBTBase nbt = this.map.get(s);
             if (nbt != null && isKeyOfType(nbt.getTypeId(), 99)) {
                 return ((NBTNumber) nbt).g();
-                // Reaper end
+                // Beast end
             }
         } catch (ClassCastException classcastexception) {
             ;
@@ -177,11 +177,11 @@ public class NBTTagCompound extends NBTBase {
 
     public short getShort(String s) {
         try {
-            // Reaper start - Optimize
+            // Beast start - Optimize
             NBTBase nbt = this.map.get(s);
             if (nbt != null && isKeyOfType(nbt.getTypeId(), 99)) {
                 return ((NBTNumber) nbt).f();
-                // Reaper end
+                // Beast end
             }
         } catch (ClassCastException classcastexception) {
             ;
@@ -192,11 +192,11 @@ public class NBTTagCompound extends NBTBase {
 
     public int getInt(String s) {
         try {
-            // Reaper start - Optimize
+            // Beast start - Optimize
             NBTBase nbt = this.map.get(s);
             if (nbt != null && isKeyOfType(nbt.getTypeId(), 99)) {
                 return ((NBTNumber) nbt).e();
-                // Reaper end
+                // Beast end
             }
         } catch (ClassCastException classcastexception) {
             ;
@@ -207,11 +207,11 @@ public class NBTTagCompound extends NBTBase {
 
     public long getLong(String s) {
         try {
-            // Reaper start - Optimize
+            // Beast start - Optimize
             NBTBase nbt = this.map.get(s);
             if (nbt != null && isKeyOfType(nbt.getTypeId(), 99)) {
                 return ((NBTNumber) nbt).d();
-                // Reaper end
+                // Beast end
             }
         } catch (ClassCastException classcastexception) {
             ;
@@ -222,11 +222,11 @@ public class NBTTagCompound extends NBTBase {
 
     public float getFloat(String s) {
         try {
-            // Reaper start - Optimize
+            // Beast start - Optimize
             NBTBase nbt = this.map.get(s);
             if (nbt != null && isKeyOfType(nbt.getTypeId(), 99)) {
                 return ((NBTNumber) nbt).i();
-                // Reaper end
+                // Beast end
             }
         } catch (ClassCastException classcastexception) {
             ;
@@ -237,11 +237,11 @@ public class NBTTagCompound extends NBTBase {
 
     public double getDouble(String s) {
         try {
-            // Reaper start - Optimize
+            // Beast start - Optimize
             NBTBase nbt = this.map.get(s);
             if (nbt != null && isKeyOfType(nbt.getTypeId(), 99)) {
                 return ((NBTNumber) nbt).asDouble();
-                // Reaper end
+                // Beast end
             }
         } catch (ClassCastException classcastexception) {
             ;
@@ -252,11 +252,11 @@ public class NBTTagCompound extends NBTBase {
 
     public String getString(String s) {
         try {
-            // Reaper start - Optimize
+            // Beast start - Optimize
             NBTBase nbt = this.map.get(s);
             if (nbt != null && nbt.getTypeId() == 8) {
                 return ((NBTBase) nbt).c_();
-                // Reaper end
+                // Beast end
             }
         } catch (ClassCastException classcastexception) {
             ;
@@ -265,7 +265,7 @@ public class NBTTagCompound extends NBTBase {
         return "";
     }
 
-    // Reaper start
+    // Beast start
     public String getStringNullable(String s) {
         try {
             NBTBase nbt = this.map.get(s);
@@ -277,24 +277,24 @@ public class NBTTagCompound extends NBTBase {
 
         return null;
     }
-    // Reaper end
+    // Beast end
 
     public byte[] getByteArray(String s) {
         try {
-            // Reaper start - Optimize
+            // Beast start - Optimize
             NBTBase nbt = this.map.get(s);
             if (nbt != null && nbt.getTypeId() == 7) {
                 return ((NBTTagByteArray) nbt).c();
-                // Reaper end
+                // Beast end
             }
         } catch (ClassCastException classcastexception) {
             throw new ReportedException(this.a(s, 7, classcastexception));
         }
 
-        return NBTBase.EMPTY_BYTE_ARRAY; // Reaper - Use constants
+        return NBTBase.EMPTY_BYTE_ARRAY; // Beast - Use constants
     }
 
-    // Reaper start
+    // Beast start
     public byte[] getByteArrayNullable(String s) {
         try {
             NBTBase nbt = this.map.get(s);
@@ -307,30 +307,30 @@ public class NBTTagCompound extends NBTBase {
 
         return null;
     }
-    // Reaper end
+    // Beast end
 
     public int[] getIntArray(String s) {
         try {
-            // Reaper start - Optimize
+            // Beast start - Optimize
             NBTBase nbt = this.map.get(s);
             if (nbt != null && nbt.getTypeId() == 11) {
                 return ((NBTTagIntArray) nbt).d();
-                // Reaper end
+                // Beast end
             }
         } catch (ClassCastException classcastexception) {
             throw new ReportedException(this.a(s, 11, classcastexception));
         }
 
-        return NBTBase.EMPTY_INT_ARRAY; // Reaper - Use constants
+        return NBTBase.EMPTY_INT_ARRAY; // Beast - Use constants
     }
 
     public NBTTagCompound getCompound(String s) {
         try {
-            // Reaper start - Optimize
+            // Beast start - Optimize
             NBTBase nbt = this.map.get(s);
             if (nbt != null && nbt.getTypeId() == 10) {
                 return (NBTTagCompound) nbt;
-                // Reaper end
+                // Beast end
             }
         } catch (ClassCastException classcastexception) {
             throw new ReportedException(this.a(s, 10, classcastexception));
@@ -339,7 +339,7 @@ public class NBTTagCompound extends NBTBase {
         return new NBTTagCompound();
     }
 
-    // Reaper start
+    // Beast start
     public NBTTagCompound getCompoundNullable(String s) {
         try {
             NBTBase nbt = this.map.get(s);
@@ -352,18 +352,18 @@ public class NBTTagCompound extends NBTBase {
 
         return null;
     }
-    // Reaper end
+    // Beast end
 
     public NBTTagList getList(String s, int i) {
         try {
-            // Reaper start - Optimize
+            // Beast start - Optimize
             NBTBase nbt = this.map.get(s);
             if (nbt != null && nbt.getTypeId() == 9) {
                 NBTTagList nbttaglist = (NBTTagList) nbt;
-                // Reaper end
+                // Beast end
 
                 if (!nbttaglist.isEmpty() && nbttaglist.g() != i) {
-                    return new NBTTagList(0); // Reaper - Optimize
+                    return new NBTTagList(0); // Beast - Optimize
                 }
 
                 return nbttaglist;
@@ -372,10 +372,10 @@ public class NBTTagCompound extends NBTBase {
             throw new ReportedException(this.a(s, 9, classcastexception));
         }
 
-        return new NBTTagList(0); // Reaper - Optimize
+        return new NBTTagList(0); // Beast - Optimize
     }
 
-    // Reaper start
+    // Beast start
     public NBTTagList getListNullable(String s, int i) {
         try {
             NBTBase nbt = this.map.get(s);
@@ -394,7 +394,7 @@ public class NBTTagCompound extends NBTBase {
 
         return null;
     }
-    // Reaper end
+    // Beast end
 
     public boolean getBoolean(String s) {
         return this.getByte(s) != 0;
@@ -406,7 +406,7 @@ public class NBTTagCompound extends NBTBase {
 
     public String toString() {
         StringBuilder stringbuilder = new StringBuilder("{");
-        /* // Reaper start - Optimize
+        /* // Beast start - Optimize
         Object object = this.map.keySet();
 
         if (NBTTagCompound.b.isDebugEnabled()) {
@@ -424,7 +424,7 @@ public class NBTTagCompound extends NBTBase {
                 stringbuilder.append(',');
             }
             stringbuilder.append(s(entry.getKey())).append(':').append(entry.getValue());
-            // Reaper end
+            // Beast end
         }
 
         return stringbuilder.append('}').toString();
@@ -462,11 +462,11 @@ public class NBTTagCompound extends NBTBase {
 
     public NBTTagCompound g() {
         NBTTagCompound nbttagcompound = new NBTTagCompound();
-        // Reaper start - Optimize
+        // Beast start - Optimize
 
         for (Map.Entry<String, NBTBase> entry : this.map.entrySet()) {
             nbttagcompound.set(entry.getKey(), entry.getValue().clone());
-            // Reaper end
+            // Beast end
         }
 
         return nbttagcompound;
@@ -513,11 +513,11 @@ public class NBTTagCompound extends NBTBase {
     }
 
     public void a(NBTTagCompound nbttagcompound) {
-        // Reaper start - Optimize
+        // Beast start - Optimize
         for (Map.Entry<String, NBTBase> entry : nbttagcompound.map.entrySet()) {
             String s = entry.getKey();
             NBTBase nbtbase = entry.getValue();
-            // Reaper end
+            // Beast end
 
             if (nbtbase.getTypeId() == 10) {
                 if (this.hasKeyOfType(s, 10)) {
diff --git a/src/main/java/net/minecraft/server/NBTTagList.java b/src/main/java/net/minecraft/server/NBTTagList.java
index 7a94a22b87db376a30157ab3bd13bd138d1146e2..a428fe6a520f09f052bf85980971c59053df50e6 100644
--- a/src/main/java/net/minecraft/server/NBTTagList.java
+++ b/src/main/java/net/minecraft/server/NBTTagList.java
@@ -13,19 +13,19 @@ import org.apache.logging.log4j.Logger;
 public class NBTTagList extends NBTBase {
 
     private static final Logger b = LogManager.getLogger();
-    public List<NBTBase> list; // Paper // Reaper
+    public List<NBTBase> list; // Paper // Beast
     // Paper start
     public void sort(java.util.Comparator<? extends NBTBase> comparator) {
         //noinspection unchecked
-        list.sort((java.util.Comparator<NBTBase>) comparator); // Reaper - Optimize
+        list.sort((java.util.Comparator<NBTBase>) comparator); // Beast - Optimize
     }
     // Paper end
     private byte type = 0;
 
-    // Reaper start
+    // Beast start
     public NBTTagList() { list = new java.util.ArrayList<>(); }
     public NBTTagList(int initialCapacity) { list = new java.util.ArrayList<>(initialCapacity); }
-    // Reaper end
+    // Beast end
 
     void write(DataOutput dataoutput) throws IOException {
         if (this.list.isEmpty()) {
@@ -135,7 +135,7 @@ public class NBTTagList extends NBTBase {
             }
         }
 
-        return new NBTTagCompound(0); // Reaper - Optimize
+        return new NBTTagCompound(0); // Beast - Optimize
     }
 
     public int c(int i) {
@@ -159,7 +159,7 @@ public class NBTTagList extends NBTBase {
             }
         }
 
-        return NBTBase.EMPTY_INT_ARRAY; // Reaper - Use constants
+        return NBTBase.EMPTY_INT_ARRAY; // Beast - Use constants
     }
 
     public final double getDoubleAt(int i) { return this.f(i); } // Paper - OBFHELPER
diff --git a/src/main/java/net/minecraft/server/NameReferencingFileConverter.java b/src/main/java/net/minecraft/server/NameReferencingFileConverter.java
index 3ab23439ed21f5c233dffa8e72419ffab7764c3f..da221aa7f7a4d785425e9315e6550516d109e1b7 100644
--- a/src/main/java/net/minecraft/server/NameReferencingFileConverter.java
+++ b/src/main/java/net/minecraft/server/NameReferencingFileConverter.java
@@ -74,7 +74,7 @@ public class NameReferencingFileConverter {
             int i = astring.length;
 
             for (int j = 0; j < i; ++j) {
-                String s = astring[j]; // Reaper - Inline
+                String s = astring[j]; // Beast - Inline
                 UUID uuid = EntityHuman.a(new GameProfile((UUID) null, s));
                 GameProfile gameprofile = new GameProfile(uuid, s);
 
@@ -280,8 +280,8 @@ public class NameReferencingFileConverter {
             GameProfile gameprofile = minecraftserver.getUserCache().getProfile(s);
 
             if (gameprofile != null && gameprofile.getId() != null) {
-                return com.eatthepath.uuid.FastUUID.toString(gameprofile.getId()); // Reaper - Use FastUUID
-            } else if (/*!minecraftserver.R()*/true && minecraftserver.getOnlineMode()) { // Reaper - Remove singleplayer code
+                return com.eatthepath.uuid.FastUUID.toString(gameprofile.getId()); // Beast - Use FastUUID
+            } else if (/*!minecraftserver.R()*/true && minecraftserver.getOnlineMode()) { // Beast - Remove singleplayer code
                 final ArrayList arraylist = Lists.newArrayList();
                 ProfileLookupCallback profilelookupcallback = new ProfileLookupCallback() {
                     public void onProfileLookupSucceeded(GameProfile gameprofile) {
@@ -295,9 +295,9 @@ public class NameReferencingFileConverter {
                 };
 
                 a(minecraftserver, Lists.newArrayList(new String[] { s}), profilelookupcallback);
-                return !arraylist.isEmpty() && ((GameProfile) arraylist.get(0)).getId() != null ? com.eatthepath.uuid.FastUUID.toString(((GameProfile) arraylist.get(0)).getId()) : ""; // Reaper - Use FastUUID
+                return !arraylist.isEmpty() && ((GameProfile) arraylist.get(0)).getId() != null ? com.eatthepath.uuid.FastUUID.toString(((GameProfile) arraylist.get(0)).getId()) : ""; // Beast - Use FastUUID
             } else {
-                return com.eatthepath.uuid.FastUUID.toString(EntityHuman.a(new GameProfile((UUID) null, s))); // Reaper - Use FastUUID
+                return com.eatthepath.uuid.FastUUID.toString(EntityHuman.a(new GameProfile((UUID) null, s))); // Beast - Use FastUUID
             }
         } else {
             return s;
@@ -306,7 +306,7 @@ public class NameReferencingFileConverter {
 
     public static boolean a(final DedicatedServer dedicatedserver, PropertyManager propertymanager) {
         final File file = d(propertymanager);
-        // final File file1 = new File(file.getParentFile(), "playerdata"); // Reaper - Unused
+        // final File file1 = new File(file.getParentFile(), "playerdata"); // Beast - Unused
         final File file2 = new File(file.getParentFile(), "unknownplayers");
 
         if (file.exists() && file.isDirectory()) {
@@ -316,7 +316,7 @@ public class NameReferencingFileConverter {
             int i = afile.length;
 
             for (int j = 0; j < i; ++j) {
-                File file3 = afile[j]; // Reaper - Inline
+                File file3 = afile[j]; // Beast - Inline
                 String s = file3.getName();
 
                 if (s.toLowerCase(Locale.ROOT).endsWith(".dat")) {
@@ -338,7 +338,7 @@ public class NameReferencingFileConverter {
                         if (uuid == null) {
                             throw new NameReferencingFileConverter.FileConversionException("Missing UUID for user profile " + gameprofile.getName(), null);
                         } else {
-                            this.a(file, this.a(gameprofile), com.eatthepath.uuid.FastUUID.toString(uuid)); // Reaper - Use FastUUID
+                            this.a(file, this.a(gameprofile), com.eatthepath.uuid.FastUUID.toString(uuid)); // Beast - Use FastUUID
                         }
                     }
 
diff --git a/src/main/java/net/minecraft/server/Navigation.java b/src/main/java/net/minecraft/server/Navigation.java
index 426ab596055884cacd6579ce225075d47a895459..2f660ccb73519cde8f27e074e0141831b5559437 100644
--- a/src/main/java/net/minecraft/server/Navigation.java
+++ b/src/main/java/net/minecraft/server/Navigation.java
@@ -55,7 +55,7 @@ public class Navigation extends NavigationAbstract {
     }
 
     public PathEntity a(Entity entity) {
-        return this.b(entity.blockPos); // Reaper - Cache current block pos
+        return this.b(entity.blockPos); // Beast - Cache current block pos
     }
 
     private int s() {
diff --git a/src/main/java/net/minecraft/server/NavigationAbstract.java b/src/main/java/net/minecraft/server/NavigationAbstract.java
index 5f9460842a9f43ad536aeb2307112b71ef67d214..bb6c50de5d54548070a2a97a1e7251bb3d268179 100644
--- a/src/main/java/net/minecraft/server/NavigationAbstract.java
+++ b/src/main/java/net/minecraft/server/NavigationAbstract.java
@@ -79,13 +79,13 @@ public abstract class NavigationAbstract {
             this.q = blockposition;
             float f = this.i();
 
-            // this.b.methodProfiler.a("pathfind"); // Reaper - Remove MethodProfiler
-            BlockPosition blockposition1 = this.a.blockPos; // Reaper - Cache current block pos
+            // this.b.methodProfiler.a("pathfind"); // Beast - Remove MethodProfiler
+            BlockPosition blockposition1 = this.a.blockPos; // Beast - Cache current block pos
             int i = (int) (f + 8.0F);
             ChunkCache chunkcache = new ChunkCache(this.b, blockposition1.a(-i, -i, -i), blockposition1.a(i, i, i), 0);
             PathEntity pathentity = this.r.a(chunkcache, this.a, this.q, f);
 
-            // this.b.methodProfiler.b(); // Reaper - Remove MethodProfiler
+            // this.b.methodProfiler.b(); // Beast - Remove MethodProfiler
             return pathentity;
         }
     }
@@ -95,7 +95,7 @@ public abstract class NavigationAbstract {
         if (!this.b()) {
             return null;
         } else {
-            BlockPosition blockposition = entity.blockPos; // Reaper - Cache current block pos
+            BlockPosition blockposition = entity.blockPos; // Beast - Cache current block pos
             if (!getEntity().getWorld().getWorldBorder().isInBounds(blockposition)) return null; // Paper - don't path out of world border
 
             if (this.c != null && !this.c.b() && blockposition.equals(this.q)) {
@@ -105,13 +105,13 @@ public abstract class NavigationAbstract {
                 this.q = blockposition;
                 float f = this.i();
 
-                // this.b.methodProfiler.a("pathfind"); // Reaper - Remove MethodProfiler
-                BlockPosition blockposition1 = (this.a.blockPos).up(); // Reaper - Cache current block pos
+                // this.b.methodProfiler.a("pathfind"); // Beast - Remove MethodProfiler
+                BlockPosition blockposition1 = (this.a.blockPos).up(); // Beast - Cache current block pos
                 int i = (int) (f + 16.0F);
                 ChunkCache chunkcache = new ChunkCache(this.b, blockposition1.a(-i, -i, -i), blockposition1.a(i, i, i), 0);
                 PathEntity pathentity = this.r.a(chunkcache, this.a, entity, f);
 
-                // this.b.methodProfiler.b(); // Reaper - Remove MethodProfiler
+                // this.b.methodProfiler.b(); // Beast - Remove MethodProfiler
                 return pathentity;
             }
         }
@@ -228,7 +228,7 @@ public abstract class NavigationAbstract {
         int i1 = k;
 
         for (int j1 = i - 1; j1 >= this.c.e(); --j1) {
-            if (this.a(vec3d, this.c.a(this.a, j1), k, l, k)) { // Reaper - Inline
+            if (this.a(vec3d, this.c.a(this.a, j1), k, l, k)) { // Beast - Inline
                 this.c.c(j1);
                 break;
             }
diff --git a/src/main/java/net/minecraft/server/NavigationFlying.java b/src/main/java/net/minecraft/server/NavigationFlying.java
index 3cad773f49e3e7e39342cb5dd3e763e5292f19cf..c7528c00d2de8035d1e9c94cef8cd3b43fcd86cc 100644
--- a/src/main/java/net/minecraft/server/NavigationFlying.java
+++ b/src/main/java/net/minecraft/server/NavigationFlying.java
@@ -21,7 +21,7 @@ public class NavigationFlying extends NavigationAbstract {
     }
 
     public PathEntity a(Entity entity) {
-        return this.b(entity.blockPos); // Reaper - Cache current block pos
+        return this.b(entity.blockPos); // Beast - Cache current block pos
     }
 
     public void d() {
diff --git a/src/main/java/net/minecraft/server/NavigationSpider.java b/src/main/java/net/minecraft/server/NavigationSpider.java
index 77af80b6766bd1f3712836624fefab423b2a0e23..4b13bfb23e5123d4fabefa8a2ce1dfa3043b9bfe 100644
--- a/src/main/java/net/minecraft/server/NavigationSpider.java
+++ b/src/main/java/net/minecraft/server/NavigationSpider.java
@@ -14,7 +14,7 @@ public class NavigationSpider extends Navigation {
     }
 
     public PathEntity a(Entity entity) {
-        this.i = entity.blockPos; // Reaper - Cache current block pos
+        this.i = entity.blockPos; // Beast - Cache current block pos
         return super.a(entity);
     }
 
@@ -24,7 +24,7 @@ public class NavigationSpider extends Navigation {
         if (pathentity != null) {
             return this.a(pathentity, d0);
         } else {
-            this.i = entity.blockPos; // Reaper - Cache current block pos
+            this.i = entity.blockPos; // Beast - Cache current block pos
             this.d = d0;
             return true;
         }
diff --git a/src/main/java/net/minecraft/server/NetworkManager.java b/src/main/java/net/minecraft/server/NetworkManager.java
index e9ad4c43b4989abf2486e5f718939baf61daa719..fcd0a378978d583dc2b4e889607fd0fa67008c81 100644
--- a/src/main/java/net/minecraft/server/NetworkManager.java
+++ b/src/main/java/net/minecraft/server/NetworkManager.java
@@ -1,6 +1,6 @@
 package net.minecraft.server;
 
-import com.github.ruviolence.reaper.BeastConfig;
+import com.homomc.beast.BeastConfig;
 import com.google.common.collect.Queues;
 import com.google.common.util.concurrent.ThreadFactoryBuilder;
 import io.netty.channel.Channel;
@@ -81,12 +81,12 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet<?>> {
     public java.net.InetSocketAddress virtualHost;
     private static boolean enableExplicitFlush = Boolean.getBoolean("paper.explicit-flush");
     // Paper end
-    // Reaper start - Optimize network
+    // Beast start - Optimize network
     boolean isPending = true;
     EnumProtocol protocol;
-    // Reaper end
+    // Beast end
 
-    // Reaper start - allow controlled flushing
+    // Beast start - allow controlled flushing
     volatile boolean canFlush = true;
     private final java.util.concurrent.atomic.AtomicInteger packetWrites = new java.util.concurrent.atomic.AtomicInteger();
     private int flushPacketsStart;
@@ -117,7 +117,7 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet<?>> {
             });
         }
     }
-    // Reaper end - allow controlled flushing
+    // Beast end - allow controlled flushing
     // Paper start - packet limiter
     protected final Object PACKET_LIMIT_LOCK = new Object();
     protected final @Nullable io.papermc.paper.util.IntervalledCounter allPacketCounts = BeastConfig.packetLimiterAllPackets.isEnabled() ? new io.papermc.paper.util.IntervalledCounter(
@@ -159,7 +159,7 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet<?>> {
     }
 
     public void setProtocol(EnumProtocol enumprotocol) {
-        protocol = enumprotocol; // Reaper
+        protocol = enumprotocol; // Beast
         this.channel.attr(NetworkManager.c).set(enumprotocol);
         this.channel.config().setAutoRead(true);
         NetworkManager.g.debug("Enabled auto read");
@@ -247,7 +247,7 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet<?>> {
         NetworkManager.g.debug("Set listener of {} to {}", this, packetlistener);
         this.m = packetlistener;
     }
-    // Reaper start
+    // Beast start
     EntityPlayer getPlayer() {
         if (m instanceof PlayerConnection) {
             return ((PlayerConnection) m).player;
@@ -284,14 +284,14 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet<?>> {
                     packet instanceof PacketPlayOutBoss;
         }
     }
-    // Reaper end
+    // Beast end
 
     public void sendPacket(Packet<?> packet) {
-        this.sendPacket(packet, (GenericFutureListener) null); // Reaper
+        this.sendPacket(packet, (GenericFutureListener) null); // Beast
     }
 
     public void sendPacket(Packet<?> packet, @Nullable GenericFutureListener<? extends Future<? super Void>> genericfuturelistener) {
-        // Reaper start - handle oversized packets better
+        // Beast start - handle oversized packets better
         boolean connected = this.isConnected();
         if (!connected && !preparing) {
             return; // Do nothing
@@ -301,7 +301,7 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet<?>> {
                 MinecraftServer.getServer().isMainThread() && packet.isReady() && this.i.isEmpty() &&
                         (packet.getExtraPackets() == null || packet.getExtraPackets().isEmpty())
         ))) {
-            this.writePacket(packet, genericfuturelistener, null); // Reaper
+            this.writePacket(packet, genericfuturelistener, null); // Beast
             return;
         }
         // write the packets to the queue, then flush - antixray hooks there already
@@ -322,12 +322,12 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet<?>> {
             this.i.addAll(packets); // atomic
         }
         this.sendPacketQueue();
-        // Reaper end
+        // Beast end
     }
 
-    private void dispatchPacket(final Packet<?> packet, @Nullable final GenericFutureListener<? extends Future<? super Void>> genericFutureListener) { this.a(packet, genericFutureListener); } // Reaper - OBFHELPER
+    private void dispatchPacket(final Packet<?> packet, @Nullable final GenericFutureListener<? extends Future<? super Void>> genericFutureListener) { this.a(packet, genericFutureListener); } // Beast - OBFHELPER
     private void a(final Packet<?> packet, @Nullable final GenericFutureListener<? extends Future<? super Void>> genericfuturelistener) {
-        // Reaper start - add flush parameter
+        // Beast start - add flush parameter
         this.writePacket(packet, genericfuturelistener, Boolean.TRUE);
     }
     private void writePacket(Packet<?> packet, @Nullable GenericFutureListener<? extends Future<? super Void>> agenericfuturelistener, Boolean flushConditional) {
@@ -342,70 +342,70 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet<?>> {
             this.channel.config().setAutoRead(false);
         }
 
-        EntityPlayer player = getPlayer(); // Reaper
+        EntityPlayer player = getPlayer(); // Beast
         if (this.channel.eventLoop().inEventLoop()) {
             if (enumprotocol != enumprotocol1) {
                 this.setProtocol(enumprotocol);
             }
-            // Reaper start
+            // Beast start
             if (!isConnected()) {
                 packet.onPacketDispatchFinish(player, null);
                 return;
             }
             try {
-            ChannelFuture channelfuture = (flush) ? this.channel.writeAndFlush(packet) : this.channel.write(packet); // Reaper - add flush parameter
-            // Reaper end
+            ChannelFuture channelfuture = (flush) ? this.channel.writeAndFlush(packet) : this.channel.write(packet); // Beast - add flush parameter
+            // Beast end
 
             if (agenericfuturelistener != null) {
-                channelfuture.addListener(agenericfuturelistener); // Reaper
+                channelfuture.addListener(agenericfuturelistener); // Beast
             }
-            // Reaper start
+            // Beast start
             if (packet.hasFinishListener()) {
                 channelfuture.addListener((ChannelFutureListener) channelFuture -> packet.onPacketDispatchFinish(player, channelFuture));
             }
-            // Reaper end
+            // Beast end
 
             channelfuture.addListener(ChannelFutureListener.FIRE_EXCEPTION_ON_FAILURE);
-            // Reaper start
+            // Beast start
             } catch (Exception e) {
             g.error("NetworkException: " + player, e);
             close(new ChatMessage("disconnect.genericReason", "Internal Exception: " + e.getMessage()));;
             packet.onPacketDispatchFinish(player, null);
             }
-        // Reaper end
+        // Beast end
         } else {
-            // Reaper start
+            // Beast start
             this.channel.eventLoop().execute((Runnable) () -> {
                 if (enumprotocol != enumprotocol1) {
                     NetworkManager.this.setProtocol(enumprotocol);
                 }
-                // Reaper end
+                // Beast end
 
-                // Reaper start
+                // Beast start
                 if (!isConnected()) {
                     packet.onPacketDispatchFinish(player, null);
                     return;
                 }
                 try {
-                    // Reaper end
-                    ChannelFuture channelfuture = (flush) ? NetworkManager.this.channel.writeAndFlush(packet) : this.channel.write(packet); // Reaper - add flush parameter
+                    // Beast end
+                    ChannelFuture channelfuture = (flush) ? NetworkManager.this.channel.writeAndFlush(packet) : this.channel.write(packet); // Beast - add flush parameter
 
                     if (agenericfuturelistener != null) {
-                        channelfuture.addListener(agenericfuturelistener); // Reaper
+                        channelfuture.addListener(agenericfuturelistener); // Beast
                     }
-                    // Reaper start
+                    // Beast start
                     if (packet.hasFinishListener()) {
                         channelfuture.addListener((ChannelFutureListener) channelFuture -> packet.onPacketDispatchFinish(player, channelFuture));
                     }
-                    // Reaper end
+                    // Beast end
 
                     channelfuture.addListener(ChannelFutureListener.FIRE_EXCEPTION_ON_FAILURE);
-                    // Reaper start
+                    // Beast start
                 } catch (Exception e) {
                     g.error("NetworkException: " + player, e);
                     close(new ChatMessage("disconnect.genericReason", "Internal Exception: " + e.getMessage()));;
                     packet.onPacketDispatchFinish(player, null);
-                    // Reaper end
+                    // Beast end
                 }
             });
         }
@@ -421,7 +421,7 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet<?>> {
 
     }
 
-    // Reaper start - rewrite this to be safer if ran off main thread
+    // Beast start - rewrite this to be safer if ran off main thread
     private boolean sendPacketQueue() { return this.m(); } // OBFHELPER // void -> boolean
     private boolean m() { // void -> boolean
         if (!isConnected()) {
@@ -439,7 +439,7 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet<?>> {
     }
     private boolean processQueue() {
         if (this.i.isEmpty()) return true;
-        final boolean needsFlush = this.canFlush; // Reaper - make only one flush call per sendPacketQueue() call
+        final boolean needsFlush = this.canFlush; // Beast - make only one flush call per sendPacketQueue() call
         boolean hasWrotePacket = false;
         // If we are on main, we are safe here in that nothing else should be processing queue off main anymore
         // But if we are not on main due to login/status, the parent is synchronized on packetQueue
@@ -448,27 +448,27 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet<?>> {
             NetworkManager.QueuedPacket queued = iterator.next(); // poll -> peek
 
             // Fix NPE (Spigot bug caused by handleDisconnection())
-            if (false && queued == null) { // Reaper - diff on change, this logic is redundant: iterator guarantees ret of an element - on change, hook the flush logic here
+            if (false && queued == null) { // Beast - diff on change, this logic is redundant: iterator guarantees ret of an element - on change, hook the flush logic here
                 return true;
             }
 
             Packet<?> packet = queued.getPacket();
             if (!packet.isReady()) {
-                // Reaper start - make only one flush call per sendPacketQueue() call
+                // Beast start - make only one flush call per sendPacketQueue() call
                 if (hasWrotePacket && (needsFlush || this.canFlush)) {
                     this.flush();
                 }
-                // Reaper end - make only one flush call per sendPacketQueue() call
+                // Beast end - make only one flush call per sendPacketQueue() call
                 return false;
             } else {
                 iterator.remove();
-                this.writePacket(packet, queued.getGenericFutureListener(), (!iterator.hasNext() && (needsFlush || this.canFlush)) ? Boolean.TRUE : Boolean.FALSE); // Reaper - make only one flush call per sendPacketQueue() call
-                hasWrotePacket = true; // Reaper - make only one flush call per sendPacketQueue() call
+                this.writePacket(packet, queued.getGenericFutureListener(), (!iterator.hasNext() && (needsFlush || this.canFlush)) ? Boolean.TRUE : Boolean.FALSE); // Beast - make only one flush call per sendPacketQueue() call
+                hasWrotePacket = true; // Beast - make only one flush call per sendPacketQueue() call
             }
         }
         return true;
     }
-    // Reaper end
+    // Beast end
 
     public void a() {
         this.m();
@@ -486,7 +486,7 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet<?>> {
         return this.l;
     }
 
-    // Reaper start
+    // Beast start
     public void clearPacketQueue() {
         EntityPlayer player = getPlayer();
         i.forEach(queuedPacket -> {
@@ -497,11 +497,11 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet<?>> {
         });
         i.clear();
     }
-    // Reaper end
+    // Beast end
     public void close(IChatBaseComponent ichatbasecomponent) {
         // Spigot Start
         this.preparing = false;
-        clearPacketQueue(); // Reaper
+        clearPacketQueue(); // Beast
         // Spigot End
         if (this.channel.isOpen()) {
             this.channel.close(); // We can't wait as this may be called from an event loop.
@@ -516,14 +516,14 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet<?>> {
 
     public void a(SecretKey secretkey) {
         this.o = true;
-        // Reaper start
+        // Beast start
         try {
             this.channel.pipeline().addBefore("splitter", "decrypt", new PacketDecrypter(/*MinecraftEncryption.a(2, secretkey)*/ secretkey));
             this.channel.pipeline().addBefore("prepender", "encrypt", new PacketEncrypter(/*MinecraftEncryption.a(1, secretkey)*/ secretkey));
         } catch (java.security.GeneralSecurityException e) {
             throw new RuntimeException("Couldn't enable encryption", e);
         }
-        // Reaper end
+        // Beast end
     }
 
     public boolean isConnected() {
@@ -574,7 +574,7 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet<?>> {
     public void handleDisconnection() {
         if (this.channel != null && !this.channel.isOpen()) {
             if (this.p) {
-                // NetworkManager.LOGGER.warn("handleDisconnection() called twice"); // Reaper - Do not log useless message
+                // NetworkManager.LOGGER.warn("handleDisconnection() called twice"); // Beast - Do not log useless message
             } else {
                 this.p = true;
                 if (this.j() != null) {
@@ -582,7 +582,7 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet<?>> {
                 } else if (this.i() != null) {
                     this.i().a(new ChatMessage("multiplayer.disconnect.generic", new Object[0]));
                 }
-                clearPacketQueue(); // Reaper
+                clearPacketQueue(); // Beast
             }
 
         }
@@ -594,8 +594,8 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet<?>> {
 
     static class QueuedPacket {
 
-        private final Packet<?> a; final Packet<?> getPacket() { return this.a; } // Reaper - OBFHELPER
-        private final GenericFutureListener<? extends Future<? super Void>> b; final GenericFutureListener<? extends Future<? super Void>> getGenericFutureListener() { return this.b; } // Reaper - OBFHELPER
+        private final Packet<?> a; final Packet<?> getPacket() { return this.a; } // Beast - OBFHELPER
+        private final GenericFutureListener<? extends Future<? super Void>> b; final GenericFutureListener<? extends Future<? super Void>> getGenericFutureListener() { return this.b; } // Beast - OBFHELPER
 
         public QueuedPacket(Packet<?> packet, GenericFutureListener<? extends Future<? super Void>> agenericfuturelistener) {
             this.a = packet;
diff --git a/src/main/java/net/minecraft/server/PacketCompressor.java b/src/main/java/net/minecraft/server/PacketCompressor.java
index 4bc0cb9624ac5912dfecfe01e297a0ceabe18854..ab9cc7778b5919a4bdfdd8393f42718a237dbc8a 100644
--- a/src/main/java/net/minecraft/server/PacketCompressor.java
+++ b/src/main/java/net/minecraft/server/PacketCompressor.java
@@ -7,20 +7,20 @@ import java.util.zip.Deflater;
 
 public class PacketCompressor extends MessageToByteEncoder<ByteBuf> {
 
-    /* // Reaper start
+    /* // Beast start
     private final byte[] a = new byte[8192];
     private final Deflater b;
     */
     private final com.velocitypowered.natives.compression.VelocityCompressor compressor;
-    // Reaper end
+    // Beast end
     private int c;
 
     public PacketCompressor(int i) {
         this.c = i;
-        // Reaper start
+        // Beast start
         // this.b = new Deflater();
         this.compressor = com.velocitypowered.natives.util.Natives.compress.get().create(-1);
-        // Reaper end
+        // Beast end
     }
 
     protected void a(ChannelHandlerContext channelhandlercontext, ByteBuf bytebuf, ByteBuf bytebuf1) throws Exception {
@@ -31,7 +31,7 @@ public class PacketCompressor extends MessageToByteEncoder<ByteBuf> {
             packetdataserializer.d(0);
             packetdataserializer.writeBytes(bytebuf);
         } else {
-            /* // Reaper start
+            /* // Beast start
             byte[] abyte = new byte[i];
 
             bytebuf.readBytes(abyte);
@@ -55,12 +55,12 @@ public class PacketCompressor extends MessageToByteEncoder<ByteBuf> {
             } finally {
                 source.release();
             }
-            // Reaper end
+            // Beast end
         }
 
     }
 
-    // Reaper start
+    // Beast start
     @Override
     protected ByteBuf allocateBuffer(ChannelHandlerContext ctx, ByteBuf msg, boolean preferDirect) throws Exception {
         return com.velocitypowered.natives.util.MoreByteBufUtils.preferredBuffer(ctx.alloc(), this.compressor, msg.readableBytes() + 1);
@@ -70,7 +70,7 @@ public class PacketCompressor extends MessageToByteEncoder<ByteBuf> {
     public void handlerRemoved(ChannelHandlerContext ctx) throws Exception {
         this.compressor.close();
     }
-    // Reaper end
+    // Beast end
 
     public void a(int i) {
         this.c = i;
diff --git a/src/main/java/net/minecraft/server/PacketDataSerializer.java b/src/main/java/net/minecraft/server/PacketDataSerializer.java
index 0eef9ed2ecc3a277ea186543370b17d572f795f1..13eaac95e0871ffe31b2bd08c1dfe1570b424da2 100644
--- a/src/main/java/net/minecraft/server/PacketDataSerializer.java
+++ b/src/main/java/net/minecraft/server/PacketDataSerializer.java
@@ -72,7 +72,7 @@ public class PacketDataSerializer extends ByteBuf {
         int i = aint.length;
 
         for (int j = 0; j < i; ++j) {
-            int k = aint[j]; // Reaper - Inline
+            int k = aint[j]; // Beast - Inline
 
             this.d(k);
         }
@@ -106,7 +106,7 @@ public class PacketDataSerializer extends ByteBuf {
         int i = along.length;
 
         for (int j = 0; j < i; ++j) {
-            long k = along[j]; // Reaper - Inline
+            long k = along[j]; // Beast - Inline
 
             this.writeLong(k);
         }
@@ -258,7 +258,7 @@ public class PacketDataSerializer extends ByteBuf {
         return this;
     }
 
-    // Reaper start
+    // Beast start
     public PacketDataSerializer writeItemStackWithHidedAttributes(ItemStack itemstack) {
         Item item = itemstack.getItem();
         if (itemstack.isEmpty() || item == null) { // CraftBukkit - NPE fix itemstack.getItem()
@@ -352,7 +352,7 @@ public class PacketDataSerializer extends ByteBuf {
 
         return this;
     }
-    // Reaper end
+    // Beast end
 
     public ItemStack k() {
         short short0 = this.readShort();
diff --git a/src/main/java/net/minecraft/server/PacketDecompressor.java b/src/main/java/net/minecraft/server/PacketDecompressor.java
index 06b5643ca2f18ff9cd43fd6b90f77af88fa9e1bd..493f0b59740f28f2e83f2d477ca7a1b8b996e396 100644
--- a/src/main/java/net/minecraft/server/PacketDecompressor.java
+++ b/src/main/java/net/minecraft/server/PacketDecompressor.java
@@ -10,18 +10,18 @@ import java.util.zip.Inflater;
 
 public class PacketDecompressor extends ByteToMessageDecoder {
 
-    // Reaper start
+    // Beast start
     // private final Inflater a;
     private final com.velocitypowered.natives.compression.VelocityCompressor compressor;
-    // Reaper end
+    // Beast end
     private int b;
 
     public PacketDecompressor(int i) {
         this.b = i;
-        // Reaper start
+        // Beast start
         // this.a = new Inflater();
         this.compressor = com.velocitypowered.natives.util.Natives.compress.get().create(-1);
-        // Reaper end
+        // Beast end
     }
 
     protected void decode(ChannelHandlerContext channelhandlercontext, ByteBuf bytebuf, List<Object> list) throws Exception {
@@ -40,7 +40,7 @@ public class PacketDecompressor extends ByteToMessageDecoder {
                     throw new DecoderException("Badly compressed packet - size of " + i + " is larger than protocol maximum of " + 2097152);
                 }
 
-                /* // Reaper start
+                /* // Beast start
                 byte[] abyte = new byte[packetdataserializer.readableBytes()];
 
                 packetdataserializer.readBytes(abyte);
@@ -63,18 +63,18 @@ public class PacketDecompressor extends ByteToMessageDecoder {
                 } finally {
                     compatibleIn.release();
                 }
-                // Reaper end
+                // Beast end
             }
 
         }
     }
 
-    // Reaper start
+    // Beast start
     @Override
     public void handlerRemoved0(ChannelHandlerContext ctx) throws Exception {
         this.compressor.close();
     }
-    // Reaper end
+    // Beast end
 
     public void a(int i) {
         this.b = i;
diff --git a/src/main/java/net/minecraft/server/PacketDecrypter.java b/src/main/java/net/minecraft/server/PacketDecrypter.java
index 0d6577b335cd81af1337988548bbf684a165eaec..e393780bb51c14cc23eebdf902fe4f8d0af83288 100644
--- a/src/main/java/net/minecraft/server/PacketDecrypter.java
+++ b/src/main/java/net/minecraft/server/PacketDecrypter.java
@@ -8,18 +8,18 @@ import javax.crypto.Cipher;
 
 public class PacketDecrypter extends MessageToMessageDecoder<ByteBuf> {
 
-    // Reaper start
+    // Beast start
     // private final PacketEncryptionHandler a;
     private final com.velocitypowered.natives.encryption.VelocityCipher cipher;
 
     public PacketDecrypter(/*Cipher cipher*/ javax.crypto.SecretKey key) throws java.security.GeneralSecurityException {
         // this.a = new PacketEncryptionHandler(cipher);
         this.cipher = com.velocitypowered.natives.util.Natives.cipher.get().forDecryption(key);
-        // Reaper end
+        // Beast end
     }
 
     protected void a(ChannelHandlerContext channelhandlercontext, ByteBuf bytebuf, List<Object> list) throws Exception {
-        // Reaper start
+        // Beast start
         ByteBuf compatible = com.velocitypowered.natives.util.MoreByteBufUtils.ensureCompatible(channelhandlercontext.alloc(), cipher, bytebuf).slice();
         try {
             cipher.process(compatible);
@@ -28,7 +28,7 @@ public class PacketDecrypter extends MessageToMessageDecoder<ByteBuf> {
             compatible.release(); // compatible will never be used if we throw an exception
             throw e;
         }
-        // Reaper end
+        // Beast end
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/server/PacketEncrypter.java b/src/main/java/net/minecraft/server/PacketEncrypter.java
index 8186b0765a6a27a9258cdb68179accde31268dc5..db5e2cfeb4513649fbf06e149fc0b31c584fe3de 100644
--- a/src/main/java/net/minecraft/server/PacketEncrypter.java
+++ b/src/main/java/net/minecraft/server/PacketEncrypter.java
@@ -5,7 +5,7 @@ import io.netty.channel.ChannelHandlerContext;
 import io.netty.handler.codec.MessageToByteEncoder;
 import javax.crypto.Cipher;
 
-// Reaper start
+// Beast start
 // We rewrite this class as the Velocity natives support in-place encryption
 public class PacketEncrypter extends io.netty.handler.codec.MessageToMessageEncoder<ByteBuf> {
 
@@ -40,4 +40,4 @@ public class PacketEncrypter extends io.netty.handler.codec.MessageToMessageEnco
         cipher.close();
     }
 }
-// Reaper end
+// Beast end
diff --git a/src/main/java/net/minecraft/server/PacketPlayInSettings.java b/src/main/java/net/minecraft/server/PacketPlayInSettings.java
index 50201509db5c90ccdc5c13c5f3f0246c1c0b6aaf..e6ce4da7d098c6c16befdd393941852b5e03dd22 100644
--- a/src/main/java/net/minecraft/server/PacketPlayInSettings.java
+++ b/src/main/java/net/minecraft/server/PacketPlayInSettings.java
@@ -5,7 +5,7 @@ import java.io.IOException;
 public class PacketPlayInSettings implements Packet<PacketListenerPlayIn> {
 
     private String a;
-    private int b; public int getViewDistance() { return b; } // Reaper
+    private int b; public int getViewDistance() { return b; } // Beast
     private EntityHuman.EnumChatVisibility c;
     private boolean d;
     private int e;
diff --git a/src/main/java/net/minecraft/server/PacketPlayInTabComplete.java b/src/main/java/net/minecraft/server/PacketPlayInTabComplete.java
index 4d74b40fce46d46229f66d21c7ed2de10b396439..f7ea9b746536be36fdb6d34a1a63aeec19fb47e5 100644
--- a/src/main/java/net/minecraft/server/PacketPlayInTabComplete.java
+++ b/src/main/java/net/minecraft/server/PacketPlayInTabComplete.java
@@ -36,7 +36,7 @@ public class PacketPlayInTabComplete implements Packet<PacketListenerPlayIn> {
 
     }
 
-    // Reaper start - Truly async tab complete
+    // Beast start - Truly async tab complete
     private static final java.util.concurrent.ExecutorService executors = java.util.concurrent.Executors.newCachedThreadPool(new com.google.common.util.concurrent.ThreadFactoryBuilder().setDaemon(true).setNameFormat("Async TabComplete Thread - #%d").build());
     public void a(PacketListenerPlayIn packetlistenerplayin) {
         executors.submit(new Runnable() {
@@ -45,7 +45,7 @@ public class PacketPlayInTabComplete implements Packet<PacketListenerPlayIn> {
                 packetlistenerplayin.a(PacketPlayInTabComplete.this);
             }
         });
-        // Reaper end
+        // Beast end
     }
 
     public String a() {
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutBlockChange.java b/src/main/java/net/minecraft/server/PacketPlayOutBlockChange.java
index 33447e1b5370edd4533f7d52499e00d0693d89cb..db7f94107c479e0b16f98063496fae6e869adb48 100644
--- a/src/main/java/net/minecraft/server/PacketPlayOutBlockChange.java
+++ b/src/main/java/net/minecraft/server/PacketPlayOutBlockChange.java
@@ -14,12 +14,12 @@ public class PacketPlayOutBlockChange implements Packet<PacketListenerPlayOut> {
         this.block = world.getType(blockposition);
     }
 
-    // Reaper start
+    // Beast start
     public PacketPlayOutBlockChange(BlockPosition blockposition, IBlockData iblockdata) {
         this.a = blockposition;
         this.block = iblockdata;
     }
-    // Reaper end
+    // Beast end
 
     public void a(PacketDataSerializer packetdataserializer) throws IOException {
         this.a = packetdataserializer.e();
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutEntityMetadata.java b/src/main/java/net/minecraft/server/PacketPlayOutEntityMetadata.java
index 12ef11ef0eb7d39baf8c66d19466232c1670511c..f9625b00de55958600cef0586af9b99952dd919b 100644
--- a/src/main/java/net/minecraft/server/PacketPlayOutEntityMetadata.java
+++ b/src/main/java/net/minecraft/server/PacketPlayOutEntityMetadata.java
@@ -14,7 +14,7 @@ public class PacketPlayOutEntityMetadata implements Packet<PacketListenerPlayOut
         this.a = i;
         if (flag) {
             this.b = datawatcher.c();
-            if (false) // Reaper - Don't clear because of one player
+            if (false) // Beast - Don't clear because of one player
             datawatcher.e();
         } else {
             this.b = datawatcher.b();
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutMapChunk.java b/src/main/java/net/minecraft/server/PacketPlayOutMapChunk.java
index a727f995d8ea6b7119329580c4f23a1153de4963..9665feb1cd62760727381d10ae047a0845c69ebe 100644
--- a/src/main/java/net/minecraft/server/PacketPlayOutMapChunk.java
+++ b/src/main/java/net/minecraft/server/PacketPlayOutMapChunk.java
@@ -16,7 +16,7 @@ public class PacketPlayOutMapChunk implements Packet<PacketListenerPlayOut> {
     private byte[] d;
     private List<NBTTagCompound> e;
     private boolean f;
-    private byte[] nbtData; // Reaper - Cache chunk NBT
+    private byte[] nbtData; // Beast - Cache chunk NBT
 
     public PacketPlayOutMapChunk() {}
 
@@ -27,7 +27,7 @@ public class PacketPlayOutMapChunk implements Packet<PacketListenerPlayOut> {
         return extraPackets;
     }
     // Paper end
-    private static final int EXCESSIVE_TILEENTITIES_CAP = Integer.getInteger("Reaper.excessiveTileEntitiesCap", 500); // Reaper
+    private static final int EXCESSIVE_TILEENTITIES_CAP = Integer.getInteger("Beast.excessiveTileEntitiesCap", 500); // Beast
     public PacketPlayOutMapChunk(Chunk chunk, int i) {
         this.a = chunk.locX;
         this.b = chunk.locZ;
@@ -39,7 +39,7 @@ public class PacketPlayOutMapChunk implements Packet<PacketListenerPlayOut> {
         this.e = Lists.newArrayList();
         Iterator iterator = chunk.getTileEntities().entrySet().iterator();
         int totalSigns = 0; // Paper
-        int totalTileEntities = 0; // Reaper
+        int totalTileEntities = 0; // Beast
 
         while (iterator.hasNext()) {
             Entry entry = (Entry) iterator.next();
@@ -56,7 +56,7 @@ public class PacketPlayOutMapChunk implements Packet<PacketListenerPlayOut> {
                     continue;
                 }
                 // Paper end
-                // Reaper start
+                // Beast start
                 if (++totalTileEntities > EXCESSIVE_TILEENTITIES_CAP) {
                     PacketPlayOutTileEntityData updatePacket = tileentity.getUpdatePacket();
                     if (updatePacket != null) {
@@ -67,13 +67,13 @@ public class PacketPlayOutMapChunk implements Packet<PacketListenerPlayOut> {
                     }
                     continue;
                 }
-                // Reaper end
+                // Beast end
                 NBTTagCompound nbttagcompound = tileentity.d();
 
                 this.e.add(nbttagcompound);
             }
         }
-        // Reaper start - Cache chunk NBT
+        // Beast start - Cache chunk NBT
         if (!this.e.isEmpty()) {
             try {
                 java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
@@ -87,7 +87,7 @@ public class PacketPlayOutMapChunk implements Packet<PacketListenerPlayOut> {
                 e.printStackTrace();
             }
         }
-        // Reaper end
+        // Beast end
 
     }
 
@@ -122,7 +122,7 @@ public class PacketPlayOutMapChunk implements Packet<PacketListenerPlayOut> {
         packetdataserializer.d(this.d.length);
         packetdataserializer.writeBytes(this.d);
         packetdataserializer.d(this.e.size());
-        /* // Reaper start - Cache chunk NBT
+        /* // Beast start - Cache chunk NBT
         Iterator iterator = this.e.iterator();
 
         while (iterator.hasNext()) {
@@ -134,7 +134,7 @@ public class PacketPlayOutMapChunk implements Packet<PacketListenerPlayOut> {
         if (nbtData != null) {
             packetdataserializer.writeBytes(this.nbtData);
         }
-        // Reaper end
+        // Beast end
 
     }
 
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutPlayerInfo.java b/src/main/java/net/minecraft/server/PacketPlayOutPlayerInfo.java
index f11460b5f94c383d92a4d1adab2a3a3b358bf6dd..c051c1ab72b92ab9fdbb515cd306a0aea99d913b 100644
--- a/src/main/java/net/minecraft/server/PacketPlayOutPlayerInfo.java
+++ b/src/main/java/net/minecraft/server/PacketPlayOutPlayerInfo.java
@@ -1,6 +1,6 @@
 package net.minecraft.server;
 
-import com.github.ruviolence.reaper.BeastConfig;
+import com.homomc.beast.BeastConfig;
 import com.google.common.base.MoreObjects;
 import com.google.common.collect.Lists;
 import com.mojang.authlib.GameProfile;
@@ -193,7 +193,7 @@ public class PacketPlayOutPlayerInfo implements Packet<PacketListenerPlayOut> {
         }
 
         public int b() {
-            // Reaper start
+            // Beast start
             if (BeastConfig.roundPlayerPing) {
                 int ping = this.b;
 
@@ -208,7 +208,7 @@ public class PacketPlayOutPlayerInfo implements Packet<PacketListenerPlayOut> {
                 } else {
                     return 1000;
                 }
-            } // Reaper end
+            } // Beast end
             return this.b;
         }
 
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutSetSlot.java b/src/main/java/net/minecraft/server/PacketPlayOutSetSlot.java
index 0cfa28308f80d646058893bd3fdc4b2ba9ba4118..6c95439a203342f7e5793d03633cca2fd3d85f58 100644
--- a/src/main/java/net/minecraft/server/PacketPlayOutSetSlot.java
+++ b/src/main/java/net/minecraft/server/PacketPlayOutSetSlot.java
@@ -1,6 +1,6 @@
 package net.minecraft.server;
 
-import com.github.ruviolence.reaper.BeastConfig;
+import com.homomc.beast.BeastConfig;
 
 import java.io.IOException;
 
@@ -34,12 +34,12 @@ public class PacketPlayOutSetSlot implements Packet<PacketListenerPlayOut> {
     public void b(PacketDataSerializer packetdataserializer) throws IOException {
         packetdataserializer.writeByte(this.a);
         packetdataserializer.writeShort(this.b);
-        // Reaper start - Old combat
+        // Beast start - Old combat
         if (BeastConfig.oldCombatHideAttributes) {
             packetdataserializer.writeItemStackWithHidedAttributes(this.c);
             return;
         }
-        // Reaper end
+        // Beast end
         packetdataserializer.a(this.c);
     }
 }
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutTitle.java b/src/main/java/net/minecraft/server/PacketPlayOutTitle.java
index 91dd34b3da46122bb9c02dd2634ce9be68432147..2ffdef28e6ec09941ee0161f376db64e32419978 100644
--- a/src/main/java/net/minecraft/server/PacketPlayOutTitle.java
+++ b/src/main/java/net/minecraft/server/PacketPlayOutTitle.java
@@ -83,12 +83,12 @@ public class PacketPlayOutTitle implements Packet<PacketListenerPlayOut> {
     public static enum EnumTitleAction {
 
         TITLE, SUBTITLE, ACTIONBAR, TIMES, CLEAR, RESET;
-        public static final PacketPlayOutTitle.EnumTitleAction[] VALUES = values(); // Reaper - Single values array
+        public static final PacketPlayOutTitle.EnumTitleAction[] VALUES = values(); // Beast - Single values array
 
         private EnumTitleAction() {}
 
         public static PacketPlayOutTitle.EnumTitleAction a(String s) {
-            PacketPlayOutTitle.EnumTitleAction[] apacketplayouttitle_enumtitleaction = VALUES; // Reaper - Single values array
+            PacketPlayOutTitle.EnumTitleAction[] apacketplayouttitle_enumtitleaction = VALUES; // Beast - Single values array
             int i = apacketplayouttitle_enumtitleaction.length;
 
             for (int j = 0; j < i; ++j) {
@@ -103,9 +103,9 @@ public class PacketPlayOutTitle implements Packet<PacketListenerPlayOut> {
         }
 
         public static String[] a() {
-            String[] astring = new String[VALUES.length]; // Reaper - Single values array
+            String[] astring = new String[VALUES.length]; // Beast - Single values array
             int i = 0;
-            PacketPlayOutTitle.EnumTitleAction[] apacketplayouttitle_enumtitleaction = VALUES; // Reaper - Single values array
+            PacketPlayOutTitle.EnumTitleAction[] apacketplayouttitle_enumtitleaction = VALUES; // Beast - Single values array
             int j = apacketplayouttitle_enumtitleaction.length;
 
             for (int k = 0; k < j; ++k) {
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutUpdateAttributes.java b/src/main/java/net/minecraft/server/PacketPlayOutUpdateAttributes.java
index a7fb37683f9879a963eb21231ba5d821884acf9b..58220d72ffa7785cfd19cbcb029f2100ac7a0aae 100644
--- a/src/main/java/net/minecraft/server/PacketPlayOutUpdateAttributes.java
+++ b/src/main/java/net/minecraft/server/PacketPlayOutUpdateAttributes.java
@@ -1,6 +1,6 @@
 package net.minecraft.server;
 
-import com.github.ruviolence.reaper.BeastConfig;
+import com.homomc.beast.BeastConfig;
 import com.google.common.collect.Lists;
 import java.io.IOException;
 import java.util.ArrayList;
@@ -23,14 +23,14 @@ public class PacketPlayOutUpdateAttributes implements Packet<PacketListenerPlayO
         while (iterator.hasNext()) {
             AttributeInstance attributeinstance = (AttributeInstance) iterator.next();
 
-            // Reaper start - Old combat
+            // Beast start - Old combat
             if (BeastConfig.oldCombatAttackSpeed) {
                 if (attributeinstance.getAttribute().getName().equals("generic.attackSpeed")) {
                     this.b.add(new PacketPlayOutUpdateAttributes.AttributeSnapshot("generic.attackSpeed", 127, java.util.Collections.emptyList()));
                     continue;
                 }
             }
-            // Reaper end
+            // Beast end
             this.b.add(new PacketPlayOutUpdateAttributes.AttributeSnapshot(attributeinstance.getAttribute().getName(), attributeinstance.b(), attributeinstance.c()));
         }
 
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutWindowItems.java b/src/main/java/net/minecraft/server/PacketPlayOutWindowItems.java
index 77cabd543db168cd807ccfd93c55b521c104a628..3edac34b5c8d9fa2da3ebb4067bf1f168b37836d 100644
--- a/src/main/java/net/minecraft/server/PacketPlayOutWindowItems.java
+++ b/src/main/java/net/minecraft/server/PacketPlayOutWindowItems.java
@@ -1,6 +1,6 @@
 package net.minecraft.server;
 
-import com.github.ruviolence.reaper.BeastConfig;
+import com.homomc.beast.BeastConfig;
 
 import java.io.IOException;
 import java.util.Iterator;
@@ -51,14 +51,14 @@ public class PacketPlayOutWindowItems implements Packet<PacketListenerPlayOut> {
         packetdataserializer.writeShort(this.b.size());
         Iterator iterator = this.b.iterator();
 
-        // Reaper start - Old combat
+        // Beast start - Old combat
         if (BeastConfig.oldCombatHideAttributes) {
             while (iterator.hasNext()) {
                 ItemStack itemstack = (ItemStack) iterator.next();
                 packetdataserializer.writeItemStackWithHidedAttributes(itemstack);
             }
         }
-        // Reaper end
+        // Beast end
         while (iterator.hasNext()) {
             ItemStack itemstack = (ItemStack) iterator.next();
 
diff --git a/src/main/java/net/minecraft/server/Pathfinder.java b/src/main/java/net/minecraft/server/Pathfinder.java
index 5b4898905b57b73741e78cd4d8577cb858a475d2..02db1d9e9be05c4d79d107070f7d47bc1ad20df2 100644
--- a/src/main/java/net/minecraft/server/Pathfinder.java
+++ b/src/main/java/net/minecraft/server/Pathfinder.java
@@ -3,7 +3,7 @@ package net.minecraft.server;
 import com.google.common.collect.Sets;
 import java.util.Set;
 import javax.annotation.Nullable;
-import com.github.ruviolence.reaper.lithium.ai.pathing.PathNodeCache;// Reaper - Lithium: ai/pathing/LandPathNodeMaker
+import com.homomc.beast.lithium.ai.pathing.PathNodeCache;// Beast - Lithium: ai/pathing/LandPathNodeMaker
 
 public class Pathfinder {
 
@@ -18,22 +18,22 @@ public class Pathfinder {
 
     @Nullable
     public PathEntity a(IBlockAccess iblockaccess, EntityInsentient entityinsentient, Entity entity, float f) {
-        // Reaper start - Lithium: ai/pathing/LandPathNodeMaker
+        // Beast start - Lithium: ai/pathing/LandPathNodeMaker
         PathNodeCache.enableChunkCache();
         PathEntity result = this.a(iblockaccess, entityinsentient, entity.locX, entity.getBoundingBox().b, entity.locZ, f);
         PathNodeCache.disableChunkCache();
         return result;
-        // Reaper end
+        // Beast end
     }
 
     @Nullable
     public PathEntity a(IBlockAccess iblockaccess, EntityInsentient entityinsentient, BlockPosition blockposition, float f) {
-        // Reaper start - Lithium: ai/pathing/LandPathNodeMaker
+        // Beast start - Lithium: ai/pathing/LandPathNodeMaker
         PathNodeCache.enableChunkCache();
         PathEntity result = this.a(iblockaccess, entityinsentient, (blockposition.getX() + 0.5F), (blockposition.getY() + 0.5F), (blockposition.getZ() + 0.5F), f);
         PathNodeCache.disableChunkCache();
         return result;
-        // Reaper end
+        // Beast end
     }
 
     @Nullable
diff --git a/src/main/java/net/minecraft/server/PathfinderFlying.java b/src/main/java/net/minecraft/server/PathfinderFlying.java
index 65ddaed02822eee7d1bd3596bd07c4182c627ceb..b8b98b358cb2bc42462c00b9ae22c682141bbe36 100644
--- a/src/main/java/net/minecraft/server/PathfinderFlying.java
+++ b/src/main/java/net/minecraft/server/PathfinderFlying.java
@@ -35,7 +35,7 @@ public class PathfinderFlying extends PathfinderNormal {
             i = MathHelper.floor(this.b.getBoundingBox().b + 0.5D);
         }
 
-        BlockPosition blockposition = this.b.blockPos; // Reaper - Cache current block pos
+        BlockPosition blockposition = this.b.blockPos; // Beast - Cache current block pos
         PathType pathtype = this.a(this.b, blockposition.getX(), i, blockposition.getZ());
 
         if (this.b.a(pathtype) < 0.0F) {
@@ -213,7 +213,7 @@ public class PathfinderFlying extends PathfinderNormal {
     public PathType a(IBlockAccess iblockaccess, int i, int j, int k, EntityInsentient entityinsentient, int l, int i1, int j1, boolean flag, boolean flag1) {
         EnumSet enumset = EnumSet.noneOf(PathType.class);
         PathType pathtype = PathType.BLOCKED;
-        BlockPosition blockposition = entityinsentient.blockPos; // Reaper - Cache current block pos
+        BlockPosition blockposition = entityinsentient.blockPos; // Beast - Cache current block pos
 
         pathtype = this.a(iblockaccess, i, j, k, l, i1, j1, flag, flag1, enumset, pathtype, blockposition);
         if (enumset.contains(PathType.FENCE)) {
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalBeg.java b/src/main/java/net/minecraft/server/PathfinderGoalBeg.java
index 89ad99aaf73ebf2038748c62a16a02349f3862de..8cb78d0b6b8a0fa264d9c33c9d210b8b755169e6 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalBeg.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalBeg.java
@@ -40,7 +40,7 @@ public class PathfinderGoalBeg extends PathfinderGoal {
     }
 
     private boolean a(EntityHuman entityhuman) {
-        EnumHand[] aenumhand = EnumHand.VALUES; // Reaper - Single values array
+        EnumHand[] aenumhand = EnumHand.VALUES; // Beast - Single values array
         int i = aenumhand.length;
 
         for (int j = 0; j < i; ++j) {
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalBreed.java b/src/main/java/net/minecraft/server/PathfinderGoalBreed.java
index f8dc4cbd197d3a8b117d6f97bc78cdd89f2941c5..3bf309904749d0ae7d60a789c2a2184400aec464 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalBreed.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalBreed.java
@@ -106,7 +106,7 @@ public class PathfinderGoalBreed extends PathfinderGoal {
             entityageable.setAgeRaw(-24000);
             entityageable.setPositionRotation(this.animal.locX, this.animal.locY, this.animal.locZ, 0.0F, 0.0F);
             this.a.addEntity(entityageable, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.BREEDING); // CraftBukkit - added SpawnReason
-            /* // Reaper start - Clientside particles
+            /* // Beast start - Clientside particles
             Random random = this.animal.getRandom();
 
             for (int i = 0; i < 7; ++i) {
@@ -119,7 +119,7 @@ public class PathfinderGoalBreed extends PathfinderGoal {
 
                 this.a.addParticle(EnumParticle.HEART, this.animal.locX + d3, this.animal.locY + d4, this.animal.locZ + d5, d0, d1, d2, new int[0]);
             }
-            */ // Reaper end
+            */ // Beast end
 
             if (this.a.getGameRules().getBoolean("doMobLoot")) {
                 // CraftBukkit start - use event experience
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalDoorInteract.java b/src/main/java/net/minecraft/server/PathfinderGoalDoorInteract.java
index 0044a83aea398b82315cfd06ac753d60f9470483..632c536e5212599318a40bbf95f5e81940928aa5 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalDoorInteract.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalDoorInteract.java
@@ -37,7 +37,7 @@ public abstract class PathfinderGoalDoorInteract extends PathfinderGoal {
                     }
                 }
 
-                this.b = this.a.blockPos.up(); // Reaper - Cache current block pos
+                this.b = this.a.blockPos.up(); // Beast - Cache current block pos
                 this.c = this.a(this.b);
                 return this.c != null;
             } else {
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalGotoTarget.java b/src/main/java/net/minecraft/server/PathfinderGoalGotoTarget.java
index e239703e5b2ac457bc946ea35f42998e01fec87e..af141c4a60b029ff31713a6c4bcb7615b5d9e0e1 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalGotoTarget.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalGotoTarget.java
@@ -69,7 +69,7 @@ public abstract class PathfinderGoalGotoTarget extends PathfinderGoal {
     private boolean i() {
         int i = this.h;
         boolean flag = true;
-        BlockPosition blockposition = this.c.blockPos; // Reaper - Cache current block pos
+        BlockPosition blockposition = this.c.blockPos; // Beast - Cache current block pos
 
         for (int j = 0; j <= 1; j = j > 0 ? -j : 1 - j) {
             for (int k = 0; k < i; ++k) {
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalHorseTrap.java b/src/main/java/net/minecraft/server/PathfinderGoalHorseTrap.java
index 7d051691ab5297a504acf9a428dc93907056373c..7852339a66d94b8769f76b2dbaf4568e41d30c4a 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalHorseTrap.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalHorseTrap.java
@@ -13,7 +13,7 @@ public class PathfinderGoalHorseTrap extends PathfinderGoal {
     }
 
     public void e() {
-        DifficultyDamageScaler difficultydamagescaler = this.a.world.D(this.a.blockPos); // Reaper - Cache current block pos
+        DifficultyDamageScaler difficultydamagescaler = this.a.world.D(this.a.blockPos); // Beast - Cache current block pos
 
         this.a.p(false);
         this.a.setTamed(true);
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalMakeLove.java b/src/main/java/net/minecraft/server/PathfinderGoalMakeLove.java
index 1135f0aeaaf5a8fce4ae536ded28e6d109abe014..c1c01cb4d537a9709d0c0f761328179e7773bbaf 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalMakeLove.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalMakeLove.java
@@ -20,7 +20,7 @@ public class PathfinderGoalMakeLove extends PathfinderGoal {
         } else if (this.b.getRandom().nextInt(500) != 0) {
             return false;
         } else {
-            this.a = this.d.ak().getClosestVillage(this.b.blockPos, 0); // Reaper - Cache current block pos
+            this.a = this.d.ak().getClosestVillage(this.b.blockPos, 0); // Beast - Cache current block pos
             if (this.a == null) {
                 return false;
             } else if (this.f() && this.b.r(true)) {
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalMeleeAttack.java b/src/main/java/net/minecraft/server/PathfinderGoalMeleeAttack.java
index d100d2fcbef49d6f47443756357335917ff68798..f093c0483f338b952c882f1be25a81ecd697f985 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalMeleeAttack.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalMeleeAttack.java
@@ -38,7 +38,7 @@ public class PathfinderGoalMeleeAttack extends PathfinderGoal {
     public boolean b() {
         EntityLiving entityliving = this.b.getGoalTarget();
 
-        return entityliving == null ? false : (!entityliving.isAlive() ? false : (!this.e ? !this.b.getNavigation().o() : (!this.b.f(entityliving.blockPos) ? false : !(entityliving instanceof EntityHuman) || !((EntityHuman) entityliving).isSpectator() && !((EntityHuman) entityliving).z()))); // Reaper - Cache current block pos
+        return entityliving == null ? false : (!entityliving.isAlive() ? false : (!this.e ? !this.b.getNavigation().o() : (!this.b.f(entityliving.blockPos) ? false : !(entityliving instanceof EntityHuman) || !((EntityHuman) entityliving).isSpectator() && !((EntityHuman) entityliving).z()))); // Beast - Cache current block pos
     }
 
     public void c() {
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalMoveIndoors.java b/src/main/java/net/minecraft/server/PathfinderGoalMoveIndoors.java
index 858e2806c71c29fb5d5675e2100c4acd4f576a77..6b2fb65edcca722c905a13624562abfe586c25f2 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalMoveIndoors.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalMoveIndoors.java
@@ -13,7 +13,7 @@ public class PathfinderGoalMoveIndoors extends PathfinderGoal {
     }
 
     public boolean a() {
-        BlockPosition blockposition = this.a.blockPos; // Reaper - Cache current block pos
+        BlockPosition blockposition = this.a.blockPos; // Beast - Cache current block pos
 
         if ((!this.a.world.D() || this.a.world.isRaining() && !this.a.world.getBiome(blockposition).d()) && this.a.world.worldProvider.m()) {
             if (this.a.getRandom().nextInt(50) != 0) {
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalMoveThroughVillage.java b/src/main/java/net/minecraft/server/PathfinderGoalMoveThroughVillage.java
index b82639a9f8c55ac7da635a7500b7c7aada533fb5..f59e6a43c68c6f0a11afc3dda793e450443f79f6 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalMoveThroughVillage.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalMoveThroughVillage.java
@@ -28,7 +28,7 @@ public class PathfinderGoalMoveThroughVillage extends PathfinderGoal {
         if (this.e && this.a.world.D()) {
             return false;
         } else {
-            Village village = this.a.world.ak().getClosestVillage(this.a.blockPos, 0); // Reaper - Cache current block pos
+            Village village = this.a.world.ak().getClosestVillage(this.a.blockPos, 0); // Beast - Cache current block pos
 
             if (village == null) {
                 return false;
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalNearestAttackableTarget.java b/src/main/java/net/minecraft/server/PathfinderGoalNearestAttackableTarget.java
index 6491c1e728b1278e18e2eba5b2fbd2b6cdd043e3..4d7811cff763fbc16598ec1221b6568fa9f96378 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalNearestAttackableTarget.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalNearestAttackableTarget.java
@@ -49,7 +49,7 @@ public class PathfinderGoalNearestAttackableTarget<T extends EntityLiving> exten
             if (list.isEmpty()) {
                 return false;
             } else {
-                list.sort(this.b); // Reaper - Optimize
+                list.sort(this.b); // Beast - Optimize
                 this.d = (T) list.get(0); // CraftBukkit - fix decompile error
                 return true;
             }
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalNearestAttackableTargetInsentient.java b/src/main/java/net/minecraft/server/PathfinderGoalNearestAttackableTargetInsentient.java
index 8ad9e49a4c43955cb87b67aad95c51f7bdffc2a8..adba8c2bab25075275917a06726eea027015eba5 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalNearestAttackableTargetInsentient.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalNearestAttackableTargetInsentient.java
@@ -45,7 +45,7 @@ public class PathfinderGoalNearestAttackableTargetInsentient extends PathfinderG
         double d0 = this.f();
         List list = this.b.world.a(this.f, this.b.getBoundingBox().grow(d0, 4.0D, d0), this.c);
 
-        list.sort(this.d); // Reaper - Optimize
+        list.sort(this.d); // Beast - Optimize
         if (list.isEmpty()) {
             return false;
         } else {
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalPanic.java b/src/main/java/net/minecraft/server/PathfinderGoalPanic.java
index 47cafb896956ed4df0cb8e6a795e9f53585e5df3..f238b3ae9f2f9fa353d9f9a27c4b02c3b0372ed8 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalPanic.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalPanic.java
@@ -64,7 +64,7 @@ public class PathfinderGoalPanic extends PathfinderGoal {
 
     @Nullable
     private BlockPosition a(World world, Entity entity, int i, int j) {
-        BlockPosition blockposition = new BlockPosition(entity.blockPos); // Reaper - Cache current block pos
+        BlockPosition blockposition = new BlockPosition(entity.blockPos); // Beast - Cache current block pos
         int k = blockposition.getX();
         int l = blockposition.getY();
         int i1 = blockposition.getZ();
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalRandomFly.java b/src/main/java/net/minecraft/server/PathfinderGoalRandomFly.java
index 5f83703f87530143452fafd48fe87fe6da32d75a..1bf7a9fadffc7a857caf5b53eec6e453cdaad574 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalRandomFly.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalRandomFly.java
@@ -26,7 +26,7 @@ public class PathfinderGoalRandomFly extends PathfinderGoalRandomStrollLand {
 
     @Nullable
     private Vec3D j() {
-        BlockPosition blockposition = this.a.blockPos; // Reaper - Cache current block pos
+        BlockPosition blockposition = this.a.blockPos; // Beast - Cache current block pos
         BlockPosition.MutableBlockPosition blockposition_mutableblockposition = new BlockPosition.MutableBlockPosition();
         BlockPosition.MutableBlockPosition blockposition_mutableblockposition1 = new BlockPosition.MutableBlockPosition();
         Iterable iterable = BlockPosition.MutableBlockPosition.b(MathHelper.floor(this.a.locX - 3.0D), MathHelper.floor(this.a.locY - 6.0D), MathHelper.floor(this.a.locZ - 3.0D), MathHelper.floor(this.a.locX + 3.0D), MathHelper.floor(this.a.locY + 6.0D), MathHelper.floor(this.a.locZ + 3.0D));
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalRestrictOpenDoor.java b/src/main/java/net/minecraft/server/PathfinderGoalRestrictOpenDoor.java
index 17b326a8b9262ed41e31f13c35d5f3a90431647a..45be85a93e7a98c53450fda7cef446d2193478bf 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalRestrictOpenDoor.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalRestrictOpenDoor.java
@@ -16,7 +16,7 @@ public class PathfinderGoalRestrictOpenDoor extends PathfinderGoal {
         if (this.a.world.D()) {
             return false;
         } else {
-            BlockPosition blockposition = this.a.blockPos; // Reaper - Cache current block pos
+            BlockPosition blockposition = this.a.blockPos; // Beast - Cache current block pos
             Village village = this.a.world.ak().getClosestVillage(blockposition, 16);
 
             if (village == null) {
@@ -29,7 +29,7 @@ public class PathfinderGoalRestrictOpenDoor extends PathfinderGoal {
     }
 
     public boolean b() {
-        return this.a.world.D() ? false : !this.b.i() && this.b.c(this.a.blockPos); // Reaper - Cache current block pos
+        return this.a.world.D() ? false : !this.b.i() && this.b.c(this.a.blockPos); // Beast - Cache current block pos
     }
 
     public void c() {
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalSelector.java b/src/main/java/net/minecraft/server/PathfinderGoalSelector.java
index 2c2b08756bedbb08302cb12b382e2967e260b34a..165e0b34c87277ae9e57a935afa0825bcb615d29 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalSelector.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalSelector.java
@@ -50,7 +50,7 @@ public class PathfinderGoalSelector {
     }
 
     public void a() {
-        // this.d.a("goalSetup"); // Reaper - Remove MethodProfiler
+        // this.d.a("goalSetup"); // Beast - Remove MethodProfiler
         Iterator iterator;
         PathfinderGoalSelector.PathfinderGoalSelectorItem pathfindergoalselector_pathfindergoalselectoritem;
 
@@ -84,9 +84,9 @@ public class PathfinderGoalSelector {
             }
         }
 
-        // this.d.b(); // Reaper - Remove MethodProfiler
+        // this.d.b(); // Beast - Remove MethodProfiler
         if (!this.c.isEmpty()) {
-            // this.d.a("goalTick"); // Reaper - Remove MethodProfiler
+            // this.d.a("goalTick"); // Beast - Remove MethodProfiler
             iterator = this.c.iterator();
 
             while (iterator.hasNext()) {
@@ -94,7 +94,7 @@ public class PathfinderGoalSelector {
                 pathfindergoalselector_pathfindergoalselectoritem.a.e();
             }
 
-            // this.d.b(); // Reaper - Remove MethodProfiler
+            // this.d.b(); // Beast - Remove MethodProfiler
         }
 
     }
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalTarget.java b/src/main/java/net/minecraft/server/PathfinderGoalTarget.java
index ba07493ce61ff95e609f46c6b9cd4217dcd0c9c4..34ade1dc92b5d9377f1c59f3d6d5ff5b8713592f 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalTarget.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalTarget.java
@@ -115,7 +115,7 @@ public abstract class PathfinderGoalTarget extends PathfinderGoal {
     protected boolean a(@Nullable EntityLiving entityliving, boolean flag) {
         if (!a(this.e, entityliving, flag, this.f)) {
             return false;
-        } else if (!this.e.f(entityliving.blockPos)) { // Reaper - Cache current block pos
+        } else if (!this.e.f(entityliving.blockPos)) { // Beast - Cache current block pos
             return false;
         } else {
             if (this.a) {
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalTargetNearestPlayer.java b/src/main/java/net/minecraft/server/PathfinderGoalTargetNearestPlayer.java
index e462dd4f39fd0566474bb549c6892cd10f7f3f42..a79f60862d918679a95d75a0b42d702c86e8692b 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalTargetNearestPlayer.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalTargetNearestPlayer.java
@@ -59,7 +59,7 @@ public class PathfinderGoalTargetNearestPlayer extends PathfinderGoal {
         double d0 = this.f();
         List list = this.b.world.a(EntityHuman.class, this.b.getBoundingBox().grow(d0, 4.0D, d0), this.c);
 
-        list.sort(this.d); // Reaper - Optimize
+        list.sort(this.d); // Beast - Optimize
         if (list.isEmpty()) {
             return false;
         } else {
diff --git a/src/main/java/net/minecraft/server/PathfinderNormal.java b/src/main/java/net/minecraft/server/PathfinderNormal.java
index 374a1dba102d2cbc3b985093f4d4d270605bc9a0..021014296d4c6e609444f9fde2535d42a7976162 100644
--- a/src/main/java/net/minecraft/server/PathfinderNormal.java
+++ b/src/main/java/net/minecraft/server/PathfinderNormal.java
@@ -6,10 +6,10 @@ import java.util.HashSet;
 import java.util.Iterator;
 import javax.annotation.Nullable;
 
-// Reaper start - Lithium: ai/pathing/LandPathNodeMaker
-import com.github.ruviolence.reaper.lithium.WorldHelper;
-import com.github.ruviolence.reaper.lithium.ai.pathing.PathNodeCache;
-// Reaper end
+// Beast start - Lithium: ai/pathing/LandPathNodeMaker
+import com.homomc.beast.lithium.WorldHelper;
+import com.homomc.beast.lithium.ai.pathing.PathNodeCache;
+// Beast end
 
 public class PathfinderNormal extends PathfinderAbstract {
 
@@ -42,14 +42,14 @@ public class PathfinderNormal extends PathfinderAbstract {
         } else if (this.b.onGround) {
             i = MathHelper.floor(this.b.getBoundingBox().b + 0.5D);
         } else {
-            for (blockposition = this.b.blockPos; (this.a.getType(blockposition).getMaterial() == Material.AIR || this.a.getType(blockposition).getBlock().b(this.a, blockposition)) && blockposition.getY() > 0; blockposition = blockposition.down()) { // Reaper - Cache current block pos
+            for (blockposition = this.b.blockPos; (this.a.getType(blockposition).getMaterial() == Material.AIR || this.a.getType(blockposition).getBlock().b(this.a, blockposition)) && blockposition.getY() > 0; blockposition = blockposition.down()) { // Beast - Cache current block pos
                 ;
             }
 
             i = blockposition.up().getY();
         }
 
-        blockposition = this.b.blockPos; // Reaper - Cache current block pos
+        blockposition = this.b.blockPos; // Beast - Cache current block pos
         PathType pathtype = this.a(this.b, blockposition.getX(), i, blockposition.getZ());
 
         if (this.b.a(pathtype) < 0.0F) {
@@ -235,7 +235,7 @@ public class PathfinderNormal extends PathfinderAbstract {
         EnumSet enumset = EnumSet.noneOf(PathType.class);
         PathType pathtype = PathType.BLOCKED;
         double d0 = (double) entityinsentient.width / 2.0D;
-        BlockPosition blockposition = entityinsentient.blockPos; // Reaper - Cache current block pos
+        BlockPosition blockposition = entityinsentient.blockPos; // Beast - Cache current block pos
 
         pathtype = this.a(iblockaccess, i, j, k, l, i1, j1, flag, flag1, enumset, pathtype, blockposition);
         if (enumset.contains(PathType.FENCE)) {
@@ -327,7 +327,7 @@ public class PathfinderNormal extends PathfinderAbstract {
     }
 
     public PathType a(IBlockAccess iblockaccess, int i, int j, int k, PathType pathtype) {
-        // Reaper start - Lithium: ai/pathing/LandPathNodeMaker
+        // Beast start - Lithium: ai/pathing/LandPathNodeMaker
         if (pathtype != PathType.WALKABLE) return pathtype;
         ChunkSection section = null;
 
@@ -386,11 +386,11 @@ public class PathfinderNormal extends PathfinderAbstract {
         }
 
         return pathtype;
-        // Reaper end
+        // Beast end
     }
 
     protected PathType b(IBlockAccess iblockaccess, int i, int j, int k) {
-        // Reaper start - Lithium: ai/pathing/LandPathNodeMaker
+        // Beast start - Lithium: ai/pathing/LandPathNodeMaker
         IBlockData blockState = iblockaccess.getType(new BlockPosition(i, j, k));
         PathType type = blockState.getPathNodeType();
 
@@ -411,6 +411,6 @@ public class PathfinderNormal extends PathfinderAbstract {
 
         // Return the cached value since we found an obstacle earlier
         return type;
-        // Reaper end
+        // Beast end
     }
 }
diff --git a/src/main/java/net/minecraft/server/PathfinderWater.java b/src/main/java/net/minecraft/server/PathfinderWater.java
index 1f0233dff01c5b39fdf26006fb4aee67b9df6243..befce60c6451a12494e71ea5e9c9c37a4a682da3 100644
--- a/src/main/java/net/minecraft/server/PathfinderWater.java
+++ b/src/main/java/net/minecraft/server/PathfinderWater.java
@@ -16,7 +16,7 @@ public class PathfinderWater extends PathfinderAbstract {
 
     public int a(PathPoint[] apathpoint, PathPoint pathpoint, PathPoint pathpoint1, float f) {
         int i = 0;
-        EnumDirection[] aenumdirection = EnumDirection.VALUES; // Reaper - Single values array
+        EnumDirection[] aenumdirection = EnumDirection.VALUES; // Beast - Single values array
         int j = aenumdirection.length;
 
         for (int k = 0; k < j; ++k) {
diff --git a/src/main/java/net/minecraft/server/PersistentCollection.java b/src/main/java/net/minecraft/server/PersistentCollection.java
index 21ee0c5039361f04cfd07144d5d8e8e4732f2740..c48d58e0cdf8db1d87aa502d0017686e708b2fcd 100644
--- a/src/main/java/net/minecraft/server/PersistentCollection.java
+++ b/src/main/java/net/minecraft/server/PersistentCollection.java
@@ -151,7 +151,7 @@ public class PersistentCollection {
             oshort = Short.valueOf((short) 0);
         } else {
             oshort = Short.valueOf((short) (oshort.shortValue() + 1));
-            if (oshort < 0) oshort = 0; // Reaper - Fix map ID overflow
+            if (oshort < 0) oshort = 0; // Beast - Fix map ID overflow
         }
 
         this.d.put(s, oshort);
diff --git a/src/main/java/net/minecraft/server/PersistentVillage.java b/src/main/java/net/minecraft/server/PersistentVillage.java
index b7a7df44ac2b46ff56352fa9c0f91f13cb5249c6..4541bff2c9ecd1aadc5d6c06cb127a34052cc5e7 100644
--- a/src/main/java/net/minecraft/server/PersistentVillage.java
+++ b/src/main/java/net/minecraft/server/PersistentVillage.java
@@ -1,6 +1,6 @@
 package net.minecraft.server;
 
-import com.github.ruviolence.reaper.BeastConfig;
+import com.homomc.beast.BeastConfig;
 import com.google.common.collect.Lists;
 import java.util.Iterator;
 import java.util.List;
@@ -22,13 +22,13 @@ public class PersistentVillage extends PersistentBase {
         super(a(world.worldProvider));
         this.world = world;
         this.c();
-        // Reaper start
+        // Beast start
         if (BeastConfig.disableVillages) {
             ((java.util.ArrayList<?>) c).trimToSize();
             ((java.util.ArrayList<?>) d).trimToSize();
             ((java.util.ArrayList<?>) villages).trimToSize();
         }
-        // Reaper end
+        // Beast end
     }
 
     public void a(World world) {
@@ -44,7 +44,7 @@ public class PersistentVillage extends PersistentBase {
     }
 
     public void a(BlockPosition blockposition) {
-        if (BeastConfig.disableVillages) return; // Reaper
+        if (BeastConfig.disableVillages) return; // Beast
         if (this.c.size() <= 64) {
             if (!this.e(blockposition)) {
                 this.c.add(blockposition);
@@ -91,7 +91,7 @@ public class PersistentVillage extends PersistentBase {
     }
 
     public Village getClosestVillage(BlockPosition blockposition, int i) {
-        if (BeastConfig.disableVillages) return null; // Reaper
+        if (BeastConfig.disableVillages) return null; // Beast
         Village village = null;
         double d0 = 3.4028234663852886E38D;
         Iterator iterator = this.villages.iterator();
@@ -248,7 +248,7 @@ public class PersistentVillage extends PersistentBase {
     }
 
     public void a(NBTTagCompound nbttagcompound) {
-        if (BeastConfig.disableVillages) return; // Reaper
+        if (BeastConfig.disableVillages) return; // Beast
         this.time = nbttagcompound.getInt("Tick");
         NBTTagList nbttaglist = nbttagcompound.getList("Villages", 10);
 
diff --git a/src/main/java/net/minecraft/server/PistonExtendsChecker.java b/src/main/java/net/minecraft/server/PistonExtendsChecker.java
index fcdbe2d1ee54645a980ef2d70defac7b4a98c88c..3ce4b11b857ac57cf7e0f8d771092525f94b45b9 100644
--- a/src/main/java/net/minecraft/server/PistonExtendsChecker.java
+++ b/src/main/java/net/minecraft/server/PistonExtendsChecker.java
@@ -156,7 +156,7 @@ public class PistonExtendsChecker {
     }
 
     private boolean a(BlockPosition blockposition) {
-        EnumDirection[] aenumdirection = EnumDirection.VALUES; // Reaper - Single values array
+        EnumDirection[] aenumdirection = EnumDirection.VALUES; // Beast - Single values array
         int i = aenumdirection.length;
 
         for (int j = 0; j < i; ++j) {
diff --git a/src/main/java/net/minecraft/server/PlayerChunk.java b/src/main/java/net/minecraft/server/PlayerChunk.java
index 54fd5f22e564ef3093e74a0b62fe1072e6c9340a..1928af793b8f4e3dc92bfd5ec0935a2fa41e05c9 100644
--- a/src/main/java/net/minecraft/server/PlayerChunk.java
+++ b/src/main/java/net/minecraft/server/PlayerChunk.java
@@ -81,7 +81,7 @@ public class PlayerChunk {
         }
     }
 
-    // Reaper start
+    // Beast start
     public boolean addPlayerIfNotAdded(EntityPlayer player) {
         if (this.c.contains(player)) return false;
 
@@ -97,7 +97,7 @@ public class PlayerChunk {
 
         return true;
     }
-    // Reaper end
+    // Beast end
 
     public void b(EntityPlayer entityplayer) {
         if (this.c.contains(entityplayer)) {
@@ -158,7 +158,7 @@ public class PlayerChunk {
             this.dirtyCount = 0;
             this.h = 0;
             this.done = true;
-            if (this.c.isEmpty()) return true; // Reaper - Fix MC-120780
+            if (this.c.isEmpty()) return true; // Beast - Fix MC-120780
             PacketPlayOutMapChunk packetplayoutmapchunk = new PacketPlayOutMapChunk(this.chunk, '\uffff');
             Iterator iterator = this.c.iterator();
 
diff --git a/src/main/java/net/minecraft/server/PlayerChunkMap.java b/src/main/java/net/minecraft/server/PlayerChunkMap.java
index 90b5b348f40481197b18c50020c1ba230e3d84bf..61a198eac910b615e0cc09a4d1b5328404ba5d34 100644
--- a/src/main/java/net/minecraft/server/PlayerChunkMap.java
+++ b/src/main/java/net/minecraft/server/PlayerChunkMap.java
@@ -1,6 +1,6 @@
 package net.minecraft.server;
 
-import com.github.ruviolence.reaper.BeastConfig;
+import com.homomc.beast.BeastConfig;
 import com.google.common.base.Predicate;
 import com.google.common.collect.AbstractIterator;
 import com.google.common.collect.ComparisonChain;
@@ -40,7 +40,7 @@ public class PlayerChunkMap {
         }
     };
     private final WorldServer world;
-    private final List<EntityPlayer> managedPlayers = new it.unimi.dsi.fastutil.objects.ObjectArrayList<>(); // Reaper - ArrayList -> ObjectArrayList
+    private final List<EntityPlayer> managedPlayers = new it.unimi.dsi.fastutil.objects.ObjectArrayList<>(); // Beast - ArrayList -> ObjectArrayList
     private final Long2ObjectMap<PlayerChunk> e = new Long2ObjectOpenHashMap(4096);
     private final Set<PlayerChunk> f = Sets.newHashSet();
     private final List<PlayerChunk> g = Lists.newLinkedList();
@@ -54,7 +54,7 @@ public class PlayerChunkMap {
 
     public PlayerChunkMap(WorldServer worldserver) {
         this.world = worldserver;
-        this.a(BeastConfig.dynamicViewDistance ? 3 : worldserver.spigotConfig.viewDistance); // Spigot // Reaper - Dynamic view distance
+        this.a(BeastConfig.dynamicViewDistance ? 3 : worldserver.spigotConfig.viewDistance); // Spigot // Beast - Dynamic view distance
     }
 
     public WorldServer getWorld() {
@@ -129,7 +129,7 @@ public class PlayerChunkMap {
 
         if (this.l && i % 4L == 0L) {
             this.l = false;
-            this.h.sort(new Comparator() { // Reaper - Optimize
+            this.h.sort(new Comparator() { // Beast - Optimize
                 public int a(PlayerChunk playerchunk, PlayerChunk playerchunk1) {
                     return ComparisonChain.start().compare(playerchunk.g(), playerchunk1.g()).result();
                 }
@@ -142,7 +142,7 @@ public class PlayerChunkMap {
 
         if (this.m && i % 4L == 2L) {
             this.m = false;
-            this.g.sort(new Comparator() { // Reaper - Optimize
+            this.g.sort(new Comparator() { // Beast - Optimize
                 public int a(PlayerChunk playerchunk, PlayerChunk playerchunk1) {
                     return ComparisonChain.start().compare(playerchunk.g(), playerchunk1.g()).result();
                 }
@@ -231,7 +231,7 @@ public class PlayerChunkMap {
         return (PlayerChunk) this.e.get(d(i, j));
     }
 
-    protected PlayerChunk c(int i, int j) { // Reaper - private -> protected
+    protected PlayerChunk c(int i, int j) { // Beast - private -> protected
         long k = d(i, j);
         PlayerChunk playerchunk = (PlayerChunk) this.e.get(k);
 
@@ -292,7 +292,7 @@ public class PlayerChunkMap {
             }
         }
 
-        // Reaper start - Delayed chunks
+        // Beast start - Delayed chunks
         if (BeastConfig.delayedChunksEnabled) {
             for (int h = 0; h < chunkList.size(); h++) {
                 ChunkCoordIntPair pair = chunkList.get(h);
@@ -301,12 +301,12 @@ public class PlayerChunkMap {
             entityplayer.resortDelayedChunks();
             entityplayer.sendDelayedChunks();
         } else {
-        chunkList.sort(new ChunkCoordComparator(entityplayer)); // Reaper - Optimize
+        chunkList.sort(new ChunkCoordComparator(entityplayer)); // Beast - Optimize
         for (ChunkCoordIntPair pair : chunkList) {
             this.c(pair.x, pair.z).a(entityplayer);
         }
         }
-        // Reaper end
+        // Beast end
         // CraftBukkit end
 
         this.managedPlayers.add(entityplayer);
@@ -322,7 +322,7 @@ public class PlayerChunkMap {
         for (int k = i - viewDistance; k <= i + viewDistance; ++k) {
             for (int l = j - viewDistance; l <= j + viewDistance; ++l) {
                 // Paper end
-                if (BeastConfig.delayedChunksEnabled && entityplayer.removeDelayedChunk(k, l)) continue; // Reaper - Delayed chunks
+                if (BeastConfig.delayedChunksEnabled && entityplayer.removeDelayedChunk(k, l)) continue; // Beast - Delayed chunks
                 PlayerChunk playerchunk = this.getChunk(k, l);
 
                 if (playerchunk != null) {
@@ -353,7 +353,7 @@ public class PlayerChunkMap {
             int k = (int) entityplayer.d >> 4;
             int l = (int) entityplayer.e >> 4;
             final int viewDistance = entityplayer.getViewDistance(); // Paper - Player view distance API
-            int i1 = BeastConfig.dynamicViewDistance ? viewDistance : Math.max(getViewDistance(), viewDistance); // Paper - Player view distance API // Reaper - Dynamic view distance
+            int i1 = BeastConfig.dynamicViewDistance ? viewDistance : Math.max(getViewDistance(), viewDistance); // Paper - Player view distance API // Beast - Dynamic view distance
 
             int j1 = i - k;
             int k1 = j - l;
@@ -368,13 +368,13 @@ public class PlayerChunkMap {
                             chunksToLoad.add(new ChunkCoordIntPair(l1, i2)); // CraftBukkit
                         }
 
-                        // Reaper start - Delayed chunks
+                        // Beast start - Delayed chunks
                         int x = l1 - j1;
                         int z = i2 - k1;
                         if (!this.a(x, z, i, j, i1)) {
                             if (BeastConfig.delayedChunksEnabled && entityplayer.removeDelayedChunk(x, z)) continue;
                             PlayerChunk playerchunk = this.getChunk(x, z);
-                            // Reaper end
+                            // Beast end
 
                             if (playerchunk != null) {
                                 playerchunk.b(entityplayer);
@@ -386,7 +386,7 @@ public class PlayerChunkMap {
                 entityplayer.d = entityplayer.locX;
                 entityplayer.e = entityplayer.locZ;
                 this.e();
-                // Reaper start - Delayed chunks
+                // Beast start - Delayed chunks
                 if (BeastConfig.delayedChunksEnabled) {
                     for (int h = 0; h < chunksToLoad.size(); h++) {
                         ChunkCoordIntPair pair = chunksToLoad.get(h);
@@ -396,10 +396,10 @@ public class PlayerChunkMap {
                     entityplayer.sendDelayedChunks();
                     return;
                 }
-                // Reaper end
+                // Beast end
 
                 // CraftBukkit start - send nearest chunks first
-                chunksToLoad.sort(new ChunkCoordComparator(entityplayer)); // Reaper - Optimize
+                chunksToLoad.sort(new ChunkCoordComparator(entityplayer)); // Beast - Optimize
                 for (ChunkCoordIntPair pair : chunksToLoad) {
                     this.c(pair.x, pair.z).a(entityplayer);
                 }
@@ -444,23 +444,23 @@ public class PlayerChunkMap {
         if (i != oldViewDistance) {
             int j = i - oldViewDistance;
             
-            // Reaper start - Calculate by last managedPos, not by current location, fixes getting stuck in the PlayerChunk viewers list
+            // Beast start - Calculate by last managedPos, not by current location, fixes getting stuck in the PlayerChunk viewers list
             int k = (int) entityplayer.d >> 4;
             int l = (int) entityplayer.e >> 4;
-            // Reaper end
+            // Beast end
             int i1;
             int j1;
-            boolean delayedChunksEnabled = BeastConfig.delayedChunksEnabled; // Reaper
+            boolean delayedChunksEnabled = BeastConfig.delayedChunksEnabled; // Beast
 
             if (j > 0) {
                 for (i1 = k - i; i1 <= k + i; ++i1) {
                     for (j1 = l - i; j1 <= l + i; ++j1) {
-                        // Reaper start - Delayed chunks
+                        // Beast start - Delayed chunks
                         if (delayedChunksEnabled) {
                             entityplayer.addDelayedChunk(i1, j1);
                             continue;
                         }
-                        // Reaper end
+                        // Beast end
                         PlayerChunk playerchunk = this.c(i1, j1);
 
                         if (!playerchunk.d(entityplayer)) {
@@ -468,27 +468,27 @@ public class PlayerChunkMap {
                         }
                     }
                 }
-                // Reaper start - Delayed chunks
+                // Beast start - Delayed chunks
                 if (delayedChunksEnabled) {
                     entityplayer.resortDelayedChunks();
                     entityplayer.sendDelayedChunks();
                 }
-                // Reaper end
+                // Beast end
             } else {
                 for (i1 = k - oldViewDistance; i1 <= k + oldViewDistance; ++i1) {
                     for (j1 = l - oldViewDistance; j1 <= l + oldViewDistance; ++j1) {
                         if (!this.a(i1, j1, k, l, i)) {
-                            if (delayedChunksEnabled && entityplayer.removeDelayedChunk(i1, j1)) continue; // Reaper - Delayed chunks
-                            PlayerChunk chunk = this.getChunk(i1, j1); if (chunk != null) chunk.b(entityplayer); // Reaper - Fix memory leak
+                            if (delayedChunksEnabled && entityplayer.removeDelayedChunk(i1, j1)) continue; // Beast - Delayed chunks
+                            PlayerChunk chunk = this.getChunk(i1, j1); if (chunk != null) chunk.b(entityplayer); // Beast - Fix memory leak
                         }
                     }
                 }
-                // Reaper start - Delayed chunks
+                // Beast start - Delayed chunks
                 if (delayedChunksEnabled) {
                     entityplayer.resortDelayedChunks();
                     entityplayer.sendDelayedChunks();
                 }
-                // Reaper end
+                // Beast end
                 if (markSort) {
                     this.e();
                 }
@@ -541,7 +541,7 @@ public class PlayerChunkMap {
     }
 
     // CraftBukkit start - Sorter to load nearby chunks first
-    protected static class ChunkCoordComparator implements java.util.Comparator<ChunkCoordIntPair> { // Reaper - private -> protected
+    protected static class ChunkCoordComparator implements java.util.Comparator<ChunkCoordIntPair> { // Beast - private -> protected
         private int x;
         private int z;
 
diff --git a/src/main/java/net/minecraft/server/PlayerConnection.java b/src/main/java/net/minecraft/server/PlayerConnection.java
index f8e27ac02b0ae793a391395a9c0dc858fdcd8332..5c1d316a35ba7a40c06c9a74d7de89f08878489e 100644
--- a/src/main/java/net/minecraft/server/PlayerConnection.java
+++ b/src/main/java/net/minecraft/server/PlayerConnection.java
@@ -1,8 +1,9 @@
 package net.minecraft.server;
 
-import com.github.ruviolence.reaper.BeastConfig;
+import com.homomc.beast.BeastConfig;
 import com.google.common.primitives.Doubles;
 import com.google.common.primitives.Floats;
+import com.homomc.beast.InventoryUpdateHelper;
 import io.netty.util.concurrent.Future;
 import io.netty.util.concurrent.GenericFutureListener;
 import java.io.IOException;
@@ -149,7 +150,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
                 return;
             }
         } else {
-            // this.B = false; // Reaper - Optimize
+            // this.B = false; // Beast - Optimize
             this.C = 0;
         }
 
@@ -177,7 +178,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
             this.E = 0;
         }
 
-        // this.minecraftServer.methodProfiler.a("keepAlive"); // Reaper - Remove MethodProfiler
+        // this.minecraftServer.methodProfiler.a("keepAlive"); // Beast - Remove MethodProfiler
         // Paper Start - give clients a longer time to respond to pings as per pre 1.12.2 timings
         // This should effectively place the keepalive handling back to "as it was" before 1.12.2
         long currentTime = this.getCurrentMillis();
@@ -189,7 +190,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
                 this.disconnect(new ChatMessage("disconnect.timeout"));
             }
         } else {
-            if (elapsedTime >= BeastConfig.pingPeriod) { // Reaper
+            if (elapsedTime >= BeastConfig.pingPeriod) { // Beast
                 this.setPendingPing(true);
                 this.setLastPing(currentTime);
                 this.setKeepAliveID(currentTime);
@@ -198,7 +199,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
         }
         // Paper end
 
-        // this.minecraftServer.methodProfiler.b(); // Reaper - Remove MethodProfiler
+        // this.minecraftServer.methodProfiler.b(); // Beast - Remove MethodProfiler
         // CraftBukkit start
         for (int spam; (spam = this.chatThrottle) > 0 && !chatSpamField.compareAndSet(this, spam, spam - 1); ) ;
         if (tabSpamLimiter.get() > 0) tabSpamLimiter.getAndDecrement(); // Paper - split to seperate variable
@@ -266,7 +267,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
             public void operationComplete(Future future) throws Exception { // CraftBukkit - decompile error
                 PlayerConnection.this.networkManager.close(chatcomponenttext);
             }
-        }); // Reaper
+        }); // Beast
         this.a(chatcomponenttext); // CraftBukkit - fire quit instantly
         this.networkManager.stopReading();
         // CraftBukkit - Don't wait
@@ -298,7 +299,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
             Entity entity = this.player.getVehicle();
 
             if (entity != this.player && entity.bE() == this.player && entity == this.r) {
-                // Reaper start - Prevent vehicle move while awaiting teleport confirm
+                // Beast start - Prevent vehicle move while awaiting teleport confirm
                 if (this.teleportPos != null) {
                     if (this.e - this.A > 20) {
                         this.A = this.e;
@@ -307,7 +308,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
                     this.allowedPlayerTicks = 20; // CraftBukkit
                     return;
                 }
-                // Reaper end
+                // Beast end
                 WorldServer worldserver = this.player.x();
                 double d0 = entity.locX;
                 double d1 = entity.locY;
@@ -351,16 +352,16 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
 
                 // Paper start - Prevent moving into unloaded chunks
                 if (player.world.paperConfig.preventMovingIntoUnloadedChunks && !worldserver.isChunkLoaded((int) Math.floor(packetplayinvehiclemove.getX()) >> 4, (int) Math.floor(packetplayinvehiclemove.getZ()) >> 4, false)) {
-                    player.stopRiding(); // Reaper - Force dismount
+                    player.stopRiding(); // Beast - Force dismount
                     this.networkManager.sendPacket(new PacketPlayOutVehicleMove(entity));
                     return;
                 }
                 // Paper end
 
-                if (d10 - d9 > Math.max(100.0D, Math.pow((double) (org.spigotmc.SpigotConfig.movedTooQuicklyMultiplier * (float) i * speed), 2)) /*&& (!this.minecraftServer.R() || !this.minecraftServer.Q().equals(entity.getName()))*/) { // Spigot // Reaper - Remove singleplayer code
+                if (d10 - d9 > Math.max(100.0D, Math.pow((double) (org.spigotmc.SpigotConfig.movedTooQuicklyMultiplier * (float) i * speed), 2)) /*&& (!this.minecraftServer.R() || !this.minecraftServer.Q().equals(entity.getName()))*/) { // Spigot // Beast - Remove singleplayer code
                 // CraftBukkit end
                     PlayerConnection.LOGGER.warn("{} (vehicle of {}) moved too quickly! {},{},{}", entity.getName(), this.player.getName(), Double.valueOf(d6), Double.valueOf(d7), Double.valueOf(d8));
-                    player.stopRiding(); // Reaper - Force dismount
+                    player.stopRiding(); // Beast - Force dismount
                     this.networkManager.sendPacket(new PacketPlayOutVehicleMove(entity));
                     return;
                 }
@@ -597,7 +598,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
                             }
 
                             // Paper start - Prevent moving into unloaded chunks
-                            if (player.world.paperConfig.preventMovingIntoUnloadedChunks && (this.player.locX != /*toX*/d4 || this.player.locZ != /*toZ*/d6) && !worldserver.isChunkLoaded((int) Math.floor(/*toX*/d4) >> 4, (int) Math.floor(/*toZ*/d6) >> 4, false)) { // Reaper - Inline
+                            if (player.world.paperConfig.preventMovingIntoUnloadedChunks && (this.player.locX != /*toX*/d4 || this.player.locZ != /*toZ*/d6) && !worldserver.isChunkLoaded((int) Math.floor(/*toX*/d4) >> 4, (int) Math.floor(/*toZ*/d6) >> 4, false)) { // Beast - Inline
                                 this.internalTeleport(this.player.locX, this.player.locY, this.player.locZ, this.player.yaw, this.player.pitch, Collections.emptySet());
                                 return;
                             }
@@ -606,7 +607,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
                             if (!this.player.L() && (!this.player.x().getGameRules().getBoolean("disableElytraMovementCheck") || !this.player.cP())) {
                                 float f2 = this.player.cP() ? 300.0F : 100.0F;
 
-                                if (d11 - d10 > Math.max(f2, Math.pow((double) (org.spigotmc.SpigotConfig.movedTooQuicklyMultiplier * (float) i * speed), 2)) /*&& (!this.minecraftServer.R() || !this.minecraftServer.Q().equals(this.player.getName()))*/) { // Spigot // Reaper - Remove singleplayer code
+                                if (d11 - d10 > Math.max(f2, Math.pow((double) (org.spigotmc.SpigotConfig.movedTooQuicklyMultiplier * (float) i * speed), 2)) /*&& (!this.minecraftServer.R() || !this.minecraftServer.Q().equals(this.player.getName()))*/) { // Spigot // Beast - Remove singleplayer code
                                 // CraftBukkit end
                                     PlayerConnection.LOGGER.warn("{} moved too quickly! {},{},{}", this.player.getName(), Double.valueOf(d7), Double.valueOf(d8), Double.valueOf(d9));
                                     this.a(this.player.locX, this.player.locY, this.player.locZ, this.player.yaw, this.player.pitch);
@@ -614,10 +615,10 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
                                 }
                             }
 
-                            // Reaper start - Configurable collision check
+                            // Beast start - Configurable collision check
                             boolean checkCollision = !BeastConfig.disableCollisionCheck;
-                            boolean flag = checkCollision && worldserver.getCubes(this.player, this.player.getBoundingBox().shrink(0.0625D)).isEmpty(); // Reaper - Configurable collision check
-                            // Reaper end - Configurable collision check
+                            boolean flag = checkCollision && worldserver.getCubes(this.player, this.player.getBoundingBox().shrink(0.0625D)).isEmpty(); // Beast - Configurable collision check
+                            // Beast end - Configurable collision check
 
                             d7 = d4 - this.o;
                             d8 = d5 - this.p;
@@ -674,7 +675,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
 
                             this.player.setLocation(d4, d5, d6, f, f1);
                             this.player.checkMovement(this.player.locX - d0, this.player.locY - d1, this.player.locZ - d2);
-                            if (checkCollision && !this.player.noclip && !this.player.isSleeping()) { // Reaper - Configurable collision check
+                            if (checkCollision && !this.player.noclip && !this.player.isSleeping()) { // Beast - Configurable collision check
                                 boolean flag2 = worldserver.getCubes(this.player, this.player.getBoundingBox().shrink(0.0625D)).isEmpty();
 
                                 if (flag && (flag1 || !flag2)) {
@@ -879,18 +880,18 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
                 ItemStack itemstack = this.player.b(EnumHand.OFF_HAND);
 
                 // CraftBukkit start
-                /* // Reaper start - Optimize swap
+                /* // Beast start - Optimize swap
                 PlayerSwapHandItemsEvent swapItemsEvent = new PlayerSwapHandItemsEvent(getPlayer(), CraftItemStack.asBukkitCopy(itemstack), CraftItemStack.asBukkitCopy(this.player.b(EnumHand.MAIN_HAND)));
                 */
                 CraftItemStack mainHand = CraftItemStack.asCraftMirror(itemstack);
                 CraftItemStack offHand = CraftItemStack.asCraftMirror(this.player.b(EnumHand.MAIN_HAND));
                 PlayerSwapHandItemsEvent swapItemsEvent = new PlayerSwapHandItemsEvent(getPlayer(), mainHand.clone(), offHand.clone());
-                // Reaper end - Optimize swap
+                // Beast end - Optimize swap
                 this.server.getPluginManager().callEvent(swapItemsEvent);
                 if (swapItemsEvent.isCancelled()) {
                     return;
                 }
-                /* // Reaper start - Optimize swap
+                /* // Beast start - Optimize swap
                 itemstack = CraftItemStack.asNMSCopy(swapItemsEvent.getMainHandItem());
                 this.player.a(EnumHand.OFF_HAND, CraftItemStack.asNMSCopy(swapItemsEvent.getOffHandItem()));
                 // CraftBukkit end
@@ -906,7 +907,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
                 } else {
                     this.player.a(EnumHand.MAIN_HAND, CraftItemStack.asNMSCopy(swapItemsEvent.getMainHandItem()));
                 }
-                // Reaper end - Optimize swap
+                // Beast end - Optimize swap
             }
 
             return;
@@ -947,18 +948,18 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
         case START_DESTROY_BLOCK:
         case ABORT_DESTROY_BLOCK:
         case STOP_DESTROY_BLOCK:
-            // Reaper start - Don't allow digging in unloaded chunks
+            // Beast start - Don't allow digging in unloaded chunks
             if (!worldserver.isChunkLoaded(blockposition.getX() >> 4, blockposition.getZ() >> 4, true)) {
                 return;
             }
-            // Reaper end
+            // Beast end
             double d0 = this.player.locX - ((double) blockposition.getX() + 0.5D);
             double d1 = this.player.locY - ((double) blockposition.getY() + 0.5D) + 1.5D;
             double d2 = this.player.locZ - ((double) blockposition.getZ() + 0.5D);
             double d3 = d0 * d0 + d1 * d1 + d2 * d2;
 
             if (d3 > 36.0D) {
-                if (d3 < 49.0D) // Reaper - Don't send unreachable blocks
+                if (d3 < 49.0D) // Beast - Don't send unreachable blocks
                 if (worldserver.isChunkLoaded(blockposition.getX() >> 4, blockposition.getZ() >> 4, true)) // Paper - Fix block break desync - Don't send for unloaded chunks
                     this.sendPacket(new PacketPlayOutBlockChange(worldserver, blockposition)); // Paper - Fix block break desync
                 return;
@@ -986,11 +987,11 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
                         this.player.playerInteractManager.e();
                     }
 
-                    // Reaper start - Use custom constructor
+                    // Beast start - Use custom constructor
                     IBlockData blockData = worldserver.getType(blockposition);
                     if (blockData.getMaterial() != Material.AIR) {
                         this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(blockposition, blockData));
-                        // Reaper end
+                        // Beast end
                     }
                 }
 
@@ -1027,7 +1028,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
         PlayerConnectionUtils.ensureMainThread(packetplayinuseitem, this, this.player.x());
         if (this.player.isFrozen()) return; // CraftBukkit
         if (!checkLimit(packetplayinuseitem.timestamp)) return; // Spigot - check limit
-        if (player.activeContainer != player.defaultContainer && BeastConfig.dropUsePacketsInInventory) return; // Reaper
+        if (player.activeContainer != player.defaultContainer && BeastConfig.dropUsePacketsInInventory) return; // Beast
         WorldServer worldserver = this.minecraftServer.getWorldServer(this.player.dimension);
         EnumHand enumhand = packetplayinuseitem.c();
         ItemStack itemstack = this.player.b(enumhand);
@@ -1040,13 +1041,13 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
 
             chatmessage.getChatModifier().setColor(EnumChatFormat.RED);
             this.player.playerConnection.sendPacket(new PacketPlayOutChat(chatmessage, ChatMessageType.GAME_INFO));
-            // Reaper start - Don't send unreachable blocks
+            // Beast start - Don't send unreachable blocks
             return;
         }
 
         boolean isBlockInReach = this.player.d((double) blockposition.getX() + 0.5D, (double) blockposition.getY() + 0.5D, (double) blockposition.getZ() + 0.5D) < 64.0D;
         if (this.teleportPos == null && isBlockInReach && !this.minecraftServer.a(worldserver, blockposition, this.player) && worldserver.getWorldBorder().a(blockposition)) {
-            // Reaper end - Don't send unreachable blocks
+            // Beast end - Don't send unreachable blocks
             // CraftBukkit start - Check if we can actually do something over this large a distance
             Location eyeLoc = this.getPlayer().getEyeLocation();
             double reachDistance = NumberConversions.square(eyeLoc.getX() - blockposition.getX()) + NumberConversions.square(eyeLoc.getY() - blockposition.getY()) + NumberConversions.square(eyeLoc.getZ() - blockposition.getZ());
@@ -1057,12 +1058,12 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
             this.player.playerInteractManager.a(this.player, worldserver, itemstack, enumhand, blockposition, enumdirection, packetplayinuseitem.d(), packetplayinuseitem.e(), packetplayinuseitem.f());
         }
 
-        // Reaper start - Don't send unreachable blocks
+        // Beast start - Don't send unreachable blocks
         if (isBlockInReach) {
         this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(worldserver, blockposition));
         this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(worldserver, blockposition.shift(enumdirection)));
         }
-        // Reaper end - Don't send unreachable blocks
+        // Beast end - Don't send unreachable blocks
     }
 
     public void a(PacketPlayInBlockPlace packetplayinblockplace) {
@@ -1099,10 +1100,10 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
                 org.bukkit.event.player.PlayerInteractEvent event = CraftEventFactory.callPlayerInteractEvent(this.player, Action.RIGHT_CLICK_AIR, itemstack, enumhand);
                 cancelled = event.useItemInHand() == Event.Result.DENY;
             } else {
-                // Reaper start
+                // Beast start
                 if (player.playerInteractManager.firedInteractTick == MinecraftServer.currentTick && itemstack == player.playerInteractManager.firedInteractItem) {
                     player.playerInteractManager.firedInteractTick = 0;
-                    // Reaper end
+                    // Beast end
                     cancelled = player.playerInteractManager.interactResult;
                 } else {
                     org.bukkit.event.player.PlayerInteractEvent event = CraftEventFactory.callPlayerInteractEvent(player, Action.RIGHT_CLICK_BLOCK, movingobjectposition.a(), movingobjectposition.direction, itemstack, true, enumhand);
@@ -1111,11 +1112,11 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
             }
 
             if (cancelled) {
-                // Reaper start - Reduce inventory updates
+                // Beast start - Reduce inventory updates
                 if (BeastConfig.reduceInventoryUpdates) {
-                    com.github.ruviolence.reaper.InventoryUpdateHelper.onRightClick(this.player, enumhand, itemstack);
+                    InventoryUpdateHelper.onRightClick(this.player, enumhand, itemstack);
                 } else
-                // Reaper end - Reduce inventory updates
+                // Beast end - Reduce inventory updates
                 this.player.getBukkitEntity().updateInventory(); // SPIGOT-2524
             } else {
                 this.player.playerInteractManager.a(this.player, worldserver, itemstack, enumhand);
@@ -1185,7 +1186,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
         PlayerConnectionUtils.ensureMainThread(packetplayinresourcepackstatus, this, this.player.x());
         // Paper start
         //this.server.getPluginManager().callEvent(new PlayerResourcePackStatusEvent(getPlayer(), PlayerResourcePackStatusEvent.Status.values()[packetplayinresourcepackstatus.status.ordinal()]));
-        final PlayerResourcePackStatusEvent.Status status = PlayerResourcePackStatusEvent.Status.VALUES[packetplayinresourcepackstatus.status.ordinal()]; // Reaper - Single values array
+        final PlayerResourcePackStatusEvent.Status status = PlayerResourcePackStatusEvent.Status.VALUES[packetplayinresourcepackstatus.status.ordinal()]; // Beast - Single values array
         this.getPlayer().setResourcePackStatus(status);
         this.server.getPluginManager().callEvent(new PlayerResourcePackStatusEvent(getPlayer(), status));
         // Paper end
@@ -1226,7 +1227,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
             this.minecraftServer.getPlayerList().sendMessage(CraftChatMessage.fromString(quitMessage));
         }
         // CraftBukkit end
-        if (/*this.minecraftServer.R() && this.player.getName().equals(this.minecraftServer.Q())*/false) { // Reaper - Remove singleplayer code
+        if (/*this.minecraftServer.R() && this.player.getName().equals(this.minecraftServer.Q())*/false) { // Beast - Remove singleplayer code
             PlayerConnection.LOGGER.info("Stopping singleplayer server as player logged out");
             this.minecraftServer.safeShutdown();
         }
@@ -1234,7 +1235,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
     }
 
     public void sendPacket(final Packet<?> packet) {
-        /* // Reaper start - Always full chat visibility
+        /* // Beast start - Always full chat visibility
         if (packet instanceof PacketPlayOutChat) {
             PacketPlayOutChat packetplayoutchat = (PacketPlayOutChat) packet;
             EntityHuman.EnumChatVisibility entityhuman_enumchatvisibility = this.player.getChatFlags();
@@ -1247,7 +1248,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
                 return;
             }
         }
-        */ // Reaper end
+        */ // Beast end
 
         // CraftBukkit start
         if (packet == null || this.processedDisconnect) { // Spigot
@@ -1305,11 +1306,11 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
         }
 
         boolean isSync = packetplayinchat.a().startsWith("/");
-        if (isSync) { // Reaper - Optimize
+        if (isSync) { // Beast - Optimize
             PlayerConnectionUtils.ensureMainThread(packetplayinchat, this, this.player.x());
         }
         // CraftBukkit end
-        if (this.player.dead /*|| this.player.getChatFlags() == EntityHuman.EnumChatVisibility.HIDDEN*/) { // CraftBukkit - dead men tell no tales // Reaper - Always full chat visibility
+        if (this.player.dead /*|| this.player.getChatFlags() == EntityHuman.EnumChatVisibility.HIDDEN*/) { // CraftBukkit - dead men tell no tales // Beast - Always full chat visibility
             ChatMessage chatmessage = new ChatMessage("chat.cannotSend", new Object[0]);
 
             chatmessage.getChatModifier().setColor(EnumChatFormat.RED);
@@ -1372,13 +1373,13 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
                     }
                 } );
                 // Spigot end
-                /* // Reaper start - Always full chat visibility
+                /* // Beast start - Always full chat visibility
             } else if (this.player.getChatFlags() == EntityHuman.EnumChatVisibility.SYSTEM) { // Re-add "Command Only" flag check
                 ChatMessage chatmessage = new ChatMessage("chat.cannotSend", new Object[0]);
 
                 chatmessage.getChatModifier().setColor(EnumChatFormat.RED);
                 this.sendPacket(new PacketPlayOutChat(chatmessage));
-                */ // Reaper end
+                */ // Beast end
             } else if (true) {
                 this.chat(s, true);
                 // CraftBukkit end - the below is for reference. :)
@@ -1431,11 +1432,11 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
 
     // CraftBukkit start - add method
     public void chat(String s, boolean async) {
-        if (s.isEmpty() /*|| this.player.getChatFlags() == EntityHuman.EnumChatVisibility.HIDDEN*/) { // Reaper - Always full chat visibility
+        if (s.isEmpty() /*|| this.player.getChatFlags() == EntityHuman.EnumChatVisibility.HIDDEN*/) { // Beast - Always full chat visibility
             return;
         }
 
-        if (!async && s.charAt(0) == '/') { // Reaper - Optimize
+        if (!async && s.charAt(0) == '/') { // Beast - Optimize
             // Paper Start
             if (!org.spigotmc.AsyncCatcher.shuttingDown && !org.bukkit.Bukkit.isPrimaryThread()) {
                 final String fCommandLine = s;
@@ -1460,7 +1461,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
             }
             // Paper End
             this.handleCommand(s);
-        } else if (/*this.player.getChatFlags() == EntityHuman.EnumChatVisibility.SYSTEM*/false) { // Reaper - Always full chat visibility
+        } else if (/*this.player.getChatFlags() == EntityHuman.EnumChatVisibility.SYSTEM*/false) { // Beast - Always full chat visibility
             // Do nothing, this is coming from a plugin
         } else {
             Player player = this.getPlayer();
@@ -1726,7 +1727,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
                 if (packetplayinuseentity.a() == PacketPlayInUseEntity.EnumEntityUseAction.INTERACT
                         || packetplayinuseentity.a() == PacketPlayInUseEntity.EnumEntityUseAction.INTERACT_AT) {
                     // CraftBukkit start
-                    boolean triggerLeashUpdate = /*itemInHand != null*/true && itemInHand.getItem() == Items.LEAD && entity instanceof EntityInsentient; // Reaper - Optimize
+                    boolean triggerLeashUpdate = /*itemInHand != null*/true && itemInHand.getItem() == Items.LEAD && entity instanceof EntityInsentient; // Beast - Optimize
                     Item origItem = this.player.inventory.getItemInHand() == null ? null : this.player.inventory.getItemInHand().getItem();
                     PlayerInteractEntityEvent event;
                     if (packetplayinuseentity.a() == PacketPlayInUseEntity.EnumEntityUseAction.INTERACT) {
@@ -1748,29 +1749,29 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
                     }
 
                     if (event.isCancelled()) {
-                        // Reaper start - Reduce inventory updates
+                        // Beast start - Reduce inventory updates
                         if (BeastConfig.reduceInventoryUpdates) {
-                            com.github.ruviolence.reaper.InventoryUpdateHelper.onRightClick(this.player, packetplayinuseentity.b(), itemInHand);
+                            InventoryUpdateHelper.onRightClick(this.player, packetplayinuseentity.b(), itemInHand);
                         } else
-                        // Reaper end - Reduce inventory updates
+                        // Beast end - Reduce inventory updates
                         this.player.updateInventory(this.player.activeContainer); // Paper - Refresh player inventory
                         return;
                     }
                     // CraftBukkit end
                 }
 
-                // Reaper start - Replace 'if' with 'switch'
+                // Beast start - Replace 'if' with 'switch'
                 switch (packetplayinuseentity.a()) {
                 case INTERACT:
                     enumhand = packetplayinuseentity.b();
                     this.player.a(entity, enumhand);
                     // CraftBukkit start
                     if (!itemInHand.isEmpty() && itemInHand.getCount() <= -1) {
-                        // Reaper start - Reduce inventory updates
+                        // Beast start - Reduce inventory updates
                         if (BeastConfig.reduceInventoryUpdates) {
-                            com.github.ruviolence.reaper.InventoryUpdateHelper.onRightClick(this.player, enumhand, itemInHand);
+                            InventoryUpdateHelper.onRightClick(this.player, enumhand, itemInHand);
                         } else
-                        // Reaper end - Reduce inventory updates
+                        // Beast end - Reduce inventory updates
                         this.player.updateInventory(this.player.activeContainer);
                     }
                     // CraftBukkit end
@@ -1780,11 +1781,11 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
                     entity.a(this.player, packetplayinuseentity.c(), enumhand);
                     // CraftBukkit start
                     if (!itemInHand.isEmpty() && itemInHand.getCount() <= -1) {
-                        // Reaper start - Reduce inventory updates
+                        // Beast start - Reduce inventory updates
                         if (BeastConfig.reduceInventoryUpdates) {
-                            com.github.ruviolence.reaper.InventoryUpdateHelper.onRightClick(this.player, enumhand, itemInHand);
+                            InventoryUpdateHelper.onRightClick(this.player, enumhand, itemInHand);
                         } else
-                        // Reaper end - Reduce inventory updates
+                        // Beast end - Reduce inventory updates
                         this.player.updateInventory(this.player.activeContainer);
                     }
                     // CraftBukkit end
@@ -1800,17 +1801,17 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
 
                     // CraftBukkit start
                     if (!itemInHand.isEmpty() && itemInHand.getCount() <= -1) {
-                        // Reaper start - Reduce inventory updates
+                        // Beast start - Reduce inventory updates
                         if (BeastConfig.reduceInventoryUpdates) {
-                            com.github.ruviolence.reaper.InventoryUpdateHelper.onRightClick(this.player, packetplayinuseentity.b(), itemInHand);
+                            InventoryUpdateHelper.onRightClick(this.player, packetplayinuseentity.b(), itemInHand);
                         } else
-                        // Reaper end - Reduce inventory updates
+                        // Beast end - Reduce inventory updates
                         this.player.updateInventory(this.player.activeContainer);
                     }
                     // CraftBukkit end
                     break;
                 }
-                // Reaper end
+                // Beast end
             }
         }
         // Paper start - fire event
@@ -1885,7 +1886,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
                 if (packetplayinwindowclick.b() < -1 && packetplayinwindowclick.b() != -999) {
                     return;
                 }
-                if (this.player.activeContainer.slots.size() <= packetplayinwindowclick.b()) return; // Reaper - Fix click crash
+                if (this.player.activeContainer.slots.size() <= packetplayinwindowclick.b()) return; // Beast - Fix click crash
 
                 InventoryView inventory = this.player.activeContainer.getBukkitView();
                 SlotType type = CraftInventoryView.getSlotType(inventory, packetplayinwindowclick.b());
@@ -2356,7 +2357,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
 
             this.player.ping = (this.player.ping * 3 + i) / 4;
             this.g = false;
-        } else if (/*!this.player.getName().equals(this.minecraftServer.Q())*/true) { // Reaper - Remove singleplayer code
+        } else if (/*!this.player.getName().equals(this.minecraftServer.Q())*/true) { // Beast - Remove singleplayer code
             // Paper start - This needs to be handled on the main thread for plugins
             PlayerConnection.LOGGER.warn("{} sent an invalid keepalive! pending keepalive: {} got id: {} expected id: {}",
                     this.player.getName(), this.isPendingPing(), packetplayinkeepalive.a(), this.getKeepAliveID());
@@ -2431,13 +2432,13 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
 
     public void a(PacketPlayInSettings packetplayinsettings) {
         PlayerConnectionUtils.ensureMainThread(packetplayinsettings, this, this.player.x());
-        // Reaper start - do not accept invalid information
+        // Beast start - do not accept invalid information
         if (packetplayinsettings.getViewDistance() < 0) {
             LOGGER.warn("Disconnecting " + this.player.getName() + " for invalid view distance: " + packetplayinsettings.getViewDistance());
             this.disconnect("Invalid client settings");
             return;
         }
-        // Reaper end
+        // Beast end
         this.player.a(packetplayinsettings);
     }
 
@@ -2498,12 +2499,12 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
             packetdataserializer = packetplayincustompayload.b();
 
             try {
-                // Reaper start
+                // Beast start
                 itemstack1 = this.player.getItemInMainHand();
                 if (itemstack1.isEmpty() || itemstack1.getItem() != Items.WRITABLE_BOOK) {
                     return;
                 }
-                // Reaper end
+                // Beast end
                 itemstack = packetdataserializer.k();
                 if (itemstack.isEmpty()) {
                     return;
@@ -2513,14 +2514,14 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
                     throw new IOException("Invalid book tag!");
                 }
 
-                /* // Reaper start
+                /* // Beast start
                 itemstack1 = this.player.getItemInMainHand();
                 if (itemstack1.isEmpty()) {
                     return;
                 }
-                */ // Reaper end
+                */ // Beast end
 
-                if (itemstack.getItem() == Items.WRITABLE_BOOK /*&& itemstack.getItem() == itemstack1.getItem()*/) { // Reaper
+                if (itemstack.getItem() == Items.WRITABLE_BOOK /*&& itemstack.getItem() == itemstack1.getItem()*/) { // Beast
                     if (!validateBook(itemstack)) return; // Paper
                     itemstack1.a("pages", (NBTBase) itemstack.getTag().getList("pages", 8));
                     CraftEventFactory.handleEditBookEvent(player, itemstack1); // CraftBukkit
@@ -2542,12 +2543,12 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
                 packetdataserializer = packetplayincustompayload.b();
 
                 try {
-                    // Reaper start
+                    // Beast start
                     itemstack1 = this.player.getItemInMainHand();
                     if (itemstack1.isEmpty() || itemstack1.getItem() != Items.WRITABLE_BOOK) {
                         return;
                     }
-                    // Reaper end
+                    // Beast end
                     itemstack = packetdataserializer.k();
                     if (itemstack.isEmpty()) {
                         return;
@@ -2557,14 +2558,14 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
                         throw new IOException("Invalid book tag!");
                     }
 
-                    /* // Reaper start
+                    /* // Beast start
                     itemstack1 = this.player.getItemInMainHand();
                     if (itemstack1.isEmpty()) {
                         return;
                     }
-                    */ // Reaper end
+                    */ // Beast end
 
-                    if (itemstack.getItem() == Items.WRITABLE_BOOK /*&& itemstack1.getItem() == Items.WRITABLE_BOOK*/) { // Reaper
+                    if (itemstack.getItem() == Items.WRITABLE_BOOK /*&& itemstack1.getItem() == Items.WRITABLE_BOOK*/) { // Beast
                         if (!validateBook(itemstack)) return; // Paper
                         ItemStack itemstack2 = new ItemStack(Items.WRITTEN_BOOK);
 
@@ -2842,7 +2843,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
                     else if (packetplayincustompayload.a().equals("REGISTER")) {
                         try {
                             String channels = packetplayincustompayload.b().toString(com.google.common.base.Charsets.UTF_8);
-                            for (String channel : StringUtils.splitPreserveAllTokens(channels, '\0')) { // Reaper - Optimize
+                            for (String channel : StringUtils.splitPreserveAllTokens(channels, '\0')) { // Beast - Optimize
                                 getPlayer().addChannel(channel);
                             }
                         } catch (Exception ex) {
@@ -2852,7 +2853,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
                     } else if (packetplayincustompayload.a().equals("UNREGISTER")) {
                         try {
                             String channels = packetplayincustompayload.b().toString(com.google.common.base.Charsets.UTF_8);
-                            for (String channel : StringUtils.splitPreserveAllTokens(channels, '\0')) { // Reaper - Optimize
+                            for (String channel : StringUtils.splitPreserveAllTokens(channels, '\0')) { // Beast - Optimize
                                 getPlayer().removeChannel(channel);
                             }
                         } catch (Exception ex) {
diff --git a/src/main/java/net/minecraft/server/PlayerInteractManager.java b/src/main/java/net/minecraft/server/PlayerInteractManager.java
index 4f33c5d8df3166314b795372eb31c7fe5a12424b..d3ca13a87129d62bf437aca308849a90c8c1986f 100644
--- a/src/main/java/net/minecraft/server/PlayerInteractManager.java
+++ b/src/main/java/net/minecraft/server/PlayerInteractManager.java
@@ -3,7 +3,8 @@ package net.minecraft.server;
 // CraftBukkit start
 import java.util.ArrayList;
 
-import com.github.ruviolence.reaper.BeastConfig;
+import com.homomc.beast.BeastConfig;
+import com.homomc.beast.InventoryUpdateHelper;
 import org.bukkit.event.block.BlockBreakEvent;
 import org.bukkit.craftbukkit.event.CraftEventFactory;
 import org.bukkit.event.Event;
@@ -159,7 +160,7 @@ public class PlayerInteractManager {
                 if (block == Blocks.WOODEN_DOOR) {
                     // For some reason *BOTH* the bottom/top part have to be marked updated.
                     boolean bottom = data.get(BlockDoor.HALF) == BlockDoor.EnumDoorHalf.LOWER;
-                    ((EntityPlayer) this.player).playerConnection.sendPacket(new PacketPlayOutBlockChange(blockposition, data)); // Reaper - Use custom constructor
+                    ((EntityPlayer) this.player).playerConnection.sendPacket(new PacketPlayOutBlockChange(blockposition, data)); // Beast - Use custom constructor
                     ((EntityPlayer) this.player).playerConnection.sendPacket(new PacketPlayOutBlockChange(this.world, bottom ? blockposition.up() : blockposition.down()));
                 } else if (block == Blocks.TRAPDOOR) {
                     ((EntityPlayer) this.player).playerConnection.sendPacket(new PacketPlayOutBlockChange(blockposition, data));
@@ -228,7 +229,7 @@ public class PlayerInteractManager {
             }
         // CraftBukkit start - Force block reset to client
         } else {
-            com.github.ruviolence.reaper.InventoryUpdateHelper.onBlockBreak(this.player, this.player.getItemInMainHand()); // Reaper - Fix clientside sword damage
+            InventoryUpdateHelper.onBlockBreak(this.player, this.player.getItemInMainHand()); // Beast - Fix clientside sword damage
             this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(this.world, blockposition));
             // CraftBukkit end
         }
@@ -285,24 +286,24 @@ public class PlayerInteractManager {
         // CraftBukkit start - fire BlockBreakEvent
         BlockBreakEvent event = null;
 
-        if (this.player != null) { // Reaper - Optimize
+        if (this.player != null) { // Beast - Optimize
             org.bukkit.block.Block block = this.world.getWorld().getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ());
 
             // Sword + Creative mode pre-cancel
-            // Reaper start - Optimize
+            // Beast start - Optimize
             ItemStack itemInMainHand = this.player.getItemInMainHand();
             boolean isSwordNoBreak = this.gamemode.isCreative() && !itemInMainHand.isEmpty() && itemInMainHand.getItem() instanceof ItemSword;
-            // Reaper end
+            // Beast end
 
             // Tell client the block is gone immediately then process events
             // Don't tell the client if its a creative sword break because its not broken!
-            /* // Reaper start - Optimize
+            /* // Beast start - Optimize
             if (world.getTileEntity(blockposition) == null && !isSwordNoBreak) {
                 PacketPlayOutBlockChange packet = new PacketPlayOutBlockChange(this.world, blockposition);
                 packet.block = Blocks.AIR.getBlockData();
                 ((EntityPlayer) this.player).playerConnection.sendPacket(packet);
             }
-            */ // Reaper end
+            */ // Beast end
 
             event = new BlockBreakEvent(block, this.player.getBukkitEntity());
 
@@ -339,7 +340,7 @@ public class PlayerInteractManager {
                 if (tileentity != null) {
                     this.player.playerConnection.sendPacket(tileentity.getUpdatePacket());
                 }
-                com.github.ruviolence.reaper.InventoryUpdateHelper.onBlockBreak(this.player, itemInMainHand); // Reaper - Fix clientside sword damage
+                InventoryUpdateHelper.onBlockBreak(this.player, itemInMainHand); // Beast - Fix clientside sword damage
                 return false;
             }
         }
@@ -456,11 +457,11 @@ public class PlayerInteractManager {
                 }
 
                 if (!entityhuman.isHandRaised()) {
-                    // Reaper start - Reduce inventory updates
+                    // Beast start - Reduce inventory updates
                     if (BeastConfig.reduceInventoryUpdates) {
-                        com.github.ruviolence.reaper.InventoryUpdateHelper.onRightClick((EntityPlayer) entityhuman, enumhand, itemstack1);
+                        InventoryUpdateHelper.onRightClick((EntityPlayer) entityhuman, enumhand, itemstack1);
                     } else
-                    // Reaper end - Reduce inventory updates
+                    // Beast end - Reduce inventory updates
                     ((EntityPlayer) entityhuman).updateInventory(entityhuman.defaultContainer);
                 }
 
@@ -471,10 +472,10 @@ public class PlayerInteractManager {
 
     // CraftBukkit start - whole method
     public boolean interactResult = false;
-    // Reaper start
+    // Beast start
     public int firedInteractTick = 0;
     public ItemStack firedInteractItem = null;
-    // Reaper end
+    // Beast end
     public EnumInteractionResult a(EntityHuman entityhuman, World world, ItemStack itemstack, EnumHand enumhand, BlockPosition blockposition, EnumDirection enumdirection, float f, float f1, float f2) {
         IBlockData blockdata = world.getType(blockposition);
         EnumInteractionResult enuminteractionresult = EnumInteractionResult.FAIL;
@@ -483,7 +484,7 @@ public class PlayerInteractManager {
 
             if (this.gamemode == EnumGamemode.SPECTATOR) {
                 TileEntity tileentity = world.getTileEntity(blockposition);
-                cancelledBlock = !(/*tileentity instanceof ITileInventory ||*/ tileentity instanceof IInventory); // Reaper - Optimize
+                cancelledBlock = !(/*tileentity instanceof ITileInventory ||*/ tileentity instanceof IInventory); // Beast - Optimize
             }
 
             if (entityhuman.getCooldownTracker().a(itemstack.getItem())) {
@@ -499,10 +500,10 @@ public class PlayerInteractManager {
             }
 
             PlayerInteractEvent event = CraftEventFactory.callPlayerInteractEvent(entityhuman, Action.RIGHT_CLICK_BLOCK, blockposition, enumdirection, itemstack, cancelledBlock, enumhand);
-            // Reaper start
+            // Beast start
             firedInteractTick = MinecraftServer.currentTick;
             firedInteractItem = itemstack;
-            // Reaper end
+            // Beast end
             interactResult = event.useItemInHand() == Event.Result.DENY;
 
             if (event.useInteractedBlock() == Event.Result.DENY) {
@@ -519,7 +520,7 @@ public class PlayerInteractManager {
                     ((EntityPlayer) entityhuman).playerConnection.sendPacket(new PacketPlayOutCloseWindow());
                 } else if (blockdata.getBlock() instanceof BlockFlowerPot) {
                     // Send a block change to air and then send back the correct block, just to make the client happy
-                    PacketPlayOutBlockChange packet = new PacketPlayOutBlockChange(blockposition, Blocks.AIR.getBlockData()); // Reaper - Use custom constructor
+                    PacketPlayOutBlockChange packet = new PacketPlayOutBlockChange(blockposition, Blocks.AIR.getBlockData()); // Beast - Use custom constructor
                     this.player.playerConnection.sendPacket(packet);
 
                     this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(this.world, blockposition));
@@ -527,21 +528,21 @@ public class PlayerInteractManager {
                     TileEntity tileentity = this.world.getTileEntity(blockposition);
                     if (tileentity != null) {
                         player.playerConnection.sendPacket(tileentity.getUpdatePacket());
-                        // Reaper start - Reduce inventory updates
+                        // Beast start - Reduce inventory updates
                         if (BeastConfig.reduceInventoryUpdates) {
                             if (!((TileEntityFlowerPot) tileentity).getContents().isEmpty()) {
-                                com.github.ruviolence.reaper.InventoryUpdateHelper.onPotInteract(player);
+                                InventoryUpdateHelper.onPotInteract(player);
                             }
                         }
-                        // Reaper end - Reduce inventory updates
+                        // Beast end - Reduce inventory updates
                     }
                 // Paper end - extend Player Interact cancellation
                 }
-                // Reaper start - Reduce inventory updates
+                // Beast start - Reduce inventory updates
                 if (BeastConfig.reduceInventoryUpdates) {
-                    com.github.ruviolence.reaper.InventoryUpdateHelper.updateHeld((EntityPlayer) entityhuman, enumhand);
+                    InventoryUpdateHelper.updateHeld((EntityPlayer) entityhuman, enumhand);
                 } else
-                // Reaper end - Reduce inventory updates
+                // Beast end - Reduce inventory updates
                 ((EntityPlayer) entityhuman).getBukkitEntity().updateInventory(); // SPIGOT-2867
                 enuminteractionresult = (event.useItemInHand() != Event.Result.ALLOW) ? EnumInteractionResult.SUCCESS : EnumInteractionResult.PASS;
             } else if (this.gamemode == EnumGamemode.SPECTATOR) {
diff --git a/src/main/java/net/minecraft/server/PlayerInventory.java b/src/main/java/net/minecraft/server/PlayerInventory.java
index 56f8eab6f6e3b8e9eff4cc1e4f72819594298507..f519af8a4cfd2743c3fe964a6614112555f2dbe3 100644
--- a/src/main/java/net/minecraft/server/PlayerInventory.java
+++ b/src/main/java/net/minecraft/server/PlayerInventory.java
@@ -259,7 +259,7 @@ public class PlayerInventory implements IInventory {
         } else {
             j -= k;
             itemstack1.add(k);
-            // itemstack1.d(5); // Reaper - Clientside animation
+            // itemstack1.d(5); // Beast - Clientside animation
             return j;
         }
     }
@@ -311,7 +311,7 @@ public class PlayerInventory implements IInventory {
 
                     if (i >= 0) {
                         this.items.set(i, itemstack.cloneItemStack());
-                        // ((ItemStack) this.items.get(i)).d(5); // Reaper - Clientside animation
+                        // ((ItemStack) this.items.get(i)).d(5); // Beast - Clientside animation
                         itemstack.setCount(0);
                         return true;
                     } else if (this.player.abilities.canInstantlyBuild) {
@@ -360,7 +360,7 @@ public class PlayerInventory implements IInventory {
     }
 
     public void a(World world, ItemStack itemstack) {
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             while (!itemstack.isEmpty()) {
                 int i = this.firstPartial(itemstack);
 
@@ -473,7 +473,7 @@ public class PlayerInventory implements IInventory {
 
         for (i = 0; i < this.items.size(); ++i) {
             if (!((ItemStack) this.items.get(i)).isEmpty()) {
-                nbttagcompound = new NBTTagCompound(5); // Reaper - Use initial capacity
+                nbttagcompound = new NBTTagCompound(5); // Beast - Use initial capacity
                 nbttagcompound.setByte("Slot", (byte) i);
                 ((ItemStack) this.items.get(i)).save(nbttagcompound);
                 nbttaglist.add(nbttagcompound);
@@ -482,7 +482,7 @@ public class PlayerInventory implements IInventory {
 
         for (i = 0; i < this.armor.size(); ++i) {
             if (!((ItemStack) this.armor.get(i)).isEmpty()) {
-                nbttagcompound = new NBTTagCompound(5); // Reaper - Use initial capacity
+                nbttagcompound = new NBTTagCompound(5); // Beast - Use initial capacity
                 nbttagcompound.setByte("Slot", (byte) (i + 100));
                 ((ItemStack) this.armor.get(i)).save(nbttagcompound);
                 nbttaglist.add(nbttagcompound);
@@ -491,7 +491,7 @@ public class PlayerInventory implements IInventory {
 
         for (i = 0; i < this.extraSlots.size(); ++i) {
             if (!((ItemStack) this.extraSlots.get(i)).isEmpty()) {
-                nbttagcompound = new NBTTagCompound(5); // Reaper - Use initial capacity
+                nbttagcompound = new NBTTagCompound(5); // Beast - Use initial capacity
                 nbttagcompound.setByte("Slot", (byte) (i + 150));
                 ((ItemStack) this.extraSlots.get(i)).save(nbttagcompound);
                 nbttaglist.add(nbttagcompound);
@@ -512,7 +512,7 @@ public class PlayerInventory implements IInventory {
             ItemStack itemstack = new ItemStack(nbttagcompound);
 
             if (!itemstack.isEmpty()) {
-                if (/*j >= 0*/true && j < this.items.size()) { // Reaper - Optimize
+                if (/*j >= 0*/true && j < this.items.size()) { // Beast - Optimize
                     this.items.set(j, itemstack);
                 } else if (j >= 100 && j < this.armor.size() + 100) {
                     this.armor.set(j - 100, itemstack);
diff --git a/src/main/java/net/minecraft/server/PlayerList.java b/src/main/java/net/minecraft/server/PlayerList.java
index a916162ab75645c4b407687b1f4bab71b39eecce..7202c449726ae2c26490e896b4f9ed6625ea0116 100644
--- a/src/main/java/net/minecraft/server/PlayerList.java
+++ b/src/main/java/net/minecraft/server/PlayerList.java
@@ -1,6 +1,6 @@
 package net.minecraft.server;
 
-import com.github.ruviolence.reaper.BeastConfig;
+import com.homomc.beast.BeastConfig;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
@@ -67,10 +67,10 @@ public abstract class PlayerList {
     //private boolean hasWhitelist; // Paper - moved to whitelist object so not duplicated
     protected int maxPlayers;
     private int s;
-    /* // Reaper start - Remove singleplayer code
+    /* // Beast start - Remove singleplayer code
     private EnumGamemode t;
     private boolean u;
-    */ // Reaper end
+    */ // Beast end
     private int v;
 
     // CraftBukkit start
@@ -125,7 +125,7 @@ public abstract class PlayerList {
         entityplayer.yaw = newLoc.getYaw();
         entityplayer.pitch = newLoc.getPitch();
         entityplayer.dimension = ((CraftWorld) newLoc.getWorld()).getHandle().dimension;
-        entityplayer.resetBlockPos(); // Reaper - Cache current block pos
+        entityplayer.resetBlockPos(); // Beast - Cache current block pos
         // Paper end
 
         entityplayer.spawnIn(this.server.getWorldServer(entityplayer.dimension));
@@ -209,7 +209,7 @@ public abstract class PlayerList {
                 Iterator iterator1;
                 Entity entity1;
 
-                if (entityplayer.h(entity) < 256.0D) // Reaper
+                if (entityplayer.h(entity) < 256.0D) // Beast
                 if (entity.getUniqueID().equals(uuid)) {
                     entityplayer.a(entity, true);
                 } else {
@@ -380,7 +380,7 @@ public abstract class PlayerList {
         joinMessage = playerJoinEvent.getJoinMessage();
 
         if (joinMessage != null && joinMessage.length() > 0) {
-            for (IChatBaseComponent line : org.bukkit.craftbukkit.util.CraftChatMessage.fromStringFast(joinMessage)) { // Reaper
+            for (IChatBaseComponent line : org.bukkit.craftbukkit.util.CraftChatMessage.fromStringFast(joinMessage)) { // Beast
                 server.getPlayerList().sendAll(new PacketPlayOutChat(line));
             }
         }
@@ -499,7 +499,7 @@ public abstract class PlayerList {
         // CraftBukkit end
 
         ChunkIOExecutor.adjustPoolSize(this.getPlayerCount()); // CraftBukkit
-        worldserver.getTracker().untrackPlayer(entityplayer); // Reaper - Attempt to reduce memory leakage
+        worldserver.getTracker().untrackPlayer(entityplayer); // Beast - Attempt to reduce memory leakage
 
         return playerQuitEvent.getQuitMessage(); // CraftBukkit
     }
@@ -537,10 +537,10 @@ public abstract class PlayerList {
         PlayerLoginEvent event = new PlayerLoginEvent(player, hostname, ((java.net.InetSocketAddress) socketaddress).getAddress(), ((java.net.InetSocketAddress) loginlistener.networkManager.getRawAddress()).getAddress());
         String s;
 
-        // Reaper start - Fix MC-158900
+        // Beast start - Fix MC-158900
         GameProfileBanEntry gameprofilebanentry;
         if (getProfileBans().isBanned(gameprofile) && (gameprofilebanentry = getProfileBans().get(gameprofile)) != null) {
-            // Reaper end
+            // Beast end
 
             s = "You are banned from this server!\nReason: " + gameprofilebanentry.getReason();
             if (gameprofilebanentry.getExpires() != null) {
@@ -748,7 +748,7 @@ public abstract class PlayerList {
             entityplayer.playerConnection.sendPacket(new PacketPlayOutEntityEffect(entityplayer.getId(), mobEffect));
         }
 
-        entityplayer.setSneaking(false); // Reaper - Fix MC-10657
+        entityplayer.setSneaking(false); // Beast - Fix MC-10657
 
         // Fire advancement trigger
         CriterionTriggers.u.a(entityplayer, ((CraftWorld) fromWorld).getHandle().worldProvider.getDimensionManager(), worldserver.worldProvider.getDimensionManager());
@@ -836,10 +836,10 @@ public abstract class PlayerList {
         GameProfile gameprofile = entityplayer.getProfile();
         int i = this.isOp(gameprofile) ? this.operators.a(gameprofile) : 0;
 
-        /* // Reaper start - Remove singleplayer code
+        /* // Beast start - Remove singleplayer code
         i = this.server.R() && this.server.worldServer[0].getWorldData().u() ? 4 : i;
         i = this.u ? 4 : i;
-        */ // Reaper end
+        */ // Beast end
         this.b(entityplayer, i);
     }
 
@@ -896,7 +896,7 @@ public abstract class PlayerList {
         float f = entity.yaw;
         */
 
-        // worldserver.methodProfiler.a("moving"); // Reaper - Remove MethodProfiler
+        // worldserver.methodProfiler.a("moving"); // Beast - Remove MethodProfiler
         if (worldserver1.dimension == -1) {
             d0 = MathHelper.a(d0 / d2, worldserver1.getWorldBorder().b()+ 16.0D, worldserver1.getWorldBorder().d() - 16.0D);
             d1 = MathHelper.a(d1 / d2, worldserver1.getWorldBorder().c() + 16.0D, worldserver1.getWorldBorder().e() - 16.0D);
@@ -937,9 +937,9 @@ public abstract class PlayerList {
             */
         }
 
-        // worldserver.methodProfiler.b(); // Reaper - Remove MethodProfiler
+        // worldserver.methodProfiler.b(); // Beast - Remove MethodProfiler
         if (i != 1) {
-            // worldserver.methodProfiler.a("placing"); // Reaper - Remove MethodProfiler
+            // worldserver.methodProfiler.a("placing"); // Beast - Remove MethodProfiler
             d0 = (double) MathHelper.clamp((int) d0, -29999872, 29999872);
             d1 = (double) MathHelper.clamp((int) d1, -29999872, 29999872);
             /*
@@ -951,7 +951,7 @@ public abstract class PlayerList {
             }
             */
 
-            // worldserver.methodProfiler.b(); // Reaper - Remove MethodProfiler
+            // worldserver.methodProfiler.b(); // Beast - Remove MethodProfiler
         }
 
         // entity.spawnIn(worldserver1);
@@ -971,7 +971,7 @@ public abstract class PlayerList {
         float f = entity.yaw;
         */
 
-        // worldserver.methodProfiler.a("moving"); // Reaper - Remove MethodProfiler
+        // worldserver.methodProfiler.a("moving"); // Beast - Remove MethodProfiler
         entity.setPositionRotation(exit.getX(), exit.getY(), exit.getZ(), exit.getYaw(), exit.getPitch());
         if (entity.isAlive()) {
             worldserver.entityJoinedWorld(entity, false);
@@ -1012,9 +1012,9 @@ public abstract class PlayerList {
         }
         */
 
-        // worldserver.methodProfiler.b(); // Reaper - Remove MethodProfiler
+        // worldserver.methodProfiler.b(); // Beast - Remove MethodProfiler
         if (i != 1) {
-            // worldserver.methodProfiler.a("placing"); // Reaper - Remove MethodProfiler
+            // worldserver.methodProfiler.a("placing"); // Beast - Remove MethodProfiler
             /*
             d0 = (double) MathHelper.clamp((int) d0, -29999872, 29999872);
             d1 = (double) MathHelper.clamp((int) d1, -29999872, 29999872);
@@ -1034,7 +1034,7 @@ public abstract class PlayerList {
                 worldserver1.entityJoinedWorld(entity, false);
             }
 
-            // worldserver.methodProfiler.b(); // Reaper - Remove MethodProfiler
+            // worldserver.methodProfiler.b(); // Beast - Remove MethodProfiler
         }
 
         entity.spawnIn(worldserver1);
@@ -1043,7 +1043,7 @@ public abstract class PlayerList {
 
     public void tick() {
         if (++this.v > 600) {
-            // Reaper start - Async PlayerList
+            // Beast start - Async PlayerList
             if (BeastConfig.asyncPlayerList) {
                 List<Tuple<EntityPlayer, Packet<?>>> packetEntries = new ArrayList<>(this.players.size());
 
@@ -1064,7 +1064,7 @@ public abstract class PlayerList {
                     }
                 });
             } else {
-            // Reaper end
+            // Beast end
             // CraftBukkit start
             for (int i = 0; i < this.players.size(); ++i) {
                 final EntityPlayer target = (EntityPlayer) this.players.get(i);
@@ -1076,7 +1076,7 @@ public abstract class PlayerList {
                     }
                 })));
             }
-            } // Reaper - Async PlayerList
+            } // Beast - Async PlayerList
             // CraftBukkit end
             this.v = 0;
         }
@@ -1094,7 +1094,7 @@ public abstract class PlayerList {
     public void sendAll(Packet packet, EntityHuman entityhuman) {
         for (int i = 0; i < this.players.size(); ++i) {
             EntityPlayer entityplayer =  this.players.get(i);
-            if (/*entityhuman != null &&*/ entityhuman instanceof EntityPlayer && !entityplayer.getBukkitEntity().canSee(((EntityPlayer) entityhuman).getBukkitEntity())) { // Reaper - Optimize
+            if (/*entityhuman != null &&*/ entityhuman instanceof EntityPlayer && !entityplayer.getBukkitEntity().canSee(((EntityPlayer) entityhuman).getBukkitEntity())) { // Beast - Optimize
                 continue;
             }
             ((EntityPlayer) this.players.get(i)).playerConnection.sendPacket(packet);
@@ -1264,7 +1264,7 @@ public abstract class PlayerList {
     // Paper end
 
     public boolean isOp(GameProfile gameprofile) {
-        return this.operators.d(gameprofile) /*|| this.server.R() && this.server.worlds.get(0).getWorldData().u() && this.server.Q().equalsIgnoreCase(gameprofile.getName()) || this.u*/; // CraftBukkit // Reaper - Remove singleplayer code
+        return this.operators.d(gameprofile) /*|| this.server.R() && this.server.worlds.get(0).getWorldData().u() && this.server.Q().equalsIgnoreCase(gameprofile.getName()) || this.u*/; // CraftBukkit // Beast - Remove singleplayer code
     }
 
     @Nullable
@@ -1294,7 +1294,7 @@ public abstract class PlayerList {
             // Paper end
 
             // CraftBukkit start - Test if player receiving packet can see the source of the packet
-            if (/*entityhuman != null &&*/ entityhuman instanceof EntityPlayer && !entityplayer.getBukkitEntity().canSee(((EntityPlayer) entityhuman).getBukkitEntity())) { // Reaper - Optimize
+            if (/*entityhuman != null &&*/ entityhuman instanceof EntityPlayer && !entityplayer.getBukkitEntity().canSee(((EntityPlayer) entityhuman).getBukkitEntity())) { // Beast - Optimize
                continue;
             }
             // CraftBukkit end
@@ -1435,10 +1435,10 @@ public abstract class PlayerList {
     private void a(EntityPlayer entityplayer, EntityPlayer entityplayer1, World world) {
         if (entityplayer1 != null) {
             entityplayer.playerInteractManager.setGameMode(entityplayer1.playerInteractManager.getGameMode());
-            /* // Reaper start - Remove singleplayer code
+            /* // Beast start - Remove singleplayer code
         } else if (this.t != null) {
             entityplayer.playerInteractManager.setGameMode(this.t);
-            */ // Reaper end
+            */ // Beast end
         }
 
         entityplayer.playerInteractManager.b(world.getWorldData().getGameType());
@@ -1486,7 +1486,7 @@ public abstract class PlayerList {
         this.sendMessage(ichatbasecomponent, true);
     }
 
-    // Reaper start - Sends a message bypassing CraftBukkit's component fixer
+    // Beast start - Sends a message bypassing CraftBukkit's component fixer
     public void sendMessageToTeamOrAllPlayersFast(EntityHuman entityhuman, IChatBaseComponent ichatbasecomponent) {
         ScoreboardTeamBase scoreboardteambase = entityhuman.aY();
 
@@ -1510,7 +1510,7 @@ public abstract class PlayerList {
 
         this.sendAll(new PacketPlayOutChat(ichatbasecomponent, chatmessagetype));
     }
-    // Reaper end
+    // Beast end
 
     public ServerStatisticManager getStatisticManager(EntityPlayer entityhuman) {
         UUID uuid = entityhuman.getUniqueID();
@@ -1519,7 +1519,7 @@ public abstract class PlayerList {
 
         if (serverstatisticmanager == null) {
             File file = new File(this.server.getWorldServer(0).getDataManager().getDirectory(), "stats");
-            File file1 = new File(file, com.eatthepath.uuid.FastUUID.toString(uuid) + ".json"); // Reaper - Use FastUUID
+            File file1 = new File(file, com.eatthepath.uuid.FastUUID.toString(uuid) + ".json"); // Beast - Use FastUUID
 
             if (!file1.exists()) {
                 File file2 = new File(file, entityhuman.getName() + ".json");
@@ -1543,7 +1543,7 @@ public abstract class PlayerList {
 
         if (advancementdataplayer == null) {
             File file = new File(this.server.getWorldServer(0).getDataManager().getDirectory(), "advancements");
-            File file1 = new File(file, com.eatthepath.uuid.FastUUID.toString(uuid) + ".json"); // Reaper - Use FastUUID
+            File file1 = new File(file, com.eatthepath.uuid.FastUUID.toString(uuid) + ".json"); // Beast - Use FastUUID
 
             advancementdataplayer = new AdvancementDataPlayer(this.server, file1, entityplayer);
             // this.p.put(uuid, advancementdataplayer); // CraftBukkit
diff --git a/src/main/java/net/minecraft/server/PortalTravelAgent.java b/src/main/java/net/minecraft/server/PortalTravelAgent.java
index 266254a67a7cc569f6b67cbde9c57f8353625f7f..02ee4118b3f9fbf844a32df5d6feef3003c2eca6 100644
--- a/src/main/java/net/minecraft/server/PortalTravelAgent.java
+++ b/src/main/java/net/minecraft/server/PortalTravelAgent.java
@@ -1,6 +1,6 @@
 package net.minecraft.server;
 
-import com.github.ruviolence.reaper.BeastConfig;
+import com.homomc.beast.BeastConfig;
 import it.unimi.dsi.fastutil.longs.Long2ObjectMap;
 import it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap;
 import it.unimi.dsi.fastutil.objects.ObjectIterator;
@@ -36,11 +36,11 @@ public class PortalTravelAgent {
                 this.b(entity, f);
             }
         } else {
-            /* // Reaper start - Unused
+            /* // Beast start - Unused
             int i = MathHelper.floor(entity.locX);
             int j = MathHelper.floor(entity.locY) - 1;
             int k = MathHelper.floor(entity.locZ);
-            */ // Reaper end
+            */ // Beast end
             // CraftBukkit start - Modularize end portal creation
             BlockPosition created = this.createEndPortal(entity.locX, entity.locY, entity.locZ);
             entity.setPositionRotation((double) created.getX(), (double) created.getY(), (double) created.getZ(), entity.yaw, 0.0F);
@@ -145,8 +145,8 @@ public class PortalTravelAgent {
         Object object = BlockPosition.ZERO;
         long k = ChunkCoordIntPair.a(i, j);
 
-        PortalTravelAgent.ChunkCoordinatesPortal portaltravelagent_chunkcoordinatesportal = this.c.get(k); // Reaper - Optimize map get
-        if (portaltravelagent_chunkcoordinatesportal != null) { // Reaper - Optimize map get
+        PortalTravelAgent.ChunkCoordinatesPortal portaltravelagent_chunkcoordinatesportal = this.c.get(k); // Beast - Optimize map get
+        if (portaltravelagent_chunkcoordinatesportal != null) { // Beast - Optimize map get
 
             d0 = 0.0D;
             object = portaltravelagent_chunkcoordinatesportal;
@@ -155,12 +155,12 @@ public class PortalTravelAgent {
         } else {
             BlockPosition blockposition = new BlockPosition(x, y, z); // CraftBukkit
 
-            java.util.Set<ChunkCoordIntPair> notGeneratedChunks = BeastConfig.generatePortalExitChunks ? null : new HashSet<>(); // Reaper
+            java.util.Set<ChunkCoordIntPair> notGeneratedChunks = BeastConfig.generatePortalExitChunks ? null : new HashSet<>(); // Beast
             for (int l = -radius; l <= radius; ++l) {
                 BlockPosition blockposition1;
 
                 for (int i1 = -radius; i1 <= radius; ++i1) {
-                    // Reaper start
+                    // Beast start
                     if (notGeneratedChunks != null) {
                         ChunkCoordIntPair chunkCoord = new ChunkCoordIntPair((blockposition.getX() + l) >> 4, (blockposition.getZ() + i1) >> 4);
                         if (notGeneratedChunks.contains(chunkCoord)) continue;
@@ -169,7 +169,7 @@ public class PortalTravelAgent {
                             continue;
                         }
                     }
-                    // Reaper end
+                    // Beast end
                     for (BlockPosition blockposition2 = blockposition.a(l, this.world.ab() - 1 - blockposition.getY(), i1); blockposition2.getY() >= 0; blockposition2 = blockposition1) {
                         blockposition1 = blockposition2.down();
                         if (this.world.getType(blockposition2).getBlock() == Blocks.PORTAL) {
@@ -455,12 +455,12 @@ public class PortalTravelAgent {
 
                         // Paper start
                         BlockPosition pos = new BlockPosition(j3, k3, l3);
-                        // Reaper start - Fix broken portal creation
+                        // Beast start - Fix broken portal creation
                         if (flag1) {
                         nmsBlocks.putIfAbsent(pos, Blocks.OBSIDIAN.getBlockData());
                         bukkitBlocks.add(this.world.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ()));
                         }
-                        // Reaper end - Fix broken portal creation
+                        // Beast end - Fix broken portal creation
                         // Paper end
                     }
                 }
@@ -509,7 +509,7 @@ public class PortalTravelAgent {
 
     public void a(long i) {
         if (i % 100L == 0L) {
-            long j = i - BeastConfig.portalTravelCacheLife; // Reaper - Configurable portal travel cache
+            long j = i - BeastConfig.portalTravelCacheLife; // Beast - Configurable portal travel cache
             ObjectIterator objectiterator = this.c.values().iterator();
 
             while (objectiterator.hasNext()) {
@@ -523,7 +523,7 @@ public class PortalTravelAgent {
 
     }
     
-    // Reaper start - Configurable portal travel cache
+    // Beast start - Configurable portal travel cache
     public void expirePortal(BlockPosition portal) {
         for (ObjectIterator<ChunkCoordinatesPortal> iterator = this.c.values().iterator(); iterator.hasNext(); ) {
             if (iterator.next().equals(portal)) {
@@ -531,7 +531,7 @@ public class PortalTravelAgent {
             }
         }
     }
-    // Reaper end
+    // Beast end
 
     public class ChunkCoordinatesPortal extends BlockPosition {
 
diff --git a/src/main/java/net/minecraft/server/PotionRegistry.java b/src/main/java/net/minecraft/server/PotionRegistry.java
index 70c5d42b3b601429392da4c878a5f828017b0ea9..c5a5a90b62963bb99dd42b7eea7a6afc3afc7944 100644
--- a/src/main/java/net/minecraft/server/PotionRegistry.java
+++ b/src/main/java/net/minecraft/server/PotionRegistry.java
@@ -2,6 +2,8 @@ package net.minecraft.server;
 
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.UnmodifiableIterator;
+import com.homomc.beast.OldCombatHelper;
+
 import java.util.List;
 import javax.annotation.Nullable;
 
@@ -62,10 +64,10 @@ public class PotionRegistry {
         a("harming", new PotionRegistry(new MobEffect[] { new MobEffect(MobEffects.HARM, 1)}));
         a("strong_harming", new PotionRegistry("harming", new MobEffect[] { new MobEffect(MobEffects.HARM, 1, 1)}));
         a("poison", new PotionRegistry(new MobEffect[] { new MobEffect(MobEffects.POISON, 900)}));
-        a("long_poison", new PotionRegistry("poison", new MobEffect[] { new MobEffect(MobEffects.POISON, com.github.ruviolence.reaper.OldCombatHelper.POTION_DURATION_POISON_LONG)}));
-        a("strong_poison", new PotionRegistry("poison", new MobEffect[] { new MobEffect(MobEffects.POISON, com.github.ruviolence.reaper.OldCombatHelper.POTION_DURATION_POISON_STRONG, 1)}));
+        a("long_poison", new PotionRegistry("poison", new MobEffect[] { new MobEffect(MobEffects.POISON, OldCombatHelper.POTION_DURATION_POISON_LONG)}));
+        a("strong_poison", new PotionRegistry("poison", new MobEffect[] { new MobEffect(MobEffects.POISON, OldCombatHelper.POTION_DURATION_POISON_STRONG, 1)}));
         a("regeneration", new PotionRegistry(new MobEffect[] { new MobEffect(MobEffects.REGENERATION, 900)}));
-        a("long_regeneration", new PotionRegistry("regeneration", new MobEffect[] { new MobEffect(MobEffects.REGENERATION,  com.github.ruviolence.reaper.OldCombatHelper.POTION_DURATION_REGENERATION_LONG)}));
+        a("long_regeneration", new PotionRegistry("regeneration", new MobEffect[] { new MobEffect(MobEffects.REGENERATION,  OldCombatHelper.POTION_DURATION_REGENERATION_LONG)}));
         a("strong_regeneration", new PotionRegistry("regeneration", new MobEffect[] { new MobEffect(MobEffects.REGENERATION, 450, 1)}));
         a("strength", new PotionRegistry(new MobEffect[] { new MobEffect(MobEffects.INCREASE_DAMAGE, 3600)}));
         a("long_strength", new PotionRegistry("strength", new MobEffect[] { new MobEffect(MobEffects.INCREASE_DAMAGE, 9600)}));
diff --git a/src/main/java/net/minecraft/server/RecipeFireworks.java b/src/main/java/net/minecraft/server/RecipeFireworks.java
index f33c7601e5a9f8690be3c5509eaf3e86286cc448..41b82d93eb4c6665bfa39b3bb873d7219c68651f 100644
--- a/src/main/java/net/minecraft/server/RecipeFireworks.java
+++ b/src/main/java/net/minecraft/server/RecipeFireworks.java
@@ -88,14 +88,14 @@ public class RecipeFireworks extends ShapelessRecipes implements IRecipe { // Cr
                 nbttagcompound = new NBTTagCompound();
                 nbttagcompound1 = new NBTTagCompound();
                 byte b0 = 0;
-                it.unimi.dsi.fastutil.ints.IntArrayList arraylist = new it.unimi.dsi.fastutil.ints.IntArrayList(); // Reaper - FastUtil optimization
+                it.unimi.dsi.fastutil.ints.IntArrayList arraylist = new it.unimi.dsi.fastutil.ints.IntArrayList(); // Beast - FastUtil optimization
 
                 for (int i2 = 0; i2 < inventorycrafting.getSize(); ++i2) {
                     ItemStack itemstack2 = inventorycrafting.getItem(i2);
 
                     if (!itemstack2.isEmpty()) {
                         if (itemstack2.getItem() == Items.DYE) {
-                            arraylist.add(ItemDye.a[itemstack2.getData() & 15]); // Reaper - FastUtil optimization
+                            arraylist.add(ItemDye.a[itemstack2.getData() & 15]); // Beast - FastUtil optimization
                         } else if (itemstack2.getItem() == Items.GLOWSTONE_DUST) {
                             nbttagcompound1.setBoolean("Flicker", true);
                         } else if (itemstack2.getItem() == Items.DIAMOND) {
@@ -115,7 +115,7 @@ public class RecipeFireworks extends ShapelessRecipes implements IRecipe { // Cr
                 int[] aint = new int[arraylist.size()];
 
                 for (int j2 = 0; j2 < aint.length; ++j2) {
-                    aint[j2] = arraylist.getInt(j2); // Reaper - FastUtil optimization
+                    aint[j2] = arraylist.getInt(j2); // Beast - FastUtil optimization
                 }
 
                 nbttagcompound1.setIntArray("Colors", aint);
@@ -124,14 +124,14 @@ public class RecipeFireworks extends ShapelessRecipes implements IRecipe { // Cr
                 this.a.setTag(nbttagcompound);
                 return true;
             } else if (j == 0 && i == 0 && l == 1 && k > 0 && k == i1) {
-                it.unimi.dsi.fastutil.ints.IntArrayList arraylist1 = new it.unimi.dsi.fastutil.ints.IntArrayList(); // Reaper - FastUtil optimization
+                it.unimi.dsi.fastutil.ints.IntArrayList arraylist1 = new it.unimi.dsi.fastutil.ints.IntArrayList(); // Beast - FastUtil optimization
 
                 for (int k2 = 0; k2 < inventorycrafting.getSize(); ++k2) {
                     ItemStack itemstack3 = inventorycrafting.getItem(k2);
 
                     if (!itemstack3.isEmpty()) {
                         if (itemstack3.getItem() == Items.DYE) {
-                            arraylist1.add(ItemDye.a[itemstack3.getData() & 15]); // Reaper - FastUtil optimization
+                            arraylist1.add(ItemDye.a[itemstack3.getData() & 15]); // Beast - FastUtil optimization
                         } else if (itemstack3.getItem() == Items.FIREWORK_CHARGE) {
                             this.a = itemstack3.cloneItemStack();
                             this.a.setCount(1);
@@ -142,7 +142,7 @@ public class RecipeFireworks extends ShapelessRecipes implements IRecipe { // Cr
                 int[] aint1 = new int[arraylist1.size()];
 
                 for (l1 = 0; l1 < aint1.length; ++l1) {
-                    aint1[l1] = arraylist1.getInt(l1); // Reaper - FastUtil optimization
+                    aint1[l1] = arraylist1.getInt(l1); // Beast - FastUtil optimization
                 }
 
                 if (!this.a.isEmpty() && this.a.hasTag()) {
diff --git a/src/main/java/net/minecraft/server/RecipesBanner.java b/src/main/java/net/minecraft/server/RecipesBanner.java
index e5699cc95d2b07e39a678c94304cd2919f90c306..f1d97e0c0bb7f49aba8fd92126e0c8df9271174e 100644
--- a/src/main/java/net/minecraft/server/RecipesBanner.java
+++ b/src/main/java/net/minecraft/server/RecipesBanner.java
@@ -106,7 +106,7 @@ public class RecipesBanner {
 
         @Nullable
         private EnumBannerPatternType c(InventoryCrafting inventorycrafting) {
-            EnumBannerPatternType[] aenumbannerpatterntype = EnumBannerPatternType.VALUES; // Reaper - Single values array
+            EnumBannerPatternType[] aenumbannerpatterntype = EnumBannerPatternType.VALUES; // Beast - Single values array
             int i = aenumbannerpatterntype.length;
 
             for (int j = 0; j < i; ++j) {
diff --git a/src/main/java/net/minecraft/server/RegionFile.java b/src/main/java/net/minecraft/server/RegionFile.java
index 15118f81a4ad3a8c9e97797788c1219c132728b8..b96ff8d2b0206e488a030e69c5896fceecef91ab 100644
--- a/src/main/java/net/minecraft/server/RegionFile.java
+++ b/src/main/java/net/minecraft/server/RegionFile.java
@@ -3,7 +3,7 @@ package net.minecraft.server;
 import com.destroystokyo.paper.exception.ServerInternalException;
 import com.github.luben.zstd.ZstdInputStream;
 import com.github.luben.zstd.ZstdOutputStream;
-import com.github.ruviolence.reaper.BeastConfig;
+import com.homomc.beast.BeastConfig;
 import com.google.common.collect.Lists;
 import java.io.BufferedInputStream;
 import java.io.BufferedOutputStream;
@@ -84,7 +84,7 @@ public class RegionFile {
             while (header.hasRemaining())  {
                 if (this.c.getChannel().read(header) == -1) throw new EOFException();
             }
-            ((java.nio.Buffer) header).clear(); // Reaper - Fix JDK8 support
+            ((java.nio.Buffer) header).clear(); // Beast - Fix JDK8 support
             IntBuffer headerAsInts = header.asIntBuffer();
             initOversizedState();
             // Paper End
@@ -413,11 +413,11 @@ public class RegionFile {
     }
 
     private File getOversizedMetaFile() {
-        return new File(getFile().getParentFile(), org.apache.commons.lang3.StringUtils.replace(getFile().getName(), ".mca", "") + ".oversized.nbt"); // Reaper - Optimize
+        return new File(getFile().getParentFile(), org.apache.commons.lang3.StringUtils.replace(getFile().getName(), ".mca", "") + ".oversized.nbt"); // Beast - Optimize
     }
 
     private File getOversizedFile(int x, int z) {
-        return new File(getFile().getParentFile(), org.apache.commons.lang3.StringUtils.replace(getFile().getName(), ".mca", "") + "_oversized_" + x + "_" + z + ".nbt"); // Reaper - Optimize
+        return new File(getFile().getParentFile(), org.apache.commons.lang3.StringUtils.replace(getFile().getName(), ".mca", "") + "_oversized_" + x + "_" + z + ".nbt"); // Beast - Optimize
     }
 
     void writeOversizedData(int x, int z, NBTTagCompound oversizedData) throws IOException {
diff --git a/src/main/java/net/minecraft/server/RegionFileCache.java b/src/main/java/net/minecraft/server/RegionFileCache.java
index ca307cfb40d49525ce1d86685b9e2a4234e580d5..a4517fe2e007944c79b582100a00224987b7fe1f 100644
--- a/src/main/java/net/minecraft/server/RegionFileCache.java
+++ b/src/main/java/net/minecraft/server/RegionFileCache.java
@@ -165,7 +165,7 @@ public class RegionFileCache {
     private static NBTTagCompound readOversizedChunk(RegionFile regionfile, int i, int j) throws IOException {
         synchronized (regionfile) {
             try (DataInputStream datainputstream = regionfile.getReadStream(i & 31, j & 31)) {
-                // Reaper start - Handle bad chunks more gracefully - also handle similarly with oversized data
+                // Beast start - Handle bad chunks more gracefully - also handle similarly with oversized data
                 NBTTagCompound oversizedData;
 
                 try {
@@ -180,7 +180,7 @@ public class RegionFileCache {
                 } catch (Exception ex) {
                     return null;
                 }
-                // Reaper end
+                // Beast end
                 if (oversizedData == null) {
                     return chunk;
                 }
@@ -258,13 +258,13 @@ public class RegionFileCache {
             return null;
         }
 
-        // Reaper start - Handle bad chunks more gracefully
+        // Beast start - Handle bad chunks more gracefully
         try {
             return NBTCompressedStreamTools.a(datainputstream);
         } catch (Exception ex) {
             return null;
         }
-        // Reaper end
+        // Beast end
     }
 
     public static void e(File file, int i, int j, NBTTagCompound nbttagcompound) throws IOException { // Paper - remove synchronization
diff --git a/src/main/java/net/minecraft/server/RegistryBlockID.java b/src/main/java/net/minecraft/server/RegistryBlockID.java
index ec70480b39dc524762c77ab7a7ada533dec06a3b..f521d99e9bae151216b400889641e009c96b922c 100644
--- a/src/main/java/net/minecraft/server/RegistryBlockID.java
+++ b/src/main/java/net/minecraft/server/RegistryBlockID.java
@@ -3,20 +3,20 @@ package net.minecraft.server;
 import com.google.common.base.Predicates;
 import com.google.common.collect.Iterators;
 import com.google.common.collect.Lists;
-import java.util.IdentityHashMap;
+
 import java.util.Iterator;
 import java.util.List;
 import javax.annotation.Nullable;
 
-// Reaper start - FastUtil optimization
-import com.github.ruviolence.reaper.IdentityStrategy;
+// Beast start - FastUtil optimization
+import com.homomc.beast.IdentityStrategy;
 import it.unimi.dsi.fastutil.objects.Object2IntMap;
 import it.unimi.dsi.fastutil.objects.Object2IntOpenCustomHashMap;
-// Reaper end
+// Beast end
 
 public class RegistryBlockID<T> implements Registry<T> {
 
-    private final Object2IntMap<T> a; // Reaper - FastUtil optimization
+    private final Object2IntMap<T> a; // Beast - FastUtil optimization
     private final List<T> b;
 
     public RegistryBlockID() {
@@ -25,10 +25,10 @@ public class RegistryBlockID<T> implements Registry<T> {
 
     public RegistryBlockID(int i) {
         this.b = Lists.newArrayListWithExpectedSize(i);
-        // Reaper start - FastUtil optimization
+        // Beast start - FastUtil optimization
         this.a = new Object2IntOpenCustomHashMap<>(i, new IdentityStrategy<>());
         this.a.defaultReturnValue(-1);
-        // Reaper end
+        // Beast end
     }
 
     public void a(T t0, int i) {
@@ -42,7 +42,7 @@ public class RegistryBlockID<T> implements Registry<T> {
     }
 
     public int getId(T t0) {
-        if (true) return this.a.getInt(t0); // Reaper - FastUtil optimization
+        if (true) return this.a.getInt(t0); // Beast - FastUtil optimization
         Integer integer = (Integer) this.a.get(t0);
 
         return integer == null ? -1 : integer.intValue();
diff --git a/src/main/java/net/minecraft/server/RegistryBlocks.java b/src/main/java/net/minecraft/server/RegistryBlocks.java
index 845a56df7fedb3fcd62fe5dccde764b54a0aff13..0a36d12d975a7e2536d20c7710073c46bbb809e9 100644
--- a/src/main/java/net/minecraft/server/RegistryBlocks.java
+++ b/src/main/java/net/minecraft/server/RegistryBlocks.java
@@ -18,7 +18,7 @@ public class RegistryBlocks<K, V> extends RegistryMaterials<K, V> {
         if (this.d.equals(k0)) {
             this.e = v0;
         }
-        // Reaper start - Lithium: ai/pathing/LandPathNodeMaker
+        // Beast start - Lithium: ai/pathing/LandPathNodeMaker
         if (v0 instanceof Block && DispenserRegistry.isBlocksInitialized) {
             Block block = (Block) v0;
             BlockStateList blockStateList = block.s();
@@ -26,7 +26,7 @@ public class RegistryBlocks<K, V> extends RegistryMaterials<K, V> {
                 ((BlockStateList.BlockData) data).initPathTypeCache();
             }
         }
-        // Reaper end        
+        // Beast end
 
         super.a(i, k0, v0);
     }
diff --git a/src/main/java/net/minecraft/server/ScoreboardServer.java b/src/main/java/net/minecraft/server/ScoreboardServer.java
index b699258ffe04ae1ba4d83e868457d19b8d9bc599..aaed8678ec8763dde1b7f7bd9706feeeddc78c6f 100644
--- a/src/main/java/net/minecraft/server/ScoreboardServer.java
+++ b/src/main/java/net/minecraft/server/ScoreboardServer.java
@@ -66,7 +66,7 @@ public class ScoreboardServer extends Scoreboard {
         if (super.addPlayerToTeam(s, s1)) {
             ScoreboardTeam scoreboardteam = this.getTeam(s1);
 
-            this.sendAll(new PacketPlayOutScoreboardTeam(scoreboardteam, java.util.Collections.singletonList(s), 3)); // Reaper - Optimize
+            this.sendAll(new PacketPlayOutScoreboardTeam(scoreboardteam, java.util.Collections.singletonList(s), 3)); // Beast - Optimize
             this.b();
             return true;
         } else {
@@ -76,7 +76,7 @@ public class ScoreboardServer extends Scoreboard {
 
     public void removePlayerFromTeam(String s, ScoreboardTeam scoreboardteam) {
         super.removePlayerFromTeam(s, scoreboardteam);
-        this.sendAll(new PacketPlayOutScoreboardTeam(scoreboardteam, java.util.Collections.singletonList(s), 4)); // Reaper - Optimize
+        this.sendAll(new PacketPlayOutScoreboardTeam(scoreboardteam, java.util.Collections.singletonList(s), 4)); // Beast - Optimize
         this.b();
     }
 
diff --git a/src/main/java/net/minecraft/server/ScoreboardTeamBase.java b/src/main/java/net/minecraft/server/ScoreboardTeamBase.java
index 5868b6500ec39a427d917d7b4684ef9ff296bbf1..e283a9d387312c970beb8fed19b2f8a4b4f211fa 100644
--- a/src/main/java/net/minecraft/server/ScoreboardTeamBase.java
+++ b/src/main/java/net/minecraft/server/ScoreboardTeamBase.java
@@ -34,7 +34,7 @@ public abstract class ScoreboardTeamBase {
         private static final Map<String, ScoreboardTeamBase.EnumTeamPush> g = Maps.newHashMap();
         public final String e;
         public final int f;
-        public static final ScoreboardTeamBase.EnumTeamPush[] VALUES = values(); // Reaper - Single values array
+        public static final ScoreboardTeamBase.EnumTeamPush[] VALUES = values(); // Beast - Single values array
 
         public static String[] a() {
             return (String[]) ScoreboardTeamBase.EnumTeamPush.g.keySet().toArray(new String[ScoreboardTeamBase.EnumTeamPush.g.size()]);
@@ -70,7 +70,7 @@ public abstract class ScoreboardTeamBase {
         private static final Map<String, ScoreboardTeamBase.EnumNameTagVisibility> g = Maps.newHashMap();
         public final String e;
         public final int f;
-        public static final ScoreboardTeamBase.EnumNameTagVisibility[] VALUES = values(); // Reaper - Single values array
+        public static final ScoreboardTeamBase.EnumNameTagVisibility[] VALUES = values(); // Beast - Single values array
 
         public static String[] a() {
             return (String[]) ScoreboardTeamBase.EnumNameTagVisibility.g.keySet().toArray(new String[ScoreboardTeamBase.EnumNameTagVisibility.g.size()]);
diff --git a/src/main/java/net/minecraft/server/ServerConnection.java b/src/main/java/net/minecraft/server/ServerConnection.java
index 16721840676643e772571f14caa329aee1f17df7..1f3a753bc83e62873b70857bc5a3ae227ebbdeeb 100644
--- a/src/main/java/net/minecraft/server/ServerConnection.java
+++ b/src/main/java/net/minecraft/server/ServerConnection.java
@@ -61,7 +61,7 @@ public class ServerConnection {
     private final List<ChannelFuture> g = Collections.synchronizedList(Lists.newArrayList());
     private final List<NetworkManager> h = Collections.synchronizedList(Lists.newArrayList());
     // Paper start - prevent blocking on adding a new network manager while the server is ticking
-    // Reaper start
+    // Beast start
     private final java.util.Queue<NetworkManager> pending = new java.util.concurrent.ConcurrentLinkedQueue<>();
     private static final boolean disableFlushConsolidation = Boolean.getBoolean("Paper.disableFlushConsolidate"); // Paper
     private void addPending() {
@@ -69,7 +69,7 @@ public class ServerConnection {
         while ((manager = pending.poll()) != null) {
             this.h.add(manager);
             manager.isPending = false;
-            // Reaper end
+            // Beast end
         }
     }
     // Paper end
@@ -80,7 +80,7 @@ public class ServerConnection {
     }
 
     public void a(InetAddress inetaddress, int i) throws IOException {
-        // List list = this.g; // Reaper - Unused
+        // List list = this.g; // Beast - Unused
 
         synchronized (this.g) {
             Class oclass;
@@ -96,10 +96,10 @@ public class ServerConnection {
                 ServerConnection.e.info("Using default channel type");
             }
 
-            // Reaper start - Indicate Velocity natives in use
-            ServerConnection.e.info("Reaper: using " + com.velocitypowered.natives.util.Natives.compress.getLoadedVariant() + " compression from Velocity.");
-            ServerConnection.e.info("Reaper: using " + com.velocitypowered.natives.util.Natives.cipher.getLoadedVariant() + " cipher from Velocity.");
-            // Reaper end
+            // Beast start - Indicate Velocity natives in use
+            ServerConnection.e.info("Beast: using " + com.velocitypowered.natives.util.Natives.compress.getLoadedVariant() + " compression from Velocity.");
+            ServerConnection.e.info("Beast: using " + com.velocitypowered.natives.util.Natives.cipher.getLoadedVariant() + " cipher from Velocity.");
+            // Beast end
 
             this.g.add(((ServerBootstrap) ((ServerBootstrap) (new ServerBootstrap()).channel(oclass)).childHandler(new ChannelInitializer() {
                 protected void initChannel(Channel channel) throws Exception {
@@ -108,14 +108,14 @@ public class ServerConnection {
                     } catch (ChannelException channelexception) {
                         ;
                     }
-                    // Reaper start
+                    // Beast start
                     try {
                         channel.config().setOption(ChannelOption.IP_TOS, 0x18);
                     } catch (ChannelException channelexception) {
                         ;
                     }
-                    // Reaper end
-                    if (!disableFlushConsolidation) channel.pipeline().addFirst(new io.netty.handler.flush.FlushConsolidationHandler()); // Reaper
+                    // Beast end
+                    if (!disableFlushConsolidation) channel.pipeline().addFirst(new io.netty.handler.flush.FlushConsolidationHandler()); // Beast
                     channel.pipeline().addLast("timeout", new ReadTimeoutHandler(30)).addLast("legacy_query", new LegacyPingHandler(ServerConnection.this)).addLast("splitter", new PacketSplitter()).addLast("decoder", new PacketDecoder(EnumProtocolDirection.SERVERBOUND)).addLast("prepender", new PacketPrepender()).addLast("encoder", new PacketEncoder(EnumProtocolDirection.CLIENTBOUND));
                     NetworkManager networkmanager = new NetworkManager(EnumProtocolDirection.SERVERBOUND);
 
@@ -144,7 +144,7 @@ public class ServerConnection {
     }
 
     public void c() {
-        // List list = this.h; // Reaper - Unused
+        // List list = this.h; // Beast - Unused
 
         synchronized (this.h) {
             // Spigot Start
@@ -188,7 +188,7 @@ public class ServerConnection {
                                 public void operationComplete(Future future) throws Exception {
                                     networkmanager.close(chatcomponenttext);
                                 }
-                            }); // Reaper
+                            }); // Beast
                             networkmanager.stopReading();
                         }
                     } else {
diff --git a/src/main/java/net/minecraft/server/ServerPing.java b/src/main/java/net/minecraft/server/ServerPing.java
index 885e4f5f7e8a41b56a5a5dfc4f907aa8f4a3968a..a971ef7610f4f34a54ae49fadfaa26135b1ef85e 100644
--- a/src/main/java/net/minecraft/server/ServerPing.java
+++ b/src/main/java/net/minecraft/server/ServerPing.java
@@ -194,7 +194,7 @@ public class ServerPing {
                             JsonObject jsonobject1 = ChatDeserializer.m(jsonarray.get(i), "player[" + i + "]");
                             String s = ChatDeserializer.h(jsonobject1, "id");
 
-                            agameprofile[i] = new GameProfile(com.eatthepath.uuid.FastUUID.parseUUID(s), ChatDeserializer.h(jsonobject1, "name")); // Reaper - Use FastUUID
+                            agameprofile[i] = new GameProfile(com.eatthepath.uuid.FastUUID.parseUUID(s), ChatDeserializer.h(jsonobject1, "name")); // Beast - Use FastUUID
                         }
 
                         serverping_serverpingplayersample.a(agameprofile);
@@ -217,7 +217,7 @@ public class ServerPing {
                         JsonObject jsonobject1 = new JsonObject();
                         UUID uuid = serverping_serverpingplayersample.c()[i].getId();
 
-                        jsonobject1.addProperty("id", uuid == null ? "" : com.eatthepath.uuid.FastUUID.toString(uuid)); // Reaper - Use FastUUID
+                        jsonobject1.addProperty("id", uuid == null ? "" : com.eatthepath.uuid.FastUUID.toString(uuid)); // Beast - Use FastUUID
                         jsonobject1.addProperty("name", serverping_serverpingplayersample.c()[i].getName());
                         jsonarray.add(jsonobject1);
                     }
diff --git a/src/main/java/net/minecraft/server/ShapeDetector.java b/src/main/java/net/minecraft/server/ShapeDetector.java
index 9a36a270054e29c7947df67e0a61e1c4dc18be4d..e5fc2eb5ecb0dab9b259b980c23268b29b0752a0 100644
--- a/src/main/java/net/minecraft/server/ShapeDetector.java
+++ b/src/main/java/net/minecraft/server/ShapeDetector.java
@@ -67,12 +67,12 @@ public class ShapeDetector {
 
         while (iterator.hasNext()) {
             BlockPosition blockposition1 = (BlockPosition) iterator.next();
-            EnumDirection[] aenumdirection = EnumDirection.VALUES; // Reaper - Single values array
+            EnumDirection[] aenumdirection = EnumDirection.VALUES; // Beast - Single values array
             int j = aenumdirection.length;
 
             for (int k = 0; k < j; ++k) {
                 EnumDirection enumdirection = aenumdirection[k];
-                EnumDirection[] aenumdirection1 = EnumDirection.VALUES; // Reaper - Single values array
+                EnumDirection[] aenumdirection1 = EnumDirection.VALUES; // Beast - Single values array
                 int l = aenumdirection1.length;
 
                 for (int i1 = 0; i1 < l; ++i1) {
diff --git a/src/main/java/net/minecraft/server/SlotFurnaceResult.java b/src/main/java/net/minecraft/server/SlotFurnaceResult.java
index 4b9320201f6d6151d1a871cd53623f9180954e39..835f04ef1d98d176a062e90b881c5e43325db9b1 100644
--- a/src/main/java/net/minecraft/server/SlotFurnaceResult.java
+++ b/src/main/java/net/minecraft/server/SlotFurnaceResult.java
@@ -40,7 +40,7 @@ public class SlotFurnaceResult extends Slot {
 
     protected void c(ItemStack itemstack) {
         itemstack.a(this.a.world, this.a, this.b);
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             int i = this.b;
             float f = RecipesFurnace.getInstance().b(itemstack);
             int j;
diff --git a/src/main/java/net/minecraft/server/SpawnerCreature.java b/src/main/java/net/minecraft/server/SpawnerCreature.java
index a754bf88bba0b552190a34338750f585cdb09a45..01c758f90ad430af182449d4075bb753d9ae5b87 100644
--- a/src/main/java/net/minecraft/server/SpawnerCreature.java
+++ b/src/main/java/net/minecraft/server/SpawnerCreature.java
@@ -108,7 +108,7 @@ public final class SpawnerCreature {
 
             int j1 = 0;
             BlockPosition blockposition = worldserver.getSpawn();
-            EnumCreatureType[] aenumcreaturetype = EnumCreatureType.VALUES; // Reaper - Single values array
+            EnumCreatureType[] aenumcreaturetype = EnumCreatureType.VALUES; // Beast - Single values array
 
             j = aenumcreaturetype.length;
 
@@ -178,13 +178,13 @@ public final class SpawnerCreature {
                                         if (j4 < i4) {
                                             label113: {
                                                 j3 += worldserver.random.nextInt(6) - worldserver.random.nextInt(6);
-                                                // k3 += worldserver.random.nextInt(1) - worldserver.random.nextInt(1);  // Reaper - Optimize
+                                                // k3 += worldserver.random.nextInt(1) - worldserver.random.nextInt(1);  // Beast - Optimize
                                                 l3 += worldserver.random.nextInt(6) - worldserver.random.nextInt(6);
-                                                blockposition_mutableblockposition.c(j3, j2, l3); // Reaper - Inline
+                                                blockposition_mutableblockposition.c(j3, j2, l3); // Beast - Inline
                                                 float f = (float) j3 + 0.5F;
                                                 float f1 = (float) l3 + 0.5F;
 
-                                                if (worldserver.getWorldBorder().isInBounds(blockposition_mutableblockposition) && worldserver.getChunkIfLoaded(blockposition_mutableblockposition) != null && !worldserver.isPlayerNearby((double) f, (double) j2, (double) f1, 24.0D) && blockposition.distanceSquared((double) f, (double) j2, (double) f1) >= 576.0D) { // Paper - Prevent mob spawning from loading/generating chunks // Reaper - Inline
+                                                if (worldserver.getWorldBorder().isInBounds(blockposition_mutableblockposition) && worldserver.getChunkIfLoaded(blockposition_mutableblockposition) != null && !worldserver.isPlayerNearby((double) f, (double) j2, (double) f1, 24.0D) && blockposition.distanceSquared((double) f, (double) j2, (double) f1) >= 576.0D) { // Paper - Prevent mob spawning from loading/generating chunks // Beast - Inline
                                                     if (biomebase_biomemeta == null) {
                                                         biomebase_biomemeta = worldserver.a(enumcreaturetype, (BlockPosition) blockposition_mutableblockposition);
                                                         if (biomebase_biomemeta == null) {
@@ -224,7 +224,7 @@ public final class SpawnerCreature {
 
                                                         entityinsentient.setPositionRotation((double) f, (double) j2, (double) f1, worldserver.random.nextFloat() * 360.0F, 0.0F);
                                                         if (entityinsentient.P() && entityinsentient.canSpawn()) {
-                                                            groupdataentity = entityinsentient.prepare(worldserver.D(entityinsentient.blockPos), groupdataentity); // Reaper - Cache current block pos
+                                                            groupdataentity = entityinsentient.prepare(worldserver.D(entityinsentient.blockPos), groupdataentity); // Beast - Cache current block pos
                                                             if (entityinsentient.canSpawn()) {
                                                                 // CraftBukkit start
                                                                 if (worldserver.addEntity(entityinsentient, SpawnReason.NATURAL)) {
@@ -336,7 +336,7 @@ public final class SpawnerCreature {
 
                             entityinsentient.setPositionRotation((double) ((float) j1 + 0.5F), (double) blockposition.getY(), (double) ((float) k1 + 0.5F), random.nextFloat() * 360.0F, 0.0F);
                             // CraftBukkit start - Added a reason for spawning this creature, moved entityinsentient.prepare(groupdataentity) up
-                            groupdataentity = entityinsentient.prepare(world.D(entityinsentient.blockPos), groupdataentity); // Reaper - Cache current block pos
+                            groupdataentity = entityinsentient.prepare(world.D(entityinsentient.blockPos), groupdataentity); // Beast - Cache current block pos
                             world.addEntity(entityinsentient, SpawnReason.CHUNK_GEN);
                             // CraftBukkit end
                             flag = true;
diff --git a/src/main/java/net/minecraft/server/StructureBoundingBox.java b/src/main/java/net/minecraft/server/StructureBoundingBox.java
index f0b29e5266472d77c4dea1046983b453e8e08135..aa8ab42e03d4c1a8620bdc7f7fe7456d9bdf606a 100644
--- a/src/main/java/net/minecraft/server/StructureBoundingBox.java
+++ b/src/main/java/net/minecraft/server/StructureBoundingBox.java
@@ -36,10 +36,10 @@ public class StructureBoundingBox {
         case NORTH:
             return new StructureBoundingBox(i + l, j + i1, k - i2 + 1 + j1, i + k1 - 1 + l, j + l1 - 1 + i1, k + j1);
 
-            /* // Reaper - Optimize
+            /* // Beast - Optimize
         case SOUTH:
             return new StructureBoundingBox(i + l, j + i1, k + j1, i + k1 - 1 + l, j + l1 - 1 + i1, k + i2 - 1 + j1);
-            */ // Reaper end
+            */ // Beast end
 
         case WEST:
             return new StructureBoundingBox(i - i2 + 1 + j1, j + i1, k + l, i + j1, j + l1 - 1 + i1, k + k1 - 1 + l);
diff --git a/src/main/java/net/minecraft/server/TileEntity.java b/src/main/java/net/minecraft/server/TileEntity.java
index 9422782c266a3bc632687cc2125e610dcf17bb03..fe5dbe1df138f7f8cfc48fdf927c07432df007f5 100644
--- a/src/main/java/net/minecraft/server/TileEntity.java
+++ b/src/main/java/net/minecraft/server/TileEntity.java
@@ -166,7 +166,7 @@ public abstract class TileEntity implements KeyedObject {
     }
 
     public NBTTagCompound d() {
-        return this.c(new NBTTagCompound(4)); // Reaper - Use initial capacity
+        return this.c(new NBTTagCompound(4)); // Beast - Use initial capacity
     }
 
     public boolean y() {
diff --git a/src/main/java/net/minecraft/server/TileEntityBanner.java b/src/main/java/net/minecraft/server/TileEntityBanner.java
index e460748f2f50aec1ad11e86f334535e76069ef76..eed25cc0d8d117e655f4cf34d81c5704df39c96a 100644
--- a/src/main/java/net/minecraft/server/TileEntityBanner.java
+++ b/src/main/java/net/minecraft/server/TileEntityBanner.java
@@ -89,7 +89,7 @@ public class TileEntityBanner extends TileEntity implements INamableTileEntity {
     }
 
     public NBTTagCompound d() {
-        return this.save(new NBTTagCompound(7)); // Reaper - Use initial capacity
+        return this.save(new NBTTagCompound(7)); // Beast - Use initial capacity
     }
 
     public static int b(ItemStack itemstack) {
diff --git a/src/main/java/net/minecraft/server/TileEntityBeacon.java b/src/main/java/net/minecraft/server/TileEntityBeacon.java
index 4e83fa719000a3150a7a1fc608797cdcf9aeb963..085ffab0cf2583be014b6c21ae444c777e307161 100644
--- a/src/main/java/net/minecraft/server/TileEntityBeacon.java
+++ b/src/main/java/net/minecraft/server/TileEntityBeacon.java
@@ -26,10 +26,10 @@ import com.destroystokyo.paper.event.block.BeaconEffectEvent;
 
 public class TileEntityBeacon extends TileEntityContainer implements ITickable, IWorldInventory {
 
-    private static final int[] EMPTY_SLOTS = new int[0]; // Reaper - Use constant
+    private static final int[] EMPTY_SLOTS = new int[0]; // Beast - Use constant
     public static final MobEffectList[][] a = new MobEffectList[][] { { MobEffects.FASTER_MOVEMENT, MobEffects.FASTER_DIG}, { MobEffects.RESISTANCE, MobEffects.JUMP}, { MobEffects.INCREASE_DAMAGE}, { MobEffects.REGENERATION}};
     private static final Set<MobEffectList> f = Sets.newHashSet();
-    // private final List<TileEntityBeacon.BeaconColorTracker> g = Collections.emptyList(); // Reaper - Optimize unused
+    // private final List<TileEntityBeacon.BeaconColorTracker> g = Collections.emptyList(); // Beast - Optimize unused
     private boolean j;
     public int levels = -1;
     @Nullable
@@ -43,7 +43,7 @@ public class TileEntityBeacon extends TileEntityContainer implements ITickable,
     private int maxStack = MAX_STACK;
 
     public List<ItemStack> getContents() {
-        return Collections.singletonList(this.inventorySlot); // Reaper - Optimize
+        return Collections.singletonList(this.inventorySlot); // Beast - Optimize
     }
 
     public void onOpen(CraftHumanEntity who) {
@@ -164,7 +164,7 @@ public class TileEntityBeacon extends TileEntityContainer implements ITickable,
     }
 
     private void E() {
-        if (this.j && this.levels > 0 && this.primaryEffect != null) { // Reaper - Remove isClientSide check
+        if (this.j && this.levels > 0 && this.primaryEffect != null) { // Beast - Remove isClientSide check
             byte b0 = getAmplification();
 
             int i = getLevel();
@@ -187,11 +187,11 @@ public class TileEntityBeacon extends TileEntityContainer implements ITickable,
         int l = this.levels;
 
         this.levels = 0;
-        // this.g.clear(); // Reaper - Optimize unused
+        // this.g.clear(); // Beast - Optimize unused
         this.j = true;
         TileEntityBeacon.BeaconColorTracker tileentitybeacon_beaconcolortracker = new TileEntityBeacon.BeaconColorTracker(EnumColor.WHITE.f());
 
-        // this.g.add(tileentitybeacon_beaconcolortracker); // Reaper - Optimize unused
+        // this.g.add(tileentitybeacon_beaconcolortracker); // Beast - Optimize unused
         boolean flag = true;
         BlockPosition.MutableBlockPosition blockposition_mutableblockposition = new BlockPosition.MutableBlockPosition();
 
@@ -207,7 +207,7 @@ public class TileEntityBeacon extends TileEntityContainer implements ITickable,
                 if (iblockdata.getBlock() != Blocks.STAINED_GLASS_PANE) {
                     if (iblockdata.c() >= 15 && iblockdata.getBlock() != Blocks.BEDROCK) {
                         this.j = false;
-                        // this.g.clear(); // Reaper - Optimize unused
+                        // this.g.clear(); // Beast - Optimize unused
                         break;
                     }
 
@@ -226,7 +226,7 @@ public class TileEntityBeacon extends TileEntityContainer implements ITickable,
                 tileentitybeacon_beaconcolortracker.a();
             } else {
                 tileentitybeacon_beaconcolortracker = new TileEntityBeacon.BeaconColorTracker(afloat);
-                // this.g.add(tileentitybeacon_beaconcolortracker); // Reaper - Optimize unused
+                // this.g.add(tileentitybeacon_beaconcolortracker); // Beast - Optimize unused
             }
 
             flag = false;
@@ -263,7 +263,7 @@ public class TileEntityBeacon extends TileEntityContainer implements ITickable,
             }
         }
 
-        if (l < this.levels) { // Reaper - Remove isClientSide check
+        if (l < this.levels) { // Beast - Remove isClientSide check
             Iterator iterator = this.world.a(EntityPlayer.class, (new AxisAlignedBB((double) i, (double) j, (double) k, (double) i, (double) (j - 4), (double) k)).grow(10.0D, 5.0D, 10.0D)).iterator();
 
             while (iterator.hasNext()) {
@@ -285,7 +285,7 @@ public class TileEntityBeacon extends TileEntityContainer implements ITickable,
     }
 
     public NBTTagCompound d() {
-        return this.save(new NBTTagCompound(8)); // Reaper - Use initial capacity
+        return this.save(new NBTTagCompound(8)); // Beast - Use initial capacity
     }
 
     @Nullable
@@ -443,7 +443,7 @@ public class TileEntityBeacon extends TileEntityContainer implements ITickable,
     }
 
     public int[] getSlotsForFace(EnumDirection enumdirection) {
-        return EMPTY_SLOTS; // Reaper - Use constant
+        return EMPTY_SLOTS; // Beast - Use constant
     }
 
     public boolean canPlaceItemThroughFace(int i, ItemStack itemstack, EnumDirection enumdirection) {
diff --git a/src/main/java/net/minecraft/server/TileEntityBrewingStand.java b/src/main/java/net/minecraft/server/TileEntityBrewingStand.java
index 141a68b4c7241a8bc1f48bd7ff8452b1b2787b17..2753ce402263e6897de9f661366d4b03204f9265 100644
--- a/src/main/java/net/minecraft/server/TileEntityBrewingStand.java
+++ b/src/main/java/net/minecraft/server/TileEntityBrewingStand.java
@@ -136,7 +136,7 @@ public class TileEntityBrewingStand extends TileEntityContainer implements ITick
             this.update();
         }
 
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             boolean[] aboolean = this.n();
 
             if (!Arrays.equals(aboolean, this.j)) {
diff --git a/src/main/java/net/minecraft/server/TileEntityChest.java b/src/main/java/net/minecraft/server/TileEntityChest.java
index 785a6c1dfbfbdb52c8eb272f3fb6e31d337d60b9..94540e1ba6e9a3ecc351b58bc526f7c9f76030c2 100644
--- a/src/main/java/net/minecraft/server/TileEntityChest.java
+++ b/src/main/java/net/minecraft/server/TileEntityChest.java
@@ -153,7 +153,7 @@ public class TileEntityChest extends TileEntityLootable { // Paper - Remove ITic
 
     public void o() {
         if (!this.a) {
-            if (this.world == null || !this.world.areChunksLoaded(this.position, 1)) return; // Reaper
+            if (this.world == null || !this.world.areChunksLoaded(this.position, 1)) return; // Beast
             this.a = true;
             this.h = this.a(EnumDirection.WEST);
             this.g = this.a(EnumDirection.EAST);
@@ -291,7 +291,7 @@ public class TileEntityChest extends TileEntityLootable { // Paper - Remove ITic
             if (this.l < 0) {
                 this.l = 0;
             }
-            int oldPower = Math.min(15, this.l); // CraftBukkit - Get power before new viewer is added // Reaper - Optimize
+            int oldPower = Math.min(15, this.l); // CraftBukkit - Get power before new viewer is added // Beast - Optimize
 
             ++this.l;
 
diff --git a/src/main/java/net/minecraft/server/TileEntityEnchantTable.java b/src/main/java/net/minecraft/server/TileEntityEnchantTable.java
index 0c6ebc8ff0fb7fc68c7902168449c4735b0757f0..d0bf596e4c31436e749382df7b06738949b950c5 100644
--- a/src/main/java/net/minecraft/server/TileEntityEnchantTable.java
+++ b/src/main/java/net/minecraft/server/TileEntityEnchantTable.java
@@ -2,9 +2,9 @@ package net.minecraft.server;
 
 import java.util.Random;
 
-public class TileEntityEnchantTable extends TileEntity implements /*ITickable,*/ ITileEntityContainer { // Reaper - Don't tick enchantment tables
+public class TileEntityEnchantTable extends TileEntity implements /*ITickable,*/ ITileEntityContainer { // Beast - Don't tick enchantment tables
 
-    /* // Reaper start - Unused clientside animation fields
+    /* // Beast start - Unused clientside animation fields
     public int a;
     public float f;
     public float g;
@@ -16,7 +16,7 @@ public class TileEntityEnchantTable extends TileEntity implements /*ITickable,*/
     public float m;
     public float n;
     private static final Random o = new Random();
-    */ // Reaper end
+    */ // Beast end
     private String p;
 
     public TileEntityEnchantTable() {}
@@ -38,7 +38,7 @@ public class TileEntityEnchantTable extends TileEntity implements /*ITickable,*/
 
     }
 
-    /* // Reaper start - Don't tick enchantment tables
+    /* // Beast start - Don't tick enchantment tables
     public void e() {
         this.k = this.j;
         this.m = this.l;
@@ -99,7 +99,7 @@ public class TileEntityEnchantTable extends TileEntity implements /*ITickable,*/
         this.i += (f2 - this.i) * 0.9F;
         this.f += this.i;
     }
-    */ // Reaper end
+    */ // Beast end
 
     public String getName() {
         return this.hasCustomName() ? this.p : "container.enchant";
diff --git a/src/main/java/net/minecraft/server/TileEntityEndGateway.java b/src/main/java/net/minecraft/server/TileEntityEndGateway.java
index df9ce67f4010a9359b62f4dac3615cc1f9c44023..fd934ae9e7dd940bfa37f3202bc9d21083d04341 100644
--- a/src/main/java/net/minecraft/server/TileEntityEndGateway.java
+++ b/src/main/java/net/minecraft/server/TileEntityEndGateway.java
@@ -31,7 +31,7 @@ public class TileEntityEndGateway extends TileEntityEnderPortal implements ITick
         }
 
         if (this.exactTeleport) {
-            nbttagcompound.setBoolean("ExactTeleport", /*this.exactTeleport*/true); // Reaper - Optimize
+            nbttagcompound.setBoolean("ExactTeleport", /*this.exactTeleport*/true); // Beast - Optimize
         }
 
         return nbttagcompound;
@@ -48,14 +48,14 @@ public class TileEntityEndGateway extends TileEntityEnderPortal implements ITick
     }
 
     public void e() {
-        if (!(this.world.worldProvider instanceof WorldProviderTheEnd)) return; // Reaper - Don't tick if not in the end world
+        if (!(this.world.worldProvider instanceof WorldProviderTheEnd)) return; // Beast - Don't tick if not in the end world
         boolean flag = this.a();
         boolean flag1 = this.f();
 
         ++this.f;
         if (flag1) {
             --this.g;
-        } else if (true) { // Reaper - Remove isClientSide check
+        } else if (true) { // Beast - Remove isClientSide check
             List list = this.world.a(Entity.class, new AxisAlignedBB(this.getPosition()));
 
             if (!list.isEmpty()) {
@@ -91,7 +91,7 @@ public class TileEntityEndGateway extends TileEntityEnderPortal implements ITick
     }
 
     public void h() {
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             this.g = 40;
             this.world.playBlockAction(this.getPosition(), this.getBlock(), 1, 0);
             this.update();
@@ -109,7 +109,7 @@ public class TileEntityEndGateway extends TileEntityEnderPortal implements ITick
     }
 
     public void a(Entity entity) {
-        if (!this.f()) { // Reaper - Remove isClientSide check
+        if (!this.f()) { // Beast - Remove isClientSide check
             this.g = 100;
             if (this.exitPortal == null && this.world.worldProvider instanceof WorldProviderTheEnd) {
                 this.k();
diff --git a/src/main/java/net/minecraft/server/TileEntityFurnace.java b/src/main/java/net/minecraft/server/TileEntityFurnace.java
index 4a37f298052c17af9942f974c303c19a50263ccb..7d01144afac7e03229884702fb3479bf6559449d 100644
--- a/src/main/java/net/minecraft/server/TileEntityFurnace.java
+++ b/src/main/java/net/minecraft/server/TileEntityFurnace.java
@@ -179,14 +179,14 @@ public class TileEntityFurnace extends TileEntityContainer implements ITickable,
             this.burnTime -= elapsedTicks; // CraftBukkit - use elapsedTicks in place of constant
         }
 
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             ItemStack itemstack = (ItemStack) this.items.get(1);
 
             if (!this.isBurning() && (itemstack.isEmpty() || ((ItemStack) this.items.get(0)).isEmpty())) {
                 if (!this.isBurning() && this.cookTime > 0) {
                     this.cookTime = MathHelper.clamp(this.cookTime - 2, 0, this.cookTimeTotal);
                 }
-            } else if (itemstack.getItem() != Items.BUCKET) { // Reaper - Optimize idle furnaces
+            } else if (itemstack.getItem() != Items.BUCKET) { // Beast - Optimize idle furnaces
                 // CraftBukkit start - Handle multiple elapsed ticks
                 if (this.burnTime <= 0 && this.canBurn()) { // CraftBukkit - == to <=
                     CraftItemStack fuel = CraftItemStack.asCraftMirror(itemstack);
diff --git a/src/main/java/net/minecraft/server/TileEntityHopper.java b/src/main/java/net/minecraft/server/TileEntityHopper.java
index 925f78941d06b50df2ff18c401943485d68fed0e..305f05ac88b9383122665476684e670c69b3ee21 100644
--- a/src/main/java/net/minecraft/server/TileEntityHopper.java
+++ b/src/main/java/net/minecraft/server/TileEntityHopper.java
@@ -110,7 +110,7 @@ public class TileEntityHopper extends TileEntityLootable implements IHopper, ITi
     }
 
     public void e() {
-        if (this.world != null) { // Reaper - Remove isClientSide check
+        if (this.world != null) { // Beast - Remove isClientSide check
             --this.f;
             this.g = this.world.getTime();
             if (!this.J()) {
@@ -127,7 +127,7 @@ public class TileEntityHopper extends TileEntityLootable implements IHopper, ITi
 
     private boolean o() {
         mayAcceptItems = false; // Paper - at the beginning of a tick, assume we can't accept items
-        if (this.world != null) { // Reaper - Remove isClientSide check
+        if (this.world != null) { // Beast - Remove isClientSide check
             if (!this.J() && BlockHopper.f(this.v())) {
                 boolean flag = false;
 
@@ -410,7 +410,7 @@ public class TileEntityHopper extends TileEntityLootable implements IHopper, ITi
             int i = aint.length;
 
             for (int j = 0; j < i; ++j) {
-                int k = aint[j]; // Reaper - Inline
+                int k = aint[j]; // Beast - Inline
                 ItemStack itemstack = iworldinventory.getItem(k);
 
                 if (itemstack.isEmpty() || itemstack.getCount() != itemstack.getMaxStackSize()) {
@@ -440,7 +440,7 @@ public class TileEntityHopper extends TileEntityLootable implements IHopper, ITi
             int i = aint.length;
 
             for (int j = 0; j < i; ++j) {
-                int k = aint[j]; // Reaper - Inline
+                int k = aint[j]; // Beast - Inline
 
                 if (!iworldinventory.getItem(k).isEmpty()) {
                     return false;
@@ -484,7 +484,7 @@ public class TileEntityHopper extends TileEntityLootable implements IHopper, ITi
                 int i = aint.length;
 
                 for (int j = 0; j < i; ++j) {
-                    int k = aint[j]; // Reaper - Inline
+                    int k = aint[j]; // Beast - Inline
 
                     if (a(ihopper, iinventory, k, enumdirection)) {
                         return true;
@@ -649,7 +649,7 @@ public class TileEntityHopper extends TileEntityLootable implements IHopper, ITi
                     if (!tileentityhopper.K()) {
                         byte b0 = 0;
 
-                        if (/*iinventory != null &&*/ iinventory instanceof TileEntityHopper) { // Reaper - Optimize
+                        if (/*iinventory != null &&*/ iinventory instanceof TileEntityHopper) { // Beast - Optimize
                             TileEntityHopper tileentityhopper1 = (TileEntityHopper) iinventory;
 
                             if (tileentityhopper.g >= tileentityhopper1.g) {
diff --git a/src/main/java/net/minecraft/server/TileEntityPiston.java b/src/main/java/net/minecraft/server/TileEntityPiston.java
index 9a013f723873de8c3d04e90608bef0e617bdc6fd..81a78cb1b54dac13103b8c9be1c841df1905fb21 100644
--- a/src/main/java/net/minecraft/server/TileEntityPiston.java
+++ b/src/main/java/net/minecraft/server/TileEntityPiston.java
@@ -38,7 +38,7 @@ public class TileEntityPiston extends TileEntity implements ITickable {
     }
 
     public NBTTagCompound d() {
-        return this.save(new NBTTagCompound(10)); // Reaper - Use initial capacity
+        return this.save(new NBTTagCompound(10)); // Beast - Use initial capacity
     }
 
     public int v() {
@@ -125,7 +125,7 @@ public class TileEntityPiston extends TileEntity implements ITickable {
                         if (d1 > 0.0D) {
                             d1 = Math.min(d1, d0) + 0.01D;
                             TileEntityPiston.i.set(enumdirection);
-                            // Reaper start - EntityMoveEvent
+                            // Beast start - EntityMoveEvent
                             if (MinecraftServer.getServer().hasEntityMoveEvent && !(entity instanceof EntityPlayer)) {
                                 double oldX = entity.locX;
                                 double oldY = entity.locY;
@@ -145,7 +145,7 @@ public class TileEntityPiston extends TileEntity implements ITickable {
                             } else {
                                 entity.move(EnumMoveType.PISTON, d1 * (double) enumdirection.getAdjacentX(), d1 * (double) enumdirection.getAdjacentY(), d1 * (double) enumdirection.getAdjacentZ());
                             }
-                            // Reaper end
+                            // Beast end
                             TileEntityPiston.i.set(null);
                             if (!this.g && this.h) {
                                 this.a(entity, enumdirection, d0);
@@ -239,7 +239,7 @@ public class TileEntityPiston extends TileEntity implements ITickable {
             if (Math.abs(d1 - d2) < 0.01D) {
                 d1 = Math.min(d1, d0) + 0.01D;
                 TileEntityPiston.i.set(enumdirection);
-                // Reaper start - EntityMoveEvent
+                // Beast start - EntityMoveEvent
                 if (MinecraftServer.getServer().hasEntityMoveEvent && !(entity instanceof EntityPlayer)) {
                     double oldX = entity.locX;
                     double oldY = entity.locY;
@@ -259,7 +259,7 @@ public class TileEntityPiston extends TileEntity implements ITickable {
                 } else {
                     entity.move(EnumMoveType.PISTON, d1 * (double) enumdirection1.getAdjacentX(), d1 * (double) enumdirection1.getAdjacentY(), d1 * (double) enumdirection1.getAdjacentZ());
                 }
-                // Reaper end
+                // Beast end
                 TileEntityPiston.i.set(null);
             }
         }
diff --git a/src/main/java/net/minecraft/server/TileEntitySign.java b/src/main/java/net/minecraft/server/TileEntitySign.java
index cfc96513dff82dfa3444429dac44eacdf8c5f8cb..bb1cbdb1785420628571aaa409ad01e329e6caf5 100644
--- a/src/main/java/net/minecraft/server/TileEntitySign.java
+++ b/src/main/java/net/minecraft/server/TileEntitySign.java
@@ -83,7 +83,7 @@ public class TileEntitySign extends TileEntity {
                 //IChatBaseComponent ichatbasecomponent = IChatBaseComponent.ChatSerializer.a(s); // Paper - move down - the old format might throw a json error
 
                 if (oldSign && !isLoadingStructure) { // Paper - saved structures will be in the new format, but will not have isConverted
-                    lines[i] = org.bukkit.craftbukkit.util.CraftChatMessage.fromStringFast(s)[0]; // Reaper
+                    lines[i] = org.bukkit.craftbukkit.util.CraftChatMessage.fromStringFast(s)[0]; // Beast
                     continue;
                 }
                 // CraftBukkit end
@@ -108,7 +108,7 @@ public class TileEntitySign extends TileEntity {
     }
 
     public NBTTagCompound d() {
-        return this.save(new NBTTagCompound(10)); // Reaper - Use initial capacity
+        return this.save(new NBTTagCompound(10)); // Beast - Use initial capacity
     }
 
     public boolean isFilteredNBT() {
@@ -167,7 +167,7 @@ public class TileEntitySign extends TileEntity {
             }
 
             public void a(CommandObjectiveExecutor.EnumCommandResult commandobjectiveexecutor_enumcommandresult, int i) {
-                if (TileEntitySign.this.world != null) { // Reaper - Remove isClientSide check
+                if (TileEntitySign.this.world != null) { // Beast - Remove isClientSide check
                     TileEntitySign.this.i.a(TileEntitySign.this.world.getMinecraftServer(), this, commandobjectiveexecutor_enumcommandresult, i);
                 }
 
diff --git a/src/main/java/net/minecraft/server/TileEntitySkull.java b/src/main/java/net/minecraft/server/TileEntitySkull.java
index 1f8cc423177efa0d082abc314262162181680a9e..7948fbd0c404afe06240dc2d105545bebdf74333 100644
--- a/src/main/java/net/minecraft/server/TileEntitySkull.java
+++ b/src/main/java/net/minecraft/server/TileEntitySkull.java
@@ -21,21 +21,21 @@ import com.mojang.authlib.ProfileLookupCallback;
 import java.util.concurrent.Callable;
 // Spigot end
 
-// Reaper start - Guava to caffeine
+// Beast start - Guava to caffeine
 import com.github.benmanes.caffeine.cache.CacheLoader;
 import com.github.benmanes.caffeine.cache.Caffeine;
 import com.github.benmanes.caffeine.cache.LoadingCache;
-// Reaper end
+// Beast end
 
 public class TileEntitySkull extends TileEntity /*implements ITickable*/ { // Paper - remove tickable
 
     private int a;
     public int rotation;
     private GameProfile g;
-    /* // Reaper start - Optimize unused
+    /* // Beast start - Optimize unused
     private int h;
     private boolean i;
-    */ // Reaper end
+    */ // Beast end
     private static UserCache j;
     private static MinecraftSessionService k;
     // Spigot start
@@ -44,7 +44,7 @@ public class TileEntitySkull extends TileEntity /*implements ITickable*/ { // Pa
                     .setNameFormat("Head Conversion Thread - %1$d")
                     .build()
     );
-    public static final LoadingCache<String, GameProfile> skinCache = Caffeine.newBuilder() // Reaper - Guava to caffeine
+    public static final LoadingCache<String, GameProfile> skinCache = Caffeine.newBuilder() // Beast - Guava to caffeine
             .maximumSize( 5000 )
             .expireAfterAccess( 60, TimeUnit.MINUTES )
             .build( new CacheLoader<String, GameProfile>()
@@ -106,7 +106,7 @@ public class TileEntitySkull extends TileEntity /*implements ITickable*/ { // Pa
         nbttagcompound.setByte("SkullType", (byte) (this.a & 255));
         nbttagcompound.setByte("Rot", (byte) (this.rotation & 255));
         if (this.g != null) {
-            NBTTagCompound nbttagcompound1 = new NBTTagCompound(3); // Reaper - Use initial capacity
+            NBTTagCompound nbttagcompound1 = new NBTTagCompound(3); // Beast - Use initial capacity
 
             GameProfileSerializer.serialize(nbttagcompound1, this.g);
             nbttagcompound.set("Owner", nbttagcompound1);
@@ -134,7 +134,7 @@ public class TileEntitySkull extends TileEntity /*implements ITickable*/ { // Pa
 
     }
 
-    /* // Reaper start - Optimize unused
+    /* // Beast start - Optimize unused
     public void e() {
         if (this.a == 5) {
             if (this.world.isBlockIndirectlyPowered(this.position)) {
@@ -146,7 +146,7 @@ public class TileEntitySkull extends TileEntity /*implements ITickable*/ { // Pa
         }
 
     }
-    */ // Reaper end
+    */ // Beast end
 
     @Nullable
     public GameProfile getGameProfile() {
@@ -159,7 +159,7 @@ public class TileEntitySkull extends TileEntity /*implements ITickable*/ { // Pa
     }
 
     public NBTTagCompound d() {
-        return this.save(new NBTTagCompound(7)); // Reaper - Use initial capacity
+        return this.save(new NBTTagCompound(7)); // Beast - Use initial capacity
     }
 
     public void setSkullType(int i) {
@@ -210,7 +210,7 @@ public class TileEntitySkull extends TileEntity /*implements ITickable*/ { // Pa
                     Callable<GameProfile> callable = new Callable<GameProfile>() {
                         @Override
                         public GameProfile call() {
-                            final GameProfile profile = skinCache.get(gameprofile.getName().toLowerCase(java.util.Locale.ROOT)); // Reaper - Guava to caffeine
+                            final GameProfile profile = skinCache.get(gameprofile.getName().toLowerCase(java.util.Locale.ROOT)); // Beast - Guava to caffeine
                             MinecraftServer.getServer().processQueue.add(new Runnable() {
                                 @Override
                                 public void run() {
diff --git a/src/main/java/net/minecraft/server/TileEntityStructure.java b/src/main/java/net/minecraft/server/TileEntityStructure.java
index 0d56bd770b5c1ef1a1bdea327688a91e5b03b807..95963492acec3d486a0d985261451a472a4f945a 100644
--- a/src/main/java/net/minecraft/server/TileEntityStructure.java
+++ b/src/main/java/net/minecraft/server/TileEntityStructure.java
@@ -131,7 +131,7 @@ public class TileEntityStructure extends TileEntity {
         if (!entityhuman.isCreativeAndOp()) {
             return false;
         } else {
-            if (false) { // Reaper - Remove isClientSide check
+            if (false) { // Beast - Remove isClientSide check
                 entityhuman.a(this);
             }
 
@@ -266,7 +266,7 @@ public class TileEntityStructure extends TileEntity {
             if (iblockdata.getBlock() == Blocks.STRUCTURE_BLOCK) {
                 TileEntity tileentity = this.world.getTileEntity(blockposition_mutableblockposition);
 
-                if (/*tileentity != null &&*/ tileentity instanceof TileEntityStructure) { // Reaper - Optimize
+                if (/*tileentity != null &&*/ tileentity instanceof TileEntityStructure) { // Beast - Optimize
                     arraylist.add((TileEntityStructure) tileentity);
                 }
             }
@@ -319,7 +319,7 @@ public class TileEntityStructure extends TileEntity {
     }
 
     public boolean b(boolean flag) {
-        if (this.l == TileEntityStructure.UsageMode.SAVE && !UtilColor.b(this.a)) { // Reaper - Remove isClientSide check
+        if (this.l == TileEntityStructure.UsageMode.SAVE && !UtilColor.b(this.a)) { // Beast - Remove isClientSide check
             BlockPosition blockposition = this.getPosition().a((BaseBlockPosition) this.h);
             WorldServer worldserver = (WorldServer) this.world;
             MinecraftServer minecraftserver = this.world.getMinecraftServer();
@@ -339,7 +339,7 @@ public class TileEntityStructure extends TileEntity {
     }
 
     public boolean c(boolean flag) {
-        if (this.l == TileEntityStructure.UsageMode.LOAD && !UtilColor.b(this.a)) { // Reaper - Remove isClientSide check
+        if (this.l == TileEntityStructure.UsageMode.LOAD && !UtilColor.b(this.a)) { // Beast - Remove isClientSide check
             BlockPosition blockposition = this.getPosition();
             BlockPosition blockposition1 = blockposition.a((BaseBlockPosition) this.h);
             WorldServer worldserver = (WorldServer) this.world;
@@ -391,7 +391,7 @@ public class TileEntityStructure extends TileEntity {
     }
 
     public boolean E() {
-        if (this.l == TileEntityStructure.UsageMode.LOAD) { // Reaper - Remove isClientSide check
+        if (this.l == TileEntityStructure.UsageMode.LOAD) { // Beast - Remove isClientSide check
             WorldServer worldserver = (WorldServer) this.world;
             MinecraftServer minecraftserver = this.world.getMinecraftServer();
             DefinedStructureManager definedstructuremanager = worldserver.y();
diff --git a/src/main/java/net/minecraft/server/UserCache.java b/src/main/java/net/minecraft/server/UserCache.java
index 2aeb6542e0e50dccfb6129d7adcb4aac0112d1d9..5bc10bed2f790c821abd55fbbde39fc3e8128899 100644
--- a/src/main/java/net/minecraft/server/UserCache.java
+++ b/src/main/java/net/minecraft/server/UserCache.java
@@ -120,7 +120,7 @@ public class UserCache {
             date = calendar.getTime();
         }
 
-        // String s = gameprofile.getName().toLowerCase(Locale.ROOT); // Reaper - Unused
+        // String s = gameprofile.getName().toLowerCase(Locale.ROOT); // Beast - Unused
         UserCache.UserCacheEntry usercache_usercacheentry = new UserCache.UserCacheEntry(gameprofile, date, null);
 
         //if (this.e.containsKey(uuid)) { // Paper
@@ -320,7 +320,7 @@ public class UserCache {
             jsonobject.addProperty("name", usercache_usercacheentry.a().getName());
             UUID uuid = usercache_usercacheentry.a().getId();
 
-            jsonobject.addProperty("uuid", uuid == null ? "" : com.eatthepath.uuid.FastUUID.toString(uuid)); // Reaper - Use FastUUID
+            jsonobject.addProperty("uuid", uuid == null ? "" : com.eatthepath.uuid.FastUUID.toString(uuid)); // Beast - Use FastUUID
             jsonobject.addProperty("expiresOn", UserCache.a.format(usercache_usercacheentry.b()));
             return jsonobject;
         }
@@ -349,7 +349,7 @@ public class UserCache {
                         UUID uuid;
 
                         try {
-                            uuid = com.eatthepath.uuid.FastUUID.parseUUID(s); // Reaper - Use FastUUID
+                            uuid = com.eatthepath.uuid.FastUUID.parseUUID(s); // Beast - Use FastUUID
                         } catch (Throwable throwable) {
                             return null;
                         }
diff --git a/src/main/java/net/minecraft/server/Village.java b/src/main/java/net/minecraft/server/Village.java
index 105a6726d8e83f9628459bb1ead396902e299e01..7d940f2de115ded8ca5067aa8ee4428eef947f4f 100644
--- a/src/main/java/net/minecraft/server/Village.java
+++ b/src/main/java/net/minecraft/server/Village.java
@@ -50,7 +50,7 @@ public class Village {
             return;
         }
         // Paper end
-        if (!this.isVillageAreaLoaded()) { return; } // Reaper - Don't load chunks for village doors
+        if (!this.isVillageAreaLoaded()) { return; } // Beast - Don't load chunks for village doors
         this.g = i;
         this.m();
         this.l();
@@ -223,7 +223,7 @@ public class Village {
         }
     }
 
-    // Reaper start - Don't load chunks for village doors
+    // Beast start - Don't load chunks for village doors
     private BlockPosition[] positions = null;
 
     private void calculateNewCheckPositions() {
@@ -246,7 +246,7 @@ public class Village {
         }
         return false;
     }
-    // Reaper end
+    // Beast end
 
     public void a(VillageDoor villagedoor) {
         this.b.add(villagedoor);
@@ -394,7 +394,7 @@ public class Village {
 
             this.e = Math.max(32, (int) Math.sqrt((double) j) + 1);
         }
-        this.calculateNewCheckPositions(); // Reaper - Don't load chunks for village doors
+        this.calculateNewCheckPositions(); // Beast - Don't load chunks for village doors
     }
 
     public int a(String s) {
@@ -440,7 +440,7 @@ public class Village {
 
             if (nbttagcompound2.hasKey("UUID") && this.a != null && this.a.getMinecraftServer() != null) {
                 UserCache usercache = this.a.getMinecraftServer().getUserCache();
-                GameProfile gameprofile = usercache.a(com.eatthepath.uuid.FastUUID.parseUUID(nbttagcompound2.getString("UUID"))); // Reaper - Use FastUUID
+                GameProfile gameprofile = usercache.a(com.eatthepath.uuid.FastUUID.parseUUID(nbttagcompound2.getString("UUID"))); // Beast - Use FastUUID
 
                 if (gameprofile != null) {
                     this.j.put(gameprofile.getName(), Integer.valueOf(nbttagcompound2.getInt("S")));
@@ -449,7 +449,7 @@ public class Village {
                 this.j.put(nbttagcompound2.getString("Name"), Integer.valueOf(nbttagcompound2.getInt("S")));
             }
         }
-        this.calculateNewCheckPositions(); // Reaper - Don't load chunks for village doors
+        this.calculateNewCheckPositions(); // Beast - Don't load chunks for village doors
     }
 
     public void b(NBTTagCompound nbttagcompound) {
@@ -494,7 +494,7 @@ public class Village {
                 GameProfile gameprofile = usercache.getProfile(s);
 
                 if (gameprofile != null) {
-                    nbttagcompound2.setString("UUID", com.eatthepath.uuid.FastUUID.toString(gameprofile.getId())); // Reaper - Use FastUUID
+                    nbttagcompound2.setString("UUID", com.eatthepath.uuid.FastUUID.toString(gameprofile.getId())); // Beast - Use FastUUID
                     nbttagcompound2.setInt("S", ((Integer) this.j.get(s)).intValue());
                     nbttaglist1.add(nbttagcompound2);
                 }
diff --git a/src/main/java/net/minecraft/server/VillageSiege.java b/src/main/java/net/minecraft/server/VillageSiege.java
index ff2b55dab0e4c3fb9ae04cfac8b75397b101aff9..2c6782fda75e3e370774075cd500e03a0102290f 100644
--- a/src/main/java/net/minecraft/server/VillageSiege.java
+++ b/src/main/java/net/minecraft/server/VillageSiege.java
@@ -73,7 +73,7 @@ public class VillageSiege {
             EntityHuman entityhuman = (EntityHuman) iterator.next();
 
             if (!entityhuman.isSpectator()) {
-                this.f = this.a.ak().getClosestVillage(entityhuman.blockPos, 1); // Reaper - Cache current block pos
+                this.f = this.a.ak().getClosestVillage(entityhuman.blockPos, 1); // Beast - Cache current block pos
                 if (this.f != null && this.f.c() >= 10 && this.f.d() >= 20 && this.f.e() >= 20) {
                     BlockPosition blockposition = this.f.a();
                     float f = (float) this.f.b();
@@ -135,7 +135,7 @@ public class VillageSiege {
 
             try {
                 entityzombie = new EntityZombie(this.a);
-                entityzombie.prepare(this.a.D(entityzombie.blockPos), (GroupDataEntity) null); // Reaper - Cache current block pos
+                entityzombie.prepare(this.a.D(entityzombie.blockPos), (GroupDataEntity) null); // Beast - Cache current block pos
             } catch (Exception exception) {
                 exception.printStackTrace();
                 ServerInternalException.reportInternalException(exception); // Paper
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index 0d3406de0a738228cec41e7142855a54e94c670b..0d0a57fdd28568d880ad48576571ffe431389849 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -13,20 +13,22 @@ import java.util.Iterator;
 import java.util.List;
 import java.util.Random;
 import java.util.UUID;
-import java.util.function.Supplier;
 import javax.annotation.Nullable;
 
 // CraftBukkit start
 import com.google.common.collect.Maps;
 import java.util.HashMap; // Paper
 import java.util.Map;
+
+import com.homomc.beast.WorldConfigCache;
+import com.homomc.beast.event.entity.AnyEntitySpawnEvent;
+import com.homomc.beast.event.world.SoundEvent;
 import org.bukkit.Bukkit;
 import org.bukkit.block.BlockState;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.craftbukkit.CraftWorld;
 import org.bukkit.craftbukkit.event.CraftEventFactory;
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
-import org.bukkit.craftbukkit.util.LongHashSet; // Paper
 import org.bukkit.event.block.BlockCanBuildEvent;
 import org.bukkit.event.block.BlockPhysicsEvent;
 import org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason;
@@ -75,7 +77,7 @@ public abstract class World implements IBlockAccess {
     private final List<TileEntity> b = Lists.newArrayList();
     private final Set<TileEntity> tileEntityListUnload = Sets.newHashSet(); // Paper
     public final List<EntityHuman> players = Lists.newArrayList();
-    public final Map<String, EntityHuman> playersByName = new HashMap<>(); // Reaper - Optimize player lookup
+    public final Map<String, EntityHuman> playersByName = new HashMap<>(); // Beast - Optimize player lookup
     public final List<Entity> j = Lists.newArrayList();
     protected final IntHashMap<Entity> entitiesById = new IntHashMap();
     private final long K = 16777215L;
@@ -103,7 +105,7 @@ public abstract class World implements IBlockAccess {
     public final MethodProfiler methodProfiler;
     private final Calendar N;
     public Scoreboard scoreboard;
-    public final boolean isClientSide = false; // Reaper - Remove isClientSide check
+    public final boolean isClientSide = false; // Beast - Remove isClientSide check
     public boolean allowMonsters;
     public boolean allowAnimals;
     private boolean O;
@@ -148,11 +150,11 @@ public abstract class World implements IBlockAccess {
     private org.spigotmc.TickLimiter tileLimiter;
     private int tileTickPosition;
     public final Map<Explosion.CacheKey, Float> explosionDensityCache = new HashMap<>(); // Paper - Optimize explosions
-    // Reaper start - Improve the physics update loop
+    // Beast start - Improve the physics update loop
     private final List<org.apache.commons.lang3.tuple.ImmutableTriple<BlockPosition, Block, BlockPosition>> pendingUpdates = new ArrayList<>();
     private final List<org.apache.commons.lang3.tuple.ImmutableTriple<BlockPosition, Block, BlockPosition>> toIterate = new ArrayList<>();
     private boolean isUpdatingBlocks = false;
-    // Reaper end
+    // Beast end
 
     public CraftWorld getWorld() {
         return this.world;
@@ -173,8 +175,8 @@ public abstract class World implements IBlockAccess {
     }
 
     protected World(IDataManager idatamanager, WorldData worlddata, WorldProvider worldprovider, MethodProfiler methodprofiler, boolean flag, ChunkGenerator gen, org.bukkit.World.Environment env) {
-        this.spigotConfig = com.github.ruviolence.reaper.WorldConfigCache.getSpigotConfig( worlddata.getName() ); // Spigot // Reaper - Cache world configs
-        this.paperConfig = com.github.ruviolence.reaper.WorldConfigCache.getPaperConfig(worlddata.getName(), this.spigotConfig); // Paper // Reaper - Cache world configs
+        this.spigotConfig = WorldConfigCache.getSpigotConfig( worlddata.getName() ); // Spigot // Beast - Cache world configs
+        this.paperConfig = WorldConfigCache.getPaperConfig(worlddata.getName(), this.spigotConfig); // Paper // Beast - Cache world configs
         this.generator = gen;
         this.world = new CraftWorld((WorldServer) this, gen, env);
         this.ticksPerAnimalSpawns = this.getServer().getTicksPerAnimalSpawns(); // CraftBukkit
@@ -190,7 +192,7 @@ public abstract class World implements IBlockAccess {
         this.methodProfiler = methodprofiler;
         this.worldData = worlddata;
         this.worldProvider = worldprovider;
-        // this.isClientSide = flag; // Reaper - Remove isClientSide check
+        // this.isClientSide = flag; // Beast - Remove isClientSide check
         this.P = worldprovider.getWorldBorder();
         // CraftBukkit start
         getWorldBorder().world = (WorldServer) this;
@@ -361,10 +363,10 @@ public abstract class World implements IBlockAccess {
         return this.isChunkLoaded(i, j, false) ? true : this.chunkProvider.e(i, j);
     }
 
-    // Reaper start
+    // Beast start
     public boolean setTypeAndData(BlockPosition blockposition, IBlockData iblockdata, int i) { return setTypeAndData(blockposition, iblockdata, i, true, true); }
     public boolean setTypeAndData(BlockPosition blockposition, IBlockData iblockdata, int i, boolean notify, boolean updateLight) {
-        // Reaper end
+        // Beast end
         // CraftBukkit start - tree generation
         if (this.captureTreeGeneration) {
             BlockState blockstate = null;
@@ -388,11 +390,11 @@ public abstract class World implements IBlockAccess {
         // CraftBukkit end
         if (blockposition.isInvalidYLocation()) { // Paper
             return false;
-        } else if (false) { // Reaper - Remove isClientSide check, Remove DEBUG_ALL_BLOCK_STATES world type
+        } else if (false) { // Beast - Remove isClientSide check, Remove DEBUG_ALL_BLOCK_STATES world type
             return false;
         } else {
             Chunk chunk = this.getChunkAtWorldCoords(blockposition);
-            // Block block = iblockdata.getBlock(); // Reaper - Unused
+            // Block block = iblockdata.getBlock(); // Beast - Unused
 
             // CraftBukkit start - capture blockstates
             BlockState blockstate = null;
@@ -403,7 +405,7 @@ public abstract class World implements IBlockAccess {
             }
             // CraftBukkit end
 
-            IBlockData iblockdata1 = chunk.setBlockState(blockposition, iblockdata, notify, updateLight); // Reaper
+            IBlockData iblockdata1 = chunk.setBlockState(blockposition, iblockdata, notify, updateLight); // Beast
 
             if (iblockdata1 == null) {
                 // CraftBukkit start - remove blockstate if failed
@@ -413,12 +415,12 @@ public abstract class World implements IBlockAccess {
                 // CraftBukkit end
                 return false;
             } else {
-                if (updateLight) // Reaper
+                if (updateLight) // Beast
                 if (iblockdata.c() != iblockdata1.c() || iblockdata.d() != iblockdata1.d()) {
-                    // this.methodProfiler.a("checkLight"); // Reaper - Remove MethodProfiler
-                    // chunk.runOrQueueLightUpdate(() -> this.w(blockposition)); // Reaper - Remove Paper lighting queue // Paper - Queue light update
-                    chunk.runOrQueueLightUpdate(blockposition.getX(), blockposition.getY(), blockposition.getZ(), 0); // Reaper
-                    // this.methodProfiler.b(); // Reaper - Remove MethodProfiler
+                    // this.methodProfiler.a("checkLight"); // Beast - Remove MethodProfiler
+                    // chunk.runOrQueueLightUpdate(() -> this.w(blockposition)); // Beast - Remove Paper lighting queue // Paper - Queue light update
+                    chunk.runOrQueueLightUpdate(blockposition.getX(), blockposition.getY(), blockposition.getZ(), 0); // Beast
+                    // this.methodProfiler.b(); // Beast - Remove MethodProfiler
                 }
 
                 /*
@@ -450,16 +452,16 @@ public abstract class World implements IBlockAccess {
 
     // CraftBukkit start - Split off from above in order to directly send client and physic updates
     public void notifyAndUpdatePhysics(BlockPosition blockposition, Chunk chunk, IBlockData oldBlock, IBlockData newBlock, int i) {
-        if ((i & 2) != 0 && (chunk == null || chunk.isReady())) { // allow chunk to be null here as chunk.isReady() is false when we send our notification during block placement // Reaper - Remove isClientSide check
+        if ((i & 2) != 0 && (chunk == null || chunk.isReady())) { // allow chunk to be null here as chunk.isReady() is false when we send our notification during block placement // Beast - Remove isClientSide check
             this.notify(blockposition, oldBlock, newBlock, i);
         }
 
-        if ((i & 1) != 0) { // Reaper - Remove isClientSide check
+        if ((i & 1) != 0) { // Beast - Remove isClientSide check
             this.update(blockposition, oldBlock.getBlock(), true);
             if (newBlock.n()) {
                 this.updateAdjacentComparators(blockposition, newBlock.getBlock());
             }
-        } else if ((i & 16) == 0) { // Reaper - Remove isClientSide check
+        } else if ((i & 16) == 0) { // Beast - Remove isClientSide check
             this.c(blockposition, newBlock.getBlock());
         }
     }
@@ -497,7 +499,7 @@ public abstract class World implements IBlockAccess {
     }
 
     public void update(BlockPosition blockposition, Block block, boolean flag) {
-        if (true) { // Reaper - Remove DEBUG_ALL_BLOCK_STATES world type
+        if (true) { // Beast - Remove DEBUG_ALL_BLOCK_STATES world type
             // CraftBukkit start
             if (populating) {
                 return;
@@ -588,22 +590,22 @@ public abstract class World implements IBlockAccess {
     }
 
     public void a(BlockPosition blockposition, final Block block, BlockPosition blockposition1) {
-        if (true) { // Reaper - Remove isClientSide check
-            // Reaper start - Optimize physics update loop
+        if (true) { // Beast - Remove isClientSide check
+            // Beast start - Optimize physics update loop
             if (isUpdatingBlocks) {
                 pendingUpdates.add(new org.apache.commons.lang3.tuple.ImmutableTriple<>(blockposition, block, blockposition1));
                 return;
             }
             isUpdatingBlocks = true;
-            // IBlockData iblockdata = this.getType(blockposition); // Reaper - Move down 
+            // IBlockData iblockdata = this.getType(blockposition); // Beast - Move down
 
             try {
-                int depth = 1; // Reaper
+                int depth = 1; // Beast
                 // CraftBukkit start
                 CraftWorld world = ((WorldServer) this).getWorld();
-                boolean hasPhysicsEvent = world != null && !((WorldServer) this).stopPhysicsEvent; // Reaper
+                boolean hasPhysicsEvent = world != null && !((WorldServer) this).stopPhysicsEvent; // Beast
                 if (hasPhysicsEvent) { // Paper
-                    BlockPhysicsEvent event = new BlockPhysicsEvent(world.getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ()), CraftMagicNumbers.getId(block), blockposition1.getX(), blockposition1.getY(), blockposition1.getZ(), depth); // Reaper - Add depth API // Paper - add source block
+                    BlockPhysicsEvent event = new BlockPhysicsEvent(world.getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ()), CraftMagicNumbers.getId(block), blockposition1.getX(), blockposition1.getY(), blockposition1.getZ(), depth); // Beast - Add depth API // Paper - add source block
                     this.getServer().getPluginManager().callEvent(event);
 
                     if (event.isCancelled()) {
@@ -611,7 +613,7 @@ public abstract class World implements IBlockAccess {
                     }
                 }
                 // CraftBukkit end
-                this.getType(blockposition).doPhysics(this, blockposition, block, blockposition1); // Reaper
+                this.getType(blockposition).doPhysics(this, blockposition, block, blockposition1); // Beast
                 if (pendingUpdates.isEmpty()) return; // If the next updates have not been queued after the first update
 
                 List<org.apache.commons.lang3.tuple.ImmutableTriple<BlockPosition, Block, BlockPosition>> pendingUpdates = this.pendingUpdates;
@@ -632,7 +634,7 @@ public abstract class World implements IBlockAccess {
                         BlockPosition sourcePos = triple.getRight();
 
                         if (hasPhysicsEvent) {
-                            BlockPhysicsEvent event = new BlockPhysicsEvent(world.getBlockAt(pos.getX(), pos.getY(), pos.getZ()), CraftMagicNumbers.getId(b), sourcePos.getX(), sourcePos.getY(), sourcePos.getZ(), depth); // Reaper - Add depth API
+                            BlockPhysicsEvent event = new BlockPhysicsEvent(world.getBlockAt(pos.getX(), pos.getY(), pos.getZ()), CraftMagicNumbers.getId(b), sourcePos.getX(), sourcePos.getY(), sourcePos.getZ(), depth); // Beast - Add depth API
                             this.getServer().getPluginManager().callEvent(event);
 
                             if (event.isCancelled()) {
@@ -668,17 +670,17 @@ public abstract class World implements IBlockAccess {
                 throw new ReportedException(crashreport);
             } finally {
                 isUpdatingBlocks = false;
-                // Reaper end - Optimize physics update loop
+                // Beast end - Optimize physics update loop
             }
         }
     }
 
     public void b(BlockPosition blockposition, final Block block, BlockPosition blockposition1) {
-        if (true) { // Reaper - Remove isClientSide check
-            // Reaper start - Don't load chunks for physics
+        if (true) { // Beast - Remove isClientSide check
+            // Beast start - Don't load chunks for physics
             IBlockData iblockdata = this.getTypeIfLoaded(blockposition);
             if (iblockdata == null) return;
-            // Reaper end
+            // Beast end
 
             if (iblockdata.getBlock() == Blocks.dk) {
                 try {
@@ -745,13 +747,13 @@ public abstract class World implements IBlockAccess {
                 blockposition = new BlockPosition(blockposition.getX(), 255, blockposition.getZ());
             }
 
-            // Reaper start - Don't load chunks for light checks
+            // Beast start - Don't load chunks for light checks
             Chunk chunk = this.getChunkIfLoaded(blockposition);
             if (chunk == null) {
                 return 0;
             }
             return chunk.a(blockposition, 0);
-            // Reaper end
+            // Beast end
         }
     }
 
@@ -846,11 +848,11 @@ public abstract class World implements IBlockAccess {
         int k;
 
         if (i >= -30000000 && j >= -30000000 && i < 30000000 && j < 30000000) {
-            // Reaper start - Optimize
+            // Beast start - Optimize
             Chunk chunk = this.getChunkIfLoaded(i >> 4, j >> 4);
             if (chunk != null) {
                 k = chunk.b(i & 15, j & 15);
-                // Reaper end
+                // Beast end
             } else {
                 k = 0;
             }
@@ -864,13 +866,13 @@ public abstract class World implements IBlockAccess {
     @Deprecated
     public int d(int i, int j) {
         if (i >= -30000000 && j >= -30000000 && i < 30000000 && j < 30000000) {
-            // Reaper start - Optimize
+            // Beast start - Optimize
             Chunk chunk = this.getChunkIfLoaded(i >> 4, j >> 4);
             if (chunk == null) {
                 return 0;
             } else {
-                // Chunk chunk = this.getChunkAt(i >> 4, j >> 4); // Reaper
-                // Reaper end
+                // Chunk chunk = this.getChunkAt(i >> 4, j >> 4); // Beast
+                // Beast end
                 return chunk.w();
             }
         } else {
@@ -879,12 +881,12 @@ public abstract class World implements IBlockAccess {
     }
 
     public int getBrightness(EnumSkyBlock enumskyblock, BlockPosition blockposition) {
-        // Reaper start - Optimize light lookup
+        // Beast start - Optimize light lookup
         return getBrightness(enumskyblock, blockposition, null);
     }
 
     public int getBrightness(EnumSkyBlock enumskyblock, BlockPosition blockposition, Chunk inChunk) {
-        // Reaper end - Optimize light lookup
+        // Beast end - Optimize light lookup
         if (blockposition.getY() < 0) {
             blockposition = new BlockPosition(blockposition.getX(), 0, blockposition.getZ());
         }
@@ -894,22 +896,22 @@ public abstract class World implements IBlockAccess {
         } else if (!this.isLoaded(blockposition)) {
             return enumskyblock.c;
         } else {
-            Chunk chunk = inChunk != null ? inChunk : this.getChunkAtWorldCoords(blockposition); // Reaper - Optimize light lookup
+            Chunk chunk = inChunk != null ? inChunk : this.getChunkAtWorldCoords(blockposition); // Beast - Optimize light lookup
 
             return chunk.getBrightness(enumskyblock, blockposition);
         }
     }
 
     public void a(EnumSkyBlock enumskyblock, BlockPosition blockposition, int i) {
-        // Reaper start - Optimize light lookup
+        // Beast start - Optimize light lookup
         setLightFor(enumskyblock, blockposition, i, null);
     }
 
     public void setLightFor(EnumSkyBlock enumskyblock, BlockPosition blockposition, int i, Chunk inChunk) {
-        // Reaper end - Optimize light lookup
+        // Beast end - Optimize light lookup
         if (blockposition.isValidLocation()) { // Paper
             if (this.isLoaded(blockposition)) {
-                Chunk chunk = inChunk != null ? inChunk : this.getChunkAtWorldCoords(blockposition); // Reaper - Optimize light lookup
+                Chunk chunk = inChunk != null ? inChunk : this.getChunkAtWorldCoords(blockposition); // Beast - Optimize light lookup
 
                 chunk.a(enumskyblock, blockposition, i);
                 this.m(blockposition);
@@ -1003,7 +1005,7 @@ public abstract class World implements IBlockAccess {
                 int l = MathHelper.floor(vec3d.x);
                 int i1 = MathHelper.floor(vec3d.y);
                 int j1 = MathHelper.floor(vec3d.z);
-                BlockPosition.MutableBlockPosition blockposition = new BlockPosition.MutableBlockPosition(l, i1, j1); // Reaper - Optimize BlockPosition
+                BlockPosition.MutableBlockPosition blockposition = new BlockPosition.MutableBlockPosition(l, i1, j1); // Beast - Optimize BlockPosition
                 IBlockData iblockdata = this.getTypeIfLoaded(blockposition); // Paper
                 if (iblockdata == null) return null; // Paper
                 Block block = iblockdata.getBlock();
@@ -1106,7 +1108,7 @@ public abstract class World implements IBlockAccess {
                     l = MathHelper.floor(vec3d.x) - (enumdirection == EnumDirection.EAST ? 1 : 0);
                     i1 = MathHelper.floor(vec3d.y) - (enumdirection == EnumDirection.UP ? 1 : 0);
                     j1 = MathHelper.floor(vec3d.z) - (enumdirection == EnumDirection.SOUTH ? 1 : 0);
-                    blockposition.c(l, i1, j1); // Reaper - Optimize BlockPosition
+                    blockposition.c(l, i1, j1); // Beast - Optimize BlockPosition
                     IBlockData iblockdata1 = this.getTypeIfLoaded(blockposition); // Paper
                     if (iblockdata1 == null) return null; // Paper
                     Block block1 = iblockdata1.getBlock();
@@ -1144,9 +1146,9 @@ public abstract class World implements IBlockAccess {
     // Paper end
 
     public void a(@Nullable EntityHuman entityhuman, double d0, double d1, double d2, SoundEffect soundeffect, SoundCategory soundcategory, float f, float f1) {
-        // Reaper start - SoundEvent
-        if (com.github.ruviolence.reaper.event.world.SoundEvent.getHandlerList().getRegisteredListeners().length != 0) {
-            com.github.ruviolence.reaper.event.world.SoundEvent event = CraftEventFactory.callSoundEvent(this, entityhuman, d0, d1, d2, soundeffect, soundcategory, f, f1);
+        // Beast start - SoundEvent
+        if (SoundEvent.getHandlerList().getRegisteredListeners().length != 0) {
+            SoundEvent event = CraftEventFactory.callSoundEvent(this, entityhuman, d0, d1, d2, soundeffect, soundcategory, f, f1);
             if (event.isCancelled()) return;
 
             org.bukkit.entity.HumanEntity fromEntity = event.getFromEntity();
@@ -1159,7 +1161,7 @@ public abstract class World implements IBlockAccess {
             f = event.getVolume();
             f1 = event.getPitch();
         }
-        // Reaper end
+        // Beast end
         for (int i = 0; i < this.u.size(); ++i) {
             ((IWorldAccess) this.u.get(i)).a(entityhuman, soundeffect, soundcategory, d0, d1, d2, f, f1);
         }
@@ -1263,10 +1265,10 @@ public abstract class World implements IBlockAccess {
                 } // Paper end - End iteration skip check - All tweaking ends here
             }
         } // Spigot end
-        // Reaper start
-        else if (com.github.ruviolence.reaper.event.entity.AnyEntitySpawnEvent.getHandlerList().getRegisteredListeners().length != 0) {
+        // Beast start
+        else if (AnyEntitySpawnEvent.getHandlerList().getRegisteredListeners().length != 0) {
             event = CraftEventFactory.callAnyEntitySpawnEvent(entity, spawnReason);
-        } // Reaper end
+        } // Beast end
 
         if (event != null && (event.isCancelled() || entity.dead)) {
             entity.dead = true;
@@ -1295,7 +1297,7 @@ public abstract class World implements IBlockAccess {
                 EntityHuman entityhuman = (EntityHuman) entity;
 
                 this.players.add(entityhuman);
-                this.playersByName.put(entityhuman.getName(), entityhuman); // Reaper - Optimize player lookup
+                this.playersByName.put(entityhuman.getName(), entityhuman); // Beast - Optimize player lookup
                 this.everyoneSleeping();
             }
 
@@ -1339,7 +1341,7 @@ public abstract class World implements IBlockAccess {
         entity.die();
         if (entity instanceof EntityHuman) {
             this.players.remove(entity);
-            this.playersByName.remove(entity.getName()); // Reaper - Optimize player lookup
+            this.playersByName.remove(entity.getName()); // Beast - Optimize player lookup
             // Spigot start
             for ( Object o : worldMaps.c )
             {
@@ -1370,7 +1372,7 @@ public abstract class World implements IBlockAccess {
         entity.die();
         if (entity instanceof EntityHuman) {
             this.players.remove(entity);
-            this.playersByName.remove(entity.getName()); // Reaper - Optimize player lookup
+            this.playersByName.remove(entity.getName()); // Beast - Optimize player lookup
             this.everyoneSleeping();
         }
 
@@ -1573,8 +1575,8 @@ public abstract class World implements IBlockAccess {
     public void b(BlockPosition blockposition, Block block, int i, int j) {}
 
     public void tickEntities() {
-        // this.methodProfiler.a("entities"); // Reaper - Remove MethodProfiler
-        // this.methodProfiler.a("global"); // Reaper - Remove MethodProfiler
+        // this.methodProfiler.a("entities"); // Beast - Remove MethodProfiler
+        // this.methodProfiler.a("global"); // Beast - Remove MethodProfiler
 
         int i;
         Entity entity;
@@ -1594,7 +1596,7 @@ public abstract class World implements IBlockAccess {
                 CrashReport crashreport = CrashReport.a(throwable, "Ticking entity");
                 CrashReportSystemDetails crashreportsystemdetails = crashreport.a("Entity being ticked");
 
-                if (/*entity == null*/false) { // Reaper - Optimize
+                if (/*entity == null*/false) { // Beast - Optimize
                     crashreportsystemdetails.a("Entity", (Object) "~~NULL~~");
                 } else {
                     entity.appendEntityCrashDetails(crashreportsystemdetails);
@@ -1608,7 +1610,7 @@ public abstract class World implements IBlockAccess {
             }
         }
 
-        // this.methodProfiler.c("remove"); // Reaper - Remove MethodProfiler
+        // this.methodProfiler.c("remove"); // Beast - Remove MethodProfiler
         this.entityList.removeAll(this.f);
 
         int j;
@@ -1632,7 +1634,7 @@ public abstract class World implements IBlockAccess {
 
         this.f.clear();
         this.l();
-        // this.methodProfiler.c("regular"); // Reaper - Remove MethodProfiler
+        // this.methodProfiler.c("regular"); // Beast - Remove MethodProfiler
 
         CrashReportSystemDetails crashreportsystemdetails1;
         CrashReport crashreport1;
@@ -1643,13 +1645,13 @@ public abstract class World implements IBlockAccess {
         int entitiesThisCycle = 0;
         // Paper start - Disable tick limiters
         //if (tickPosition < 0) tickPosition = 0;
-        // Reaper start
+        // Beast start
         boolean hasEntityMoveEvent = getMinecraftServer().hasEntityMoveEvent;
         boolean hasEntityTickEvent = getMinecraftServer().hasEntityTickEvent;
-        // Reaper end
+        // Beast end
         for (tickPosition = 0; tickPosition < entityList.size(); tickPosition++) {
             // Paper end
-            tickPosition = (/*tickPosition < entityList.size()*/true) ? tickPosition : 0; // Reaper - Optimize
+            tickPosition = (/*tickPosition < entityList.size()*/true) ? tickPosition : 0; // Beast - Optimize
             entity = (Entity) this.entityList.get(this.tickPosition);
             // CraftBukkit end
             Entity entity1 = entity.bJ();
@@ -1662,11 +1664,11 @@ public abstract class World implements IBlockAccess {
                 entity.stopRiding();
             }
 
-            // this.methodProfiler.a("tick"); // Reaper - Remove MethodProfiler
+            // this.methodProfiler.a("tick"); // Beast - Remove MethodProfiler
             if (!entity.dead && !(entity instanceof EntityPlayer)) {
-                if (!hasEntityTickEvent || CraftEventFactory.callEntityTickEvent(entity, this)) // Reaper - Add EntityTickEvent
+                if (!hasEntityTickEvent || CraftEventFactory.callEntityTickEvent(entity, this)) // Beast - Add EntityTickEvent
                 try {
-                    // Reaper start - EntityMoveEvent
+                    // Beast start - EntityMoveEvent
                     if (hasEntityMoveEvent) {
                         double oldX = entity.locX;
                         double oldY = entity.locY;
@@ -1686,7 +1688,7 @@ public abstract class World implements IBlockAccess {
                     } else {
                         this.h(entity);
                     }
-                    // Reaper end
+                    // Beast end
                 } catch (Throwable throwable1) {
                     // Paper start - Prevent tile entity and entity crashes
                     String msg = "Entity threw exception at " + entity.world.getWorld().getName() + ":" + entity.locX + "," + entity.locY + "," + entity.locZ;
@@ -1699,8 +1701,8 @@ public abstract class World implements IBlockAccess {
                 }
             }
 
-            // this.methodProfiler.b(); // Reaper - Remove MethodProfiler
-            // this.methodProfiler.a("remove"); // Reaper - Remove MethodProfiler
+            // this.methodProfiler.b(); // Beast - Remove MethodProfiler
+            // this.methodProfiler.a("remove"); // Beast - Remove MethodProfiler
             if (entity.dead) {
                 // Paper start
                 /*
@@ -1720,11 +1722,11 @@ public abstract class World implements IBlockAccess {
                 this.c(entity);
             }
 
-            // this.methodProfiler.b(); // Reaper - Remove MethodProfiler
+            // this.methodProfiler.b(); // Beast - Remove MethodProfiler
         }
         guardEntityList = false; // Spigot
 
-        // this.methodProfiler.c("blockEntities"); // Reaper - Remove MethodProfiler
+        // this.methodProfiler.c("blockEntities"); // Beast - Remove MethodProfiler
         if (!this.tileEntityListUnload.isEmpty()) {
             // Paper start - Use alternate implementation with faster contains
             java.util.Set<TileEntity> toRemove = java.util.Collections.newSetFromMap(new java.util.IdentityHashMap<>());
@@ -1737,11 +1739,11 @@ public abstract class World implements IBlockAccess {
 
         this.O = true;
         // Spigot start
-        boolean hasTileEntityTickEvent = getMinecraftServer().hasTileEntityTickEvent; // Reaper - Add TileEntityTickEvent
+        boolean hasTileEntityTickEvent = getMinecraftServer().hasTileEntityTickEvent; // Beast - Add TileEntityTickEvent
         // Iterator iterator = this.tileEntityListTick.iterator();
         int tilesThisCycle = 0;
         for (tileTickPosition = 0; tileTickPosition < tileEntityListTick.size(); tileTickPosition++) { // Paper - Disable tick limiters
-            tileTickPosition = (/*tileTickPosition < tileEntityListTick.size()*/true) ? tileTickPosition : 0; // Reaper - Optimize
+            tileTickPosition = (/*tileTickPosition < tileEntityListTick.size()*/true) ? tileTickPosition : 0; // Beast - Optimize
             TileEntity tileentity = (TileEntity) this.tileEntityListTick.get(tileTickPosition);
             // Spigot start
             if (tileentity == null) {
@@ -1762,15 +1764,15 @@ public abstract class World implements IBlockAccess {
                     shouldTick = shouldTick && !chunk.isUnloading() && chunk.scheduledForUnload == null;
                 if (shouldTick && this.P.a(blockposition)) {
                     // Paper end
-                    if (!hasTileEntityTickEvent || CraftEventFactory.callTileEntityTickEvent(tileentity)) // Reaper - Add TileEntityTickEvent
+                    if (!hasTileEntityTickEvent || CraftEventFactory.callTileEntityTickEvent(tileentity)) // Beast - Add TileEntityTickEvent
                     try {
-                        /* // Reaper start - Remove MethodProfiler
+                        /* // Beast start - Remove MethodProfiler
                         this.methodProfiler.a(() -> {
                             return String.valueOf(TileEntity.a(tileentity.getClass()));
                         });
-                        */ // Reaper end
+                        */ // Beast end
                         ((ITickable) tileentity).e();
-                        // this.methodProfiler.b(); // Reaper - Remove MethodProfiler
+                        // this.methodProfiler.b(); // Beast - Remove MethodProfiler
                     } catch (Throwable throwable2) {
                         // Paper start - Prevent tile entity and entity crashes
                         String msg = "TileEntity threw exception at " + tileentity.world.getWorld().getName() + ":" + tileentity.position.getX() + "," + tileentity.position.getY() + "," + tileentity.position.getZ();
@@ -1801,7 +1803,7 @@ public abstract class World implements IBlockAccess {
         }
 
         this.O = false;
-        // this.methodProfiler.c("pendingBlockEntities"); // Reaper - Remove MethodProfiler
+        // this.methodProfiler.c("pendingBlockEntities"); // Beast - Remove MethodProfiler
         if (!this.b.isEmpty()) {
             for (int i1 = 0; i1 < this.b.size(); ++i1) {
                 TileEntity tileentity1 = (TileEntity) this.b.get(i1);
@@ -1832,8 +1834,8 @@ public abstract class World implements IBlockAccess {
             this.b.clear();
         }
 
-        // this.methodProfiler.b(); // Reaper - Remove MethodProfiler
-        // this.methodProfiler.b(); // Reaper - Remove MethodProfiler
+        // this.methodProfiler.b(); // Beast - Remove MethodProfiler
+        // this.methodProfiler.b(); // Beast - Remove MethodProfiler
     }
 
     protected void l() {}
@@ -1845,7 +1847,7 @@ public abstract class World implements IBlockAccess {
             this.tileEntityListTick.add(tileentity);
         }
 
-        if (false) { // Reaper - Remove isClientSide check
+        if (false) { // Beast - Remove isClientSide check
             BlockPosition blockposition = tileentity.getPosition();
             IBlockData iblockdata = this.getType(blockposition);
 
@@ -1905,7 +1907,7 @@ public abstract class World implements IBlockAccess {
             }
         }
 
-        // this.methodProfiler.a("chunkCheck"); // Reaper - Remove MethodProfiler
+        // this.methodProfiler.a("chunkCheck"); // Beast - Remove MethodProfiler
         if (Double.isNaN(entity.locX) || Double.isInfinite(entity.locX)) {
             entity.locX = entity.M;
         }
@@ -1942,7 +1944,7 @@ public abstract class World implements IBlockAccess {
             }
         }
 
-        // this.methodProfiler.b(); // Reaper - Remove MethodProfiler
+        // this.methodProfiler.b(); // Beast - Remove MethodProfiler
         if (flag && entity.aa) {
             Iterator iterator = entity.bF().iterator();
 
@@ -1995,7 +1997,7 @@ public abstract class World implements IBlockAccess {
         for (int i = 0; i < list.size(); ++i) {
             Entity entity1 = (Entity) list.get(i);
 
-            if (!entity1.dead && entity1.i && entity1 != entity && (entity == null || !entity1.x(entity))) { // Reaper - Fix MC-103516
+            if (!entity1.dead && entity1.i && entity1 != entity && (entity == null || !entity1.x(entity))) { // Beast - Fix MC-103516
                 return false;
             }
         }
@@ -2179,7 +2181,7 @@ public abstract class World implements IBlockAccess {
         double d0 = 1.0D / ((axisalignedbb.d - axisalignedbb.a) * 2.0D + 1.0D);
         double d1 = 1.0D / ((axisalignedbb.e - axisalignedbb.b) * 2.0D + 1.0D);
         double d2 = 1.0D / ((axisalignedbb.f - axisalignedbb.c) * 2.0D + 1.0D);
-        // Reaper start - Optimize
+        // Beast start - Optimize
         /*
         double d3 = (1.0D - Math.floor(1.0D / d0) * d0) / 2.0D;
         double d4 = (1.0D - Math.floor(1.0D / d2) * d2) / 2.0D;
@@ -2190,7 +2192,7 @@ public abstract class World implements IBlockAccess {
             int j = 0;
             double d3 = (1.0D - Math.floor(1.0D / d0) * d0) / 2.0D;
             double d4 = (1.0D - Math.floor(1.0D / d2) * d2) / 2.0D;
-            // Reaper end
+            // Beast end
 
             for (float f = 0.0F; f <= 1.0F; f = (float) ((double) f + d0)) {
                 for (float f1 = 0.0F; f1 <= 1.0F; f1 = (float) ((double) f1 + d1)) {
@@ -2232,10 +2234,10 @@ public abstract class World implements IBlockAccess {
             return null;
         } else {
             // CraftBukkit start
-            // Reaper start - Optimize map get
+            // Beast start - Optimize map get
             TileEntity tileEntity = capturedTileEntities.get(blockposition);
             if (tileEntity != null) return tileEntity;
-            // Reaper end
+            // Beast end
             // CraftBukkit end
 
             TileEntity tileentity = null;
@@ -2378,7 +2380,7 @@ public abstract class World implements IBlockAccess {
 
     protected void t() {
         if (this.worldProvider.m()) {
-            if (true) { // Reaper - Remove isClientSide check
+            if (true) { // Beast - Remove isClientSide check
                 boolean flag = this.getGameRules().getBoolean("doWeatherCycle");
 
                 if (flag) {
@@ -2525,7 +2527,7 @@ public abstract class World implements IBlockAccess {
         boolean flag = false;
 
         if (this.worldProvider.m()) {
-            flag = this.c(EnumSkyBlock.SKY, blockposition); // Reaper - Optimize
+            flag = this.c(EnumSkyBlock.SKY, blockposition); // Beast - Optimize
         }
 
         flag |= this.c(EnumSkyBlock.BLOCK, blockposition);
@@ -2556,7 +2558,7 @@ public abstract class World implements IBlockAccess {
                 BlockPosition.PooledBlockPosition blockposition_pooledblockposition = BlockPosition.PooledBlockPosition.s();
 
                 try {
-                    EnumDirection[] aenumdirection = EnumDirection.VALUES; // Reaper - Single values array
+                    EnumDirection[] aenumdirection = EnumDirection.VALUES; // Beast - Single values array
                     int k = aenumdirection.length;
 
                     for (int l = 0; l < k; ++l) {
@@ -2587,12 +2589,12 @@ public abstract class World implements IBlockAccess {
     public boolean c(EnumSkyBlock enumskyblock, BlockPosition blockposition) {
         // CraftBukkit start - Use neighbor cache instead of looking up
         Chunk chunk = this.getChunkIfLoaded(blockposition.getX() >> 4, blockposition.getZ() >> 4);
-        // Reaper start - Optimize light lookup
+        // Beast start - Optimize light lookup
         return checkLightFor(enumskyblock, blockposition, chunk);
     }
 
     public boolean checkLightFor(EnumSkyBlock enumskyblock, BlockPosition blockposition, Chunk chunk) {
-        // Reaper end - Optimize light lookup
+        // Beast end - Optimize light lookup
         if (chunk == null || !chunk.areNeighborsLoaded(1) /*!this.areChunksLoaded(blockposition, 17, false)*/) {
             // CraftBukkit end
             return false;
@@ -2600,8 +2602,8 @@ public abstract class World implements IBlockAccess {
             int i = 0;
             int j = 0;
 
-            // this.methodProfiler.a("getBrightness"); // Reaper - Remove MethodProfiler
-            int k = this.getBrightness(enumskyblock, blockposition, chunk); // Reaper - Optimize light lookup
+            // this.methodProfiler.a("getBrightness"); // Beast - Remove MethodProfiler
+            int k = this.getBrightness(enumskyblock, blockposition, chunk); // Beast - Optimize light lookup
             int l = this.a(blockposition, enumskyblock);
             int i1 = blockposition.getX();
             int j1 = blockposition.getY();
@@ -2614,10 +2616,10 @@ public abstract class World implements IBlockAccess {
             int i3;
             int j3;
             int k3;
-            // Reaper start - Optimize BlockPosition
+            // Beast start - Optimize BlockPosition
             BlockPosition.MutableBlockPosition blockposition1 = new BlockPosition.MutableBlockPosition();
             BlockPosition.MutableBlockPosition blockposition2 = blockposition1;
-            // Reaper end
+            // Beast end
 
             if (l > k) {
                 this.J[j++] = 133152;
@@ -2630,21 +2632,21 @@ public abstract class World implements IBlockAccess {
                     j2 = (l1 >> 6 & 63) - 32 + j1;
                     k2 = (l1 >> 12 & 63) - 32 + k1;
                     int l3 = l1 >> 18 & 15;
-                    blockposition1.c(i2, j2, k2); // Reaper - Optimize BlockPosition
+                    blockposition1.c(i2, j2, k2); // Beast - Optimize BlockPosition
 
-                    // Reaper start - Optimize light lookup
+                    // Beast start - Optimize light lookup
                     Chunk chunk1 = getChunkAtWorldCoords(blockposition1);
                     l2 = this.getBrightness(enumskyblock, blockposition1, chunk1);
-                    // Reaper end
+                    // Beast end
                     if (l2 == l3) {
-                        this.setLightFor(enumskyblock, blockposition1, 0, chunk1); // Reaper - Optimize light lookup
+                        this.setLightFor(enumskyblock, blockposition1, 0, chunk1); // Beast - Optimize light lookup
                         if (l3 > 0) {
                             i3 = MathHelper.a(i2 - i1);
                             j3 = MathHelper.a(j2 - j1);
                             k3 = MathHelper.a(k2 - k1);
                             if (i3 + j3 + k3 < 17) {
                                 BlockPosition.PooledBlockPosition blockposition_pooledblockposition = BlockPosition.PooledBlockPosition.s();
-                                EnumDirection[] aenumdirection = EnumDirection.VALUES; // Reaper - Single values array
+                                EnumDirection[] aenumdirection = EnumDirection.VALUES; // Beast - Single values array
                                 int i4 = aenumdirection.length;
 
                                 for (int j4 = 0; j4 < i4; ++j4) {
@@ -2671,23 +2673,23 @@ public abstract class World implements IBlockAccess {
                 i = 0;
             }
 
-            // this.methodProfiler.b(); // Reaper - Remove MethodProfiler
-            // this.methodProfiler.a("checkedPosition < toCheckCount"); // Reaper - Remove MethodProfiler
+            // this.methodProfiler.b(); // Beast - Remove MethodProfiler
+            // this.methodProfiler.a("checkedPosition < toCheckCount"); // Beast - Remove MethodProfiler
 
             while (i < j) {
                 l1 = this.J[i++];
                 i2 = (l1 & 63) - 32 + i1;
                 j2 = (l1 >> 6 & 63) - 32 + j1;
                 k2 = (l1 >> 12 & 63) - 32 + k1;
-                blockposition2.c(i2, j2, k2); // Reaper - Optimize BlockPosition
-                // Reaper start - Optimize light lookup
+                blockposition2.c(i2, j2, k2); // Beast - Optimize BlockPosition
+                // Beast start - Optimize light lookup
                 Chunk chunk1 = getChunkAtWorldCoords(blockposition1);
                 int k5 = this.getBrightness(enumskyblock, blockposition2, chunk1);
-                // Reaper end
+                // Beast end
 
                 l2 = this.a(blockposition2, enumskyblock);
                 if (l2 != k5) {
-                    this.setLightFor(enumskyblock, blockposition2, l2, chunk1); // Reaper - Optimize light lookup
+                    this.setLightFor(enumskyblock, blockposition2, l2, chunk1); // Beast - Optimize light lookup
                     if (l2 > k5) {
                         i3 = Math.abs(i2 - i1);
                         j3 = Math.abs(j2 - j1);
@@ -2723,7 +2725,7 @@ public abstract class World implements IBlockAccess {
                 }
             }
 
-            // this.methodProfiler.b(); // Reaper - Remove MethodProfiler
+            // this.methodProfiler.b(); // Beast - Remove MethodProfiler
             return true;
         }
     }
@@ -2755,11 +2757,11 @@ public abstract class World implements IBlockAccess {
 
         for (int i1 = i; i1 <= j; ++i1) {
             for (int j1 = k; j1 <= l; ++j1) {
-                // Reaper start - Optimize
+                // Beast start - Optimize
                 Chunk chunk = this.getChunkIfLoaded(i1, j1);
                 if (chunk != null) {
                     chunk.a(entity, axisalignedbb, arraylist, predicate);
-                    // Reaper end
+                    // Beast end
                 }
             }
         }
@@ -2811,11 +2813,11 @@ public abstract class World implements IBlockAccess {
 
         for (int i1 = i; i1 < j; ++i1) {
             for (int j1 = k; j1 < l; ++j1) {
-                // Reaper start - Optimize
+                // Beast start - Optimize
                 Chunk chunk = this.getChunkIfLoaded(i1, j1);
                 if (chunk != null) {
                     chunk.a(oclass, axisalignedbb, arraylist, predicate);
-                    // Reaper end
+                    // Beast end
                 }
             }
         }
@@ -2959,7 +2961,7 @@ public abstract class World implements IBlockAccess {
                             return i;
                         } else {
                             i = Math.max(i, this.getBlockPower(blockposition.east(), EnumDirection.EAST));
-                            return /*i >= 15 ? i : i*/i; // Reaper - Optimize
+                            return /*i >= 15 ? i : i*/i; // Beast - Optimize
                         }
                     }
                 }
@@ -2983,7 +2985,7 @@ public abstract class World implements IBlockAccess {
 
     public int z(BlockPosition blockposition) {
         int i = 0;
-        EnumDirection[] aenumdirection = EnumDirection.VALUES; // Reaper - Single values array
+        EnumDirection[] aenumdirection = EnumDirection.VALUES; // Beast - Single values array
         int j = aenumdirection.length;
 
         for (int k = 0; k < j; ++k) {
@@ -3113,11 +3115,11 @@ public abstract class World implements IBlockAccess {
 
     @Nullable
     public EntityHuman a(String s) {
-        // Reaper start - Optimize player lookup
+        // Beast start - Optimize player lookup
         if (true) {
             return this.playersByName.get(s);
         }
-        // Reaper end
+        // Beast end
         for (int i = 0; i < this.players.size(); ++i) {
             EntityHuman entityhuman = (EntityHuman) this.players.get(i);
 
@@ -3131,12 +3133,12 @@ public abstract class World implements IBlockAccess {
 
     @Nullable
     public EntityHuman b(UUID uuid) {
-        // Reaper start - Optimize player lookup
+        // Beast start - Optimize player lookup
         if (true) {
             Entity entity = ((WorldServer) this).entitiesByUUID.get(uuid);
             return entity instanceof EntityHuman ? (EntityHuman) entity : null;
         }
-        // Reaper end
+        // Beast end
         for (int i = 0; i < this.players.size(); ++i) {
             EntityHuman entityhuman = (EntityHuman) this.players.get(i);
 
@@ -3214,7 +3216,7 @@ public abstract class World implements IBlockAccess {
     // Calls the method that checks to see if players are sleeping
     // Called by CraftPlayer.setPermanentSleeping()
     public void checkSleepStatus() {
-        if (true) { // Reaper - Remove isClientSide check
+        if (true) { // Beast - Remove isClientSide check
             this.everyoneSleeping();
         }
     }
@@ -3433,7 +3435,7 @@ public abstract class World implements IBlockAccess {
 
     public boolean shouldStayLoaded(int i,  int j) { return e(i, j); } // Paper - OBFHELPER
     public boolean e(int i, int j) {
-        // Reaper start - Optimize
+        // Beast start - Optimize
         if (!this.keepSpawnInMemory) return false;
         BlockPosition blockposition = this.getSpawn();
         int k = i * 16 + 8 - blockposition.getX();
@@ -3442,7 +3444,7 @@ public abstract class World implements IBlockAccess {
         short keepLoadedRange = paperConfig.keepLoadedRange; // Paper
 
         return k >= -keepLoadedRange && k <= keepLoadedRange && l >= -keepLoadedRange && l <= keepLoadedRange /*&& this.keepSpawnInMemory*/; // CraftBukkit - Added 'this.keepSpawnInMemory' // Paper - Re-add range var 
-        // Reaper end
+        // Beast end
     }
 
     public void a(Packet<?> packet) {
diff --git a/src/main/java/net/minecraft/server/WorldData.java b/src/main/java/net/minecraft/server/WorldData.java
index f0731fdd548a43059672f08435fd33e4ff1ed8d4..619883541a0b697758dfe1631c76957fd46d3911 100644
--- a/src/main/java/net/minecraft/server/WorldData.java
+++ b/src/main/java/net/minecraft/server/WorldData.java
@@ -311,7 +311,7 @@ public class WorldData {
     }
 
     private void a(NBTTagCompound nbttagcompound, NBTTagCompound nbttagcompound1) {
-        NBTTagCompound nbttagcompound2 = new NBTTagCompound(3); // Reaper - Use initial capacity
+        NBTTagCompound nbttagcompound2 = new NBTTagCompound(3); // Beast - Use initial capacity
 
         nbttagcompound2.setString("Name", "1.12.2");
         nbttagcompound2.setInt("Id", 1343);
@@ -356,7 +356,7 @@ public class WorldData {
 
         nbttagcompound.setBoolean("DifficultyLocked", this.D);
         nbttagcompound.set("GameRules", this.O.a());
-        NBTTagCompound nbttagcompound3 = new NBTTagCompound(this.N.size()); // Reaper - Use initial capacity
+        NBTTagCompound nbttagcompound3 = new NBTTagCompound(this.N.size()); // Beast - Use initial capacity
         Iterator iterator = this.N.entrySet().iterator();
 
         while (iterator.hasNext()) {
diff --git a/src/main/java/net/minecraft/server/WorldGenBigTree.java b/src/main/java/net/minecraft/server/WorldGenBigTree.java
index dbf5a3431c4159ee39133c5ae7f1cd004f084f32..f30f2bc66f275b700b2cf40c34d217ab10d1ac9c 100644
--- a/src/main/java/net/minecraft/server/WorldGenBigTree.java
+++ b/src/main/java/net/minecraft/server/WorldGenBigTree.java
@@ -247,14 +247,14 @@ public class WorldGenBigTree extends WorldGenTreeAbstract {
         }
 
         if (!this.f()) {
-            l = null; // Reaper - Fix MC-101232
+            l = null; // Beast - Fix MC-101232
             return false;
         } else {
             this.a();
             this.b();
             this.c();
             this.d();
-            l = null; // Reaper - Fix MC-101232
+            l = null; // Beast - Fix MC-101232
             return true;
         }
     }
diff --git a/src/main/java/net/minecraft/server/WorldGenLargeFeature.java b/src/main/java/net/minecraft/server/WorldGenLargeFeature.java
index e33570df0da1bbc058c91848663b4db0f5fd16bb..142c74b5810e6495142aae227a9259c32c01f29a 100644
--- a/src/main/java/net/minecraft/server/WorldGenLargeFeature.java
+++ b/src/main/java/net/minecraft/server/WorldGenLargeFeature.java
@@ -93,7 +93,7 @@ public class WorldGenLargeFeature extends StructureGenerator {
     public boolean a(BlockPosition blockposition) {
         StructureStart structurestart = this.c(blockposition);
 
-        if (/*structurestart != null &&*/ structurestart instanceof WorldGenLargeFeature.WorldGenLargeFeatureStart && !structurestart.a.isEmpty()) { // Reaper - Optimize
+        if (/*structurestart != null &&*/ structurestart instanceof WorldGenLargeFeature.WorldGenLargeFeatureStart && !structurestart.a.isEmpty()) { // Beast - Optimize
             StructurePiece structurepiece = (StructurePiece) structurestart.a.get(0);
 
             return structurepiece instanceof WorldGenRegistration.WorldGenWitchHut;
diff --git a/src/main/java/net/minecraft/server/WorldGenLightStone1.java b/src/main/java/net/minecraft/server/WorldGenLightStone1.java
index dd46a92d6e7c26d23ec4eb87e296a2b585a76706..4226617b9e15388f43aeeb4e00874f98e5eebea6 100644
--- a/src/main/java/net/minecraft/server/WorldGenLightStone1.java
+++ b/src/main/java/net/minecraft/server/WorldGenLightStone1.java
@@ -19,7 +19,7 @@ public class WorldGenLightStone1 extends WorldGenerator {
 
                 if (world.getType(blockposition1).getMaterial() == Material.AIR) {
                     int j = 0;
-                    EnumDirection[] aenumdirection = EnumDirection.VALUES; // Reaper - Single values array
+                    EnumDirection[] aenumdirection = EnumDirection.VALUES; // Beast - Single values array
                     int k = aenumdirection.length;
 
                     for (int l = 0; l < k; ++l) {
diff --git a/src/main/java/net/minecraft/server/WorldGenLightStone2.java b/src/main/java/net/minecraft/server/WorldGenLightStone2.java
index 9938f68ae5b35dec7f3dea30b3e1f9d132d59bf3..ac24579fe32496a5d590239d6e39e7f98a132a8e 100644
--- a/src/main/java/net/minecraft/server/WorldGenLightStone2.java
+++ b/src/main/java/net/minecraft/server/WorldGenLightStone2.java
@@ -19,7 +19,7 @@ public class WorldGenLightStone2 extends WorldGenerator {
 
                 if (world.getType(blockposition1).getMaterial() == Material.AIR) {
                     int j = 0;
-                    EnumDirection[] aenumdirection = EnumDirection.VALUES; // Reaper - Single values array
+                    EnumDirection[] aenumdirection = EnumDirection.VALUES; // Beast - Single values array
                     int k = aenumdirection.length;
 
                     for (int l = 0; l < k; ++l) {
diff --git a/src/main/java/net/minecraft/server/WorldGenMegaTreeAbstract.java b/src/main/java/net/minecraft/server/WorldGenMegaTreeAbstract.java
index 30ec06b88b9f8576201f9d9523e3916004a4cd66..7550a7f526c18e8d2e6d1a4b1fd55aadb36f677e 100644
--- a/src/main/java/net/minecraft/server/WorldGenMegaTreeAbstract.java
+++ b/src/main/java/net/minecraft/server/WorldGenMegaTreeAbstract.java
@@ -36,7 +36,7 @@ public abstract class WorldGenMegaTreeAbstract extends WorldGenTreeAbstract {
 
                 if (j == 0) {
                     b0 = 1;
-                } else if (/*j >= 1 + i - 2*/false) { // Reaper - Optimize
+                } else if (/*j >= 1 + i - 2*/false) { // Beast - Optimize
                     b0 = 2;
                 }
 
diff --git a/src/main/java/net/minecraft/server/WorldGenMonument.java b/src/main/java/net/minecraft/server/WorldGenMonument.java
index e42bd181e27e7912b7eaf7bda7052e072708f4c0..762c5d29221778595595b9c26597f5ec1b40b74d 100644
--- a/src/main/java/net/minecraft/server/WorldGenMonument.java
+++ b/src/main/java/net/minecraft/server/WorldGenMonument.java
@@ -15,7 +15,7 @@ public class WorldGenMonument extends StructureGenerator {
     private int d;
     private int h;
     public static final List<BiomeBase> a = Arrays.asList(new BiomeBase[] { Biomes.a, Biomes.z, Biomes.i, Biomes.l, Biomes.m});
-    public static final List<BiomeBase> b = java.util.Collections.singletonList(Biomes.z); // Reaper - Optimize
+    public static final List<BiomeBase> b = java.util.Collections.singletonList(Biomes.z); // Beast - Optimize
     private static final List<BiomeBase.BiomeMeta> i = Lists.newArrayList();
 
     public WorldGenMonument() {
@@ -64,7 +64,7 @@ public class WorldGenMonument extends StructureGenerator {
         i1 += (random.nextInt(this.d - this.h) + random.nextInt(this.d - this.h)) / 2;
         j1 += (random.nextInt(this.d - this.h) + random.nextInt(this.d - this.h)) / 2;
         if (k == i1 && l == j1) {
-            // Reaper start - Optimize
+            // Beast start - Optimize
             int i2 = k * 16 + 8;
             int i11 = l * 16 + 8;
             if (!this.g.getWorldChunkManager().a(i2, i11, 16, WorldGenMonument.b)) {
@@ -72,7 +72,7 @@ public class WorldGenMonument extends StructureGenerator {
             }
 
             boolean flag = this.g.getWorldChunkManager().a(i2, i11, 29, WorldGenMonument.a);
-            // Reaper end
+            // Beast end
 
             if (flag) {
                 return true;
@@ -153,7 +153,7 @@ public class WorldGenMonument extends StructureGenerator {
 
             while (iterator.hasNext()) {
                 ChunkCoordIntPair chunkcoordintpair = (ChunkCoordIntPair) iterator.next();
-                NBTTagCompound nbttagcompound1 = new NBTTagCompound(2); // Reaper - Use initial capacity
+                NBTTagCompound nbttagcompound1 = new NBTTagCompound(2); // Beast - Use initial capacity
 
                 nbttagcompound1.setInt("X", chunkcoordintpair.x);
                 nbttagcompound1.setInt("Z", chunkcoordintpair.z);
diff --git a/src/main/java/net/minecraft/server/WorldGenRegistration.java b/src/main/java/net/minecraft/server/WorldGenRegistration.java
index 40942a6d5c36f6639b9b3f9eccd42b6a6588fe0a..294697c8d0c99183fea8a4a5c3b9a34ecd62d653 100644
--- a/src/main/java/net/minecraft/server/WorldGenRegistration.java
+++ b/src/main/java/net/minecraft/server/WorldGenRegistration.java
@@ -32,7 +32,7 @@ public class WorldGenRegistration {
             } else {
                 StructureBoundingBox structureboundingbox1 = this.d();
                 BlockPosition blockposition = new BlockPosition(structureboundingbox1.a, structureboundingbox1.b, structureboundingbox1.c);
-                EnumBlockRotation[] aenumblockrotation = EnumBlockRotation.VALUES; // Reaper - Single values array
+                EnumBlockRotation[] aenumblockrotation = EnumBlockRotation.VALUES; // Beast - Single values array
                 MinecraftServer minecraftserver = world.getMinecraftServer();
                 DefinedStructureManager definedstructuremanager = world.getDataManager().h();
                 DefinedStructureInfo definedstructureinfo = (new DefinedStructureInfo()).a(aenumblockrotation[random.nextInt(aenumblockrotation.length)]).a(Blocks.dj).a(structureboundingbox1);
diff --git a/src/main/java/net/minecraft/server/WorldGenVillagePieces.java b/src/main/java/net/minecraft/server/WorldGenVillagePieces.java
index 287025b8f9f97734ab15456b47b298627470aa2d..2d8e0f49c00be111f83757671eaf9bb4c0e11c03 100644
--- a/src/main/java/net/minecraft/server/WorldGenVillagePieces.java
+++ b/src/main/java/net/minecraft/server/WorldGenVillagePieces.java
@@ -630,9 +630,9 @@ public class WorldGenVillagePieces {
 
             for (i = -1; i <= 2; ++i) {
                 for (j = 0; j <= 8; ++j) {
-                    this.a(world, iblockdata1, j, 4 + i, i, structureboundingbox); // Reaper - Inline
-                    if ((i > -1 || j <= 1) && (i > 0 || j <= 3) && (i > 1 || j != 5)) { // Reaper - Optimize
-                        this.a(world, iblockdata2, j, 4 + i, 5 - i, structureboundingbox); // Reaper - Inline
+                    this.a(world, iblockdata1, j, 4 + i, i, structureboundingbox); // Beast - Inline
+                    if ((i > -1 || j <= 1) && (i > 0 || j <= 3) && (i > 1 || j != 5)) { // Beast - Optimize
+                        this.a(world, iblockdata2, j, 4 + i, 5 - i, structureboundingbox); // Beast - Inline
                     }
                 }
             }
@@ -647,7 +647,7 @@ public class WorldGenVillagePieces {
                 this.a(world, iblockdata5, i, 2 + i, 7 - i, structureboundingbox);
 
                 for (j = 8 - i; j <= 10; ++j) {
-                    this.a(world, iblockdata3, i, 2 + i, j, structureboundingbox); // Reaper - Inline
+                    this.a(world, iblockdata3, i, 2 + i, j, structureboundingbox); // Beast - Inline
                 }
             }
 
@@ -657,7 +657,7 @@ public class WorldGenVillagePieces {
 
             for (i = 6; i <= 8; ++i) {
                 for (j = 5; j <= 10; ++j) {
-                    this.a(world, iblockdata4, i, 12 - i, j, structureboundingbox); // Reaper - Inline
+                    this.a(world, iblockdata4, i, 12 - i, j, structureboundingbox); // Beast - Inline
                 }
             }
 
@@ -691,7 +691,7 @@ public class WorldGenVillagePieces {
             this.a(world, structureboundingbox, random, 2, 1, 0, EnumDirection.NORTH);
             this.a(world, structureboundingbox, 1, 0, -1, 3, 2, -1, Blocks.AIR.getBlockData(), Blocks.AIR.getBlockData(), false);
             if (this.a(world, 2, 0, -1, structureboundingbox).getMaterial() == Material.AIR && this.a(world, 2, -1, -1, structureboundingbox).getMaterial() != Material.AIR) {
-                this.a(world, iblockdata1, 2, 0, -1, structureboundingbox); // Reaper - Inline
+                this.a(world, iblockdata1, 2, 0, -1, structureboundingbox); // Beast - Inline
                 if (this.a(world, 2, -1, -1, structureboundingbox).getBlock() == Blocks.GRASS_PATH) {
                     this.a(world, Blocks.GRASS.getBlockData(), 2, -1, -1, structureboundingbox);
                 }
@@ -779,8 +779,8 @@ public class WorldGenVillagePieces {
 
             for (i = -1; i <= 2; ++i) {
                 for (j = 0; j <= 8; ++j) {
-                    this.a(world, iblockdata1, j, 4 + i, i, structureboundingbox); // Reaper - Inline
-                    this.a(world, iblockdata2, j, 4 + i, 5 - i, structureboundingbox); // Reaper - Inline
+                    this.a(world, iblockdata1, j, 4 + i, i, structureboundingbox); // Beast - Inline
+                    this.a(world, iblockdata2, j, 4 + i, 5 - i, structureboundingbox); // Beast - Inline
                 }
             }
 
@@ -799,7 +799,7 @@ public class WorldGenVillagePieces {
             this.a(world, iblockdata6, 2, 1, 3, structureboundingbox);
             this.a(world, Blocks.WOODEN_PRESSURE_PLATE.getBlockData(), 2, 2, 3, structureboundingbox);
             this.a(world, iblockdata4, 1, 1, 4, structureboundingbox);
-            this.a(world, iblockdata1, 2, 1, 4, structureboundingbox); // Reaper - Inline
+            this.a(world, iblockdata1, 2, 1, 4, structureboundingbox); // Beast - Inline
             this.a(world, iblockdata3, 1, 1, 3, structureboundingbox);
             this.a(world, structureboundingbox, 5, 0, 1, 7, 0, 3, Blocks.DOUBLE_STONE_SLAB.getBlockData(), Blocks.DOUBLE_STONE_SLAB.getBlockData(), false);
             this.a(world, Blocks.DOUBLE_STONE_SLAB.getBlockData(), 6, 1, 1, structureboundingbox);
@@ -809,7 +809,7 @@ public class WorldGenVillagePieces {
             this.a(world, EnumDirection.NORTH, 2, 3, 1, structureboundingbox);
             this.a(world, structureboundingbox, random, 2, 1, 0, EnumDirection.NORTH);
             if (this.a(world, 2, 0, -1, structureboundingbox).getMaterial() == Material.AIR && this.a(world, 2, -1, -1, structureboundingbox).getMaterial() != Material.AIR) {
-                this.a(world, iblockdata1, 2, 0, -1, structureboundingbox); // Reaper - Inline
+                this.a(world, iblockdata1, 2, 0, -1, structureboundingbox); // Beast - Inline
                 if (this.a(world, 2, -1, -1, structureboundingbox).getBlock() == Blocks.GRASS_PATH) {
                     this.a(world, Blocks.GRASS.getBlockData(), 2, -1, -1, structureboundingbox);
                 }
@@ -1589,15 +1589,15 @@ public class WorldGenVillagePieces {
                 default:
                     return WorldGenVillagePieces.d(worldgenvillagepieces_worldgenvillagestartpiece, list, random, this.l.a - 1, this.l.b + i, this.l.c + j, EnumDirection.WEST, this.e());
 
-                    /* // Reaper start - Optimize
+                    /* // Beast start - Optimize
                 case SOUTH:
                     return WorldGenVillagePieces.d(worldgenvillagepieces_worldgenvillagestartpiece, list, random, this.l.a - 1, this.l.b + i, this.l.c + j, EnumDirection.WEST, this.e());
-                    */ // Reaper end
+                    */ // Beast end
 
                 case WEST:
-                    /* // Reaper start - Optimize
+                    /* // Beast start - Optimize
                     return WorldGenVillagePieces.d(worldgenvillagepieces_worldgenvillagestartpiece, list, random, this.l.a + j, this.l.b + i, this.l.c - 1, EnumDirection.NORTH, this.e());
-                    */ // Reaper end
+                    */ // Beast end
 
                 case EAST:
                     return WorldGenVillagePieces.d(worldgenvillagepieces_worldgenvillagestartpiece, list, random, this.l.a + j, this.l.b + i, this.l.c - 1, EnumDirection.NORTH, this.e());
@@ -1617,15 +1617,15 @@ public class WorldGenVillagePieces {
                 default:
                     return WorldGenVillagePieces.d(worldgenvillagepieces_worldgenvillagestartpiece, list, random, this.l.d + 1, this.l.b + i, this.l.c + j, EnumDirection.EAST, this.e());
 
-                    /* // Reaper start - Optimize
+                    /* // Beast start - Optimize
                 case SOUTH:
                     return WorldGenVillagePieces.d(worldgenvillagepieces_worldgenvillagestartpiece, list, random, this.l.d + 1, this.l.b + i, this.l.c + j, EnumDirection.EAST, this.e());
-                    */ // Reaper end
+                    */ // Beast end
 
                 case WEST:
-                    /* // Reaper start - Optimize
+                    /* // Beast start - Optimize
                     return WorldGenVillagePieces.d(worldgenvillagepieces_worldgenvillagestartpiece, list, random, this.l.a + j, this.l.b + i, this.l.f + 1, EnumDirection.SOUTH, this.e());
-                    */ // Reaper end
+                    */ // Beast end
 
                 case EAST:
                     return WorldGenVillagePieces.d(worldgenvillagepieces_worldgenvillagestartpiece, list, random, this.l.a + j, this.l.b + i, this.l.f + 1, EnumDirection.SOUTH, this.e());
@@ -1677,7 +1677,7 @@ public class WorldGenVillagePieces {
                         EntityZombieVillager entityzombievillager = new EntityZombieVillager(world);
 
                         entityzombievillager.setPositionRotation((double) j1 + 0.5D, (double) k1, (double) l1 + 0.5D, 0.0F, 0.0F);
-                        entityzombievillager.prepare(world.D(entityzombievillager.blockPos), (GroupDataEntity) null); // Reaper - Cache current block pos
+                        entityzombievillager.prepare(world.D(entityzombievillager.blockPos), (GroupDataEntity) null); // Beast - Cache current block pos
                         entityzombievillager.setProfession(this.c(i1, 0));
                         entityzombievillager.cW();
                         world.addEntity(entityzombievillager, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.CHUNK_GEN); // CraftBukkit - add SpawnReason
@@ -1686,7 +1686,7 @@ public class WorldGenVillagePieces {
 
                         entityvillager.setPositionRotation((double) j1 + 0.5D, (double) k1, (double) l1 + 0.5D, 0.0F, 0.0F);
                         entityvillager.setProfession(this.c(i1, world.random.nextInt(6)));
-                        entityvillager.a(world.D(entityvillager.blockPos), (GroupDataEntity) null, false); // Reaper - Cache current block pos
+                        entityvillager.a(world.D(entityvillager.blockPos), (GroupDataEntity) null, false); // Beast - Cache current block pos
                         world.addEntity(entityvillager, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.CHUNK_GEN); // CraftBukkit - add SpawnReason
                     }
                 }
diff --git a/src/main/java/net/minecraft/server/WorldManager.java b/src/main/java/net/minecraft/server/WorldManager.java
index 6f1a8bc5db6ce8f3ba28060748a3e80476b605cd..2b00186c334977952b63e19a4568d8748af2a19d 100644
--- a/src/main/java/net/minecraft/server/WorldManager.java
+++ b/src/main/java/net/minecraft/server/WorldManager.java
@@ -70,29 +70,29 @@ public class WorldManager implements IWorldAccess {
         // Paper start
         java.util.List<? extends EntityHuman> list = entity != null ? entity.world.players : this.a.getPlayerList().v();
         Iterator<? extends EntityHuman> iterator = list.iterator();
-        PacketPlayOutBlockBreakAnimation packet = null; // Reaper - Cache block break animation packet
+        PacketPlayOutBlockBreakAnimation packet = null; // Beast - Cache block break animation packet
         while (iterator.hasNext()) {
             EntityHuman human = iterator.next();
             if (!(human instanceof EntityPlayer)) continue;
             EntityPlayer entityplayer = (EntityPlayer) human;
             // Paper end
 
-            if (/*entityplayer != null*/true && entityplayer.world == this.world && entityplayer.getId() != i) { // Reaper - Optimize
+            if (/*entityplayer != null*/true && entityplayer.world == this.world && entityplayer.getId() != i) { // Beast - Optimize
                 double d0 = (double) blockposition.getX() - entityplayer.locX;
                 double d1 = (double) blockposition.getY() - entityplayer.locY;
                 double d2 = (double) blockposition.getZ() - entityplayer.locZ;
 
                 // CraftBukkit start
-                if (entityhuman instanceof EntityPlayer && !entityplayer.getBukkitEntity().canSee(((EntityPlayer) entityhuman).getBukkitEntity())) { // Reaper - Optimize
+                if (entityhuman instanceof EntityPlayer && !entityplayer.getBukkitEntity().canSee(((EntityPlayer) entityhuman).getBukkitEntity())) { // Beast - Optimize
                     continue;
                 }
                 // CraftBukkit end
 
                 if (d0 * d0 + d1 * d1 + d2 * d2 < 1024.0D) {
-                    // Reaper start - Cache block break animation packet
+                    // Beast start - Cache block break animation packet
                     if (packet == null) packet = new PacketPlayOutBlockBreakAnimation(i, blockposition, j);
                     entityplayer.playerConnection.sendPacket(packet);
-                    // Reaper end
+                    // Beast end
                 }
             }
         }
diff --git a/src/main/java/net/minecraft/server/WorldMap.java b/src/main/java/net/minecraft/server/WorldMap.java
index 9e6d91726ace6d6c70688562bffe935986b5c4fc..395bed52083a9698e80b1c2fb91c55b8fd147315 100644
--- a/src/main/java/net/minecraft/server/WorldMap.java
+++ b/src/main/java/net/minecraft/server/WorldMap.java
@@ -1,6 +1,6 @@
 package net.minecraft.server;
 
-import com.github.ruviolence.reaper.BeastConfig;
+import com.homomc.beast.BeastConfig;
 import com.google.common.base.Charsets;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
@@ -106,11 +106,11 @@ public class WorldMap extends PersistentBase {
             for (int k = 0; k < short1; ++k) {
                 int l = k + j;
 
-                if (/*l >= 0 || l < 128*/true) { // Reaper - Optimize
+                if (/*l >= 0 || l < 128*/true) { // Beast - Optimize
                     for (int i1 = 0; i1 < short0; ++i1) {
                         int j1 = i1 + i;
 
-                        if (/*j1 >= 0 || j1 < 128*/true) { // Reaper - Optimize
+                        if (/*j1 >= 0 || j1 < 128*/true) { // Beast - Optimize
                             this.colors[j1 + l * 128] = abyte[i1 + k * short0];
                         }
                     }
@@ -213,7 +213,7 @@ public class WorldMap extends PersistentBase {
             itemstack.a("Decorations", (NBTBase) nbttaglist);
         }
 
-        NBTTagCompound nbttagcompound = new NBTTagCompound(5); // Reaper - Use initial capacity
+        NBTTagCompound nbttagcompound = new NBTTagCompound(5); // Beast - Use initial capacity
 
         nbttagcompound.setByte("type", mapicon_type.a());
         nbttagcompound.setString("id", s);
@@ -283,11 +283,11 @@ public class WorldMap extends PersistentBase {
             }
         }
 
-        if (countMapIcon() >= BeastConfig.mapDecorationsLimit) return; // Reaper - Limit decorations
+        if (countMapIcon() >= BeastConfig.mapDecorationsLimit) return; // Beast - Limit decorations
         this.decorations.put(s, new MapIcon(mapicon_type, b0, b1, b2));
     }
 
-    // Reaper start - Limit decorations
+    // Beast start - Limit decorations
     private int countMapIcon() {
         int count = 0;
 
@@ -306,7 +306,7 @@ public class WorldMap extends PersistentBase {
 
         return count;
     }
-    // Reaper end
+    // Beast end
 
     @Nullable
     public Packet<?> a(ItemStack itemstack, World world, EntityHuman entityhuman) {
diff --git a/src/main/java/net/minecraft/server/WorldNBTStorage.java b/src/main/java/net/minecraft/server/WorldNBTStorage.java
index ceca6c6e80981c08b3e863fc0082c648913d7e9c..ac3efdbb1bdf33a29b31117c440a789c0386be99 100644
--- a/src/main/java/net/minecraft/server/WorldNBTStorage.java
+++ b/src/main/java/net/minecraft/server/WorldNBTStorage.java
@@ -108,7 +108,7 @@ public class WorldNBTStorage implements IDataManager, IPlayerFileData {
 
     public void saveWorldData(WorldData worlddata, @Nullable NBTTagCompound nbttagcompound) {
         NBTTagCompound nbttagcompound1 = worlddata.a(nbttagcompound);
-        NBTTagCompound nbttagcompound2 = new NBTTagCompound(1); // Reaper - Use initial capacity
+        NBTTagCompound nbttagcompound2 = new NBTTagCompound(1); // Beast - Use initial capacity
 
         nbttagcompound2.set("Data", nbttagcompound1);
 
@@ -168,10 +168,10 @@ public class WorldNBTStorage implements IDataManager, IPlayerFileData {
             File file = new File(this.playerDir, entityhuman.bn() + ".dat");
             // Spigot Start
             boolean usingWrongFile = false;
-            boolean normalFile = file.exists() && file.isFile(); // Reaper - Ensures normal file
-            if ( org.bukkit.Bukkit.getOnlineMode() && !normalFile ) // Paper - Check online mode first // Reaper - Ensures normal file
+            boolean normalFile = file.exists() && file.isFile(); // Beast - Ensures normal file
+            if ( org.bukkit.Bukkit.getOnlineMode() && !normalFile ) // Paper - Check online mode first // Beast - Ensures normal file
             {
-                file = new File( this.playerDir, com.eatthepath.uuid.FastUUID.toString(UUID.nameUUIDFromBytes( ( "OfflinePlayer:" + entityhuman.getName() ).getBytes( "UTF-8" ) )) + ".dat"); // Reaper - Use FastUUID
+                file = new File( this.playerDir, com.eatthepath.uuid.FastUUID.toString(UUID.nameUUIDFromBytes( ( "OfflinePlayer:" + entityhuman.getName() ).getBytes( "UTF-8" ) )) + ".dat"); // Beast - Use FastUUID
                 if ( file.exists() )
                 {
                     usingWrongFile = true;
@@ -180,7 +180,7 @@ public class WorldNBTStorage implements IDataManager, IPlayerFileData {
             }
             // Spigot End
 
-            if (normalFile) { // Reaper - Avoid double I/O operation
+            if (normalFile) { // Beast - Avoid double I/O operation
                 nbttagcompound = NBTCompressedStreamTools.a((InputStream) (new FileInputStream(file)));
             }
             // Spigot Start
@@ -198,7 +198,7 @@ public class WorldNBTStorage implements IDataManager, IPlayerFileData {
             if (entityhuman instanceof EntityPlayer) {
                 CraftPlayer player = (CraftPlayer) entityhuman.getBukkitEntity();
                 // Only update first played if it is older than the one we have
-                long modified = new File(this.playerDir, com.eatthepath.uuid.FastUUID.toString(entityhuman.getUniqueID()) + ".dat").lastModified(); // Reaper - Use FastUUID
+                long modified = new File(this.playerDir, com.eatthepath.uuid.FastUUID.toString(entityhuman.getUniqueID()) + ".dat").lastModified(); // Beast - Use FastUUID
                 if (modified < player.getFirstPlayed()) {
                     player.setFirstPlayed(modified);
                 }
diff --git a/src/main/java/net/minecraft/server/WorldProvider.java b/src/main/java/net/minecraft/server/WorldProvider.java
index 902dc7f8c326b87d5912b5f98100af2a4d9d677a..cb20636f0694ce9900ad6d77e24d4658b2703789 100644
--- a/src/main/java/net/minecraft/server/WorldProvider.java
+++ b/src/main/java/net/minecraft/server/WorldProvider.java
@@ -44,7 +44,7 @@ public abstract class WorldProvider {
             WorldGenFlatInfo worldgenflatinfo = WorldGenFlatInfo.a(this.b.getWorldData().getGeneratorOptions());
 
             this.c = new WorldChunkManagerHell(BiomeBase.getBiome(worldgenflatinfo.a(), Biomes.b));
-        } else if (false) { // Reaper - Remove DEBUG_ALL_BLOCK_STATES world type
+        } else if (false) { // Beast - Remove DEBUG_ALL_BLOCK_STATES world type
             this.c = new WorldChunkManagerHell(Biomes.c);
         } else {
             this.c = new WorldChunkManager(this.b.getWorldData());
@@ -53,7 +53,7 @@ public abstract class WorldProvider {
     }
 
     public ChunkGenerator getChunkGenerator() {
-        return (ChunkGenerator) (this.type == WorldType.FLAT ? new ChunkProviderFlat(this.b, this.b.getSeed(), this.b.getWorldData().shouldGenerateMapFeatures(), this.i) : (false ? new ChunkProviderDebug(this.b) : (this.type == WorldType.CUSTOMIZED ? new ChunkProviderGenerate(this.b, this.b.getSeed(), this.b.getWorldData().shouldGenerateMapFeatures(), this.i) : new ChunkProviderGenerate(this.b, this.b.getSeed(), this.b.getWorldData().shouldGenerateMapFeatures(), this.i)))); // Reaper - Remove DEBUG_ALL_BLOCK_STATES world type
+        return (ChunkGenerator) (this.type == WorldType.FLAT ? new ChunkProviderFlat(this.b, this.b.getSeed(), this.b.getWorldData().shouldGenerateMapFeatures(), this.i) : (false ? new ChunkProviderDebug(this.b) : (this.type == WorldType.CUSTOMIZED ? new ChunkProviderGenerate(this.b, this.b.getSeed(), this.b.getWorldData().shouldGenerateMapFeatures(), this.i) : new ChunkProviderGenerate(this.b, this.b.getSeed(), this.b.getWorldData().shouldGenerateMapFeatures(), this.i)))); // Beast - Remove DEBUG_ALL_BLOCK_STATES world type
     }
 
     public boolean canSpawn(int i, int j) {
diff --git a/src/main/java/net/minecraft/server/WorldServer.java b/src/main/java/net/minecraft/server/WorldServer.java
index 7eb8c21349b36479e31c23f95c5db664592dc172..9c00c256f00333fa0086bfd5d3c0e613f55de595 100644
--- a/src/main/java/net/minecraft/server/WorldServer.java
+++ b/src/main/java/net/minecraft/server/WorldServer.java
@@ -1,6 +1,6 @@
 package net.minecraft.server;
 
-import com.github.ruviolence.reaper.BeastConfig;
+import com.homomc.beast.BeastConfig;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.util.concurrent.ListenableFuture;
@@ -45,12 +45,12 @@ public class WorldServer extends World implements IAsyncTaskHandler {
     private final PortalTravelAgent portalTravelAgent;
     private final SpawnerCreature spawnerCreature = new SpawnerCreature();
     protected final VillageSiege siegeManager = new VillageSiege(this);
-    /* // Reaper start - Optimize block event queue
+    /* // Beast start - Optimize block event queue
     private final WorldServer.BlockActionDataList[] U = new WorldServer.BlockActionDataList[] { new WorldServer.BlockActionDataList(null), new WorldServer.BlockActionDataList(null)};
     private int V;
     */
-    private final Set<BlockActionData> blockEventPending = new java.util.LinkedHashSet<>(); // Reaper
-    // Reaper end
+    private final Set<BlockActionData> blockEventPending = new java.util.LinkedHashSet<>(); // Beast
+    // Beast end
     private final List<NextTickListEntry> W = Lists.newArrayList();
 
     // CraftBukkit start
@@ -233,12 +233,12 @@ public class WorldServer extends World implements IAsyncTaskHandler {
             if (!(result instanceof TileEntityCommand)) {
                 result = fixTileEntity(pos, type, result);
             }
-            /* // Reaper start - Optimize
+            /* // Beast start - Optimize
         } else if (type == Blocks.STRUCTURE_BLOCK) {
             if (!(result instanceof TileEntityStructure)) {
                 result = fixTileEntity(pos, type, result);
             }
-            */ // Reaper end
+            */ // Beast end
         } else if (type == Blocks.BED) {
             if (!(result instanceof TileEntityBed)) {
                 result = fixTileEntity(pos, type, result);
@@ -296,15 +296,15 @@ public class WorldServer extends World implements IAsyncTaskHandler {
             this.f();
         }
 
-        // this.methodProfiler.a("mobSpawner"); // Reaper - Remove MethodProfiler
+        // this.methodProfiler.a("mobSpawner"); // Beast - Remove MethodProfiler
         // CraftBukkit start - Only call spawner if we have players online and the world allows for mobs or animals
         long time = this.worldData.getTime();
-        if (this.getGameRules().getBoolean("doMobSpawning") && true && (this.allowMonsters || this.allowAnimals) && (this instanceof WorldServer && this.players.size() > 0)) { // Reaper - Remove DEBUG_ALL_BLOCK_STATES world type
+        if (this.getGameRules().getBoolean("doMobSpawning") && true && (this.allowMonsters || this.allowAnimals) && (this instanceof WorldServer && this.players.size() > 0)) { // Beast - Remove DEBUG_ALL_BLOCK_STATES world type
             this.spawnerCreature.a(this, this.allowMonsters && (this.ticksPerMonsterSpawns != 0 && time % this.ticksPerMonsterSpawns == 0L), this.allowAnimals && (this.ticksPerAnimalSpawns != 0 && time % this.ticksPerAnimalSpawns == 0L), this.worldData.getTime() % 400L == 0L);
             // CraftBukkit end
         }
 
-        // this.methodProfiler.c("chunkSource"); // Reaper - Remove MethodProfiler
+        // this.methodProfiler.c("chunkSource"); // Beast - Remove MethodProfiler
         this.chunkProvider.unloadChunks();
         int j = this.a(1.0F);
 
@@ -317,20 +317,20 @@ public class WorldServer extends World implements IAsyncTaskHandler {
             this.worldData.setDayTime(this.worldData.getDayTime() + 1L);
         }
 
-        // this.methodProfiler.c("tickPending"); // Reaper - Remove MethodProfiler
+        // this.methodProfiler.c("tickPending"); // Beast - Remove MethodProfiler
         this.a(false);
-        // this.methodProfiler.c("tickBlocks"); // Reaper - Remove MethodProfiler
+        // this.methodProfiler.c("tickBlocks"); // Beast - Remove MethodProfiler
         this.j();
-        // this.methodProfiler.c("chunkMap"); // Reaper - Remove MethodProfiler
+        // this.methodProfiler.c("chunkMap"); // Beast - Remove MethodProfiler
         this.manager.flush();
-        // this.methodProfiler.c("village"); // Reaper - Remove MethodProfiler
-        if (!BeastConfig.disableVillages) { // Reaper
+        // this.methodProfiler.c("village"); // Beast - Remove MethodProfiler
+        if (!BeastConfig.disableVillages) { // Beast
         this.villages.tick();
         if (paperConfig.villageSiegesEnabled) { this.siegeManager.a(); } // Paper - Allow disabling village sieges
-        } // Reaper
-        // this.methodProfiler.c("portalForcer"); // Reaper - Remove MethodProfiler
+        } // Beast
+        // this.methodProfiler.c("portalForcer"); // Beast - Remove MethodProfiler
         this.portalTravelAgent.a(this.getTime());
-        // this.methodProfiler.b(); // Reaper - Remove MethodProfiler
+        // this.methodProfiler.b(); // Beast - Remove MethodProfiler
         this.aq();
 
         this.getWorld().processChunkGC(); // CraftBukkit
@@ -408,7 +408,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
     }
 
     public boolean everyoneDeeplySleeping() {
-        if (this.Q) { // Reaper - Remove isClientSide check
+        if (this.Q) { // Beast - Remove isClientSide check
             Iterator iterator = this.players.iterator();
 
             // CraftBukkit - This allows us to assume that some people are in bed but not really, allowing time to pass in spite of AFKers
@@ -441,7 +441,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
     }
 
     protected void i() {
-        // this.methodProfiler.a("playerCheckLight"); // Reaper - Remove MethodProfiler
+        // this.methodProfiler.a("playerCheckLight"); // Beast - Remove MethodProfiler
         if (spigotConfig.randomLightUpdates && !this.players.isEmpty()) { // Spigot
             int i = this.random.nextInt(this.players.size());
             EntityHuman entityhuman = (EntityHuman) this.players.get(i);
@@ -452,12 +452,12 @@ public class WorldServer extends World implements IAsyncTaskHandler {
             this.w(new BlockPosition(j, k, l));
         }
 
-        // this.methodProfiler.b(); // Reaper - Remove MethodProfiler
+        // this.methodProfiler.b(); // Beast - Remove MethodProfiler
     }
 
     protected void j() {
         this.i();
-        if (false) { // Reaper start - Remove DEBUG_ALL_BLOCK_STATES world type
+        if (false) { // Beast start - Remove DEBUG_ALL_BLOCK_STATES world type
             Iterator iterator = this.manager.b();
 
             while (iterator.hasNext()) {
@@ -469,25 +469,25 @@ public class WorldServer extends World implements IAsyncTaskHandler {
             boolean flag = this.isRaining();
             boolean flag1 = this.X();
 
-            // this.methodProfiler.a("pollingChunks"); // Reaper - Remove MethodProfiler
+            // this.methodProfiler.a("pollingChunks"); // Beast - Remove MethodProfiler
 
-            for (Iterator iterator1 = this.manager.b(); iterator1.hasNext(); /*this.methodProfiler.b()*/) { // Reaper - Remove MethodProfiler
-                // this.methodProfiler.a("getChunk"); // Reaper - Remove MethodProfiler
+            for (Iterator iterator1 = this.manager.b(); iterator1.hasNext(); /*this.methodProfiler.b()*/) { // Beast - Remove MethodProfiler
+                // this.methodProfiler.a("getChunk"); // Beast - Remove MethodProfiler
                 Chunk chunk = (Chunk) iterator1.next();
                 int j = chunk.locX * 16;
                 int k = chunk.locZ * 16;
 
-                // this.methodProfiler.c("checkNextLight"); // Reaper - Remove MethodProfiler
+                // this.methodProfiler.c("checkNextLight"); // Beast - Remove MethodProfiler
                 chunk.n();
-                // this.methodProfiler.c("tickChunk"); // Reaper - Remove MethodProfiler
+                // this.methodProfiler.c("tickChunk"); // Beast - Remove MethodProfiler
                 chunk.b(false);
                 if ( !chunk.areNeighborsLoaded( 1 ) ) continue; // Spigot
-                // this.methodProfiler.c("thunder"); // Reaper - Remove MethodProfiler
+                // this.methodProfiler.c("thunder"); // Beast - Remove MethodProfiler
                 int l;
                 BlockPosition blockposition;
 
                 // Paper - Disable thunder
-                if (!this.paperConfig.disableThunder && flag && flag1 && chunk.shouldDoLightning(this.random)) { // Reaper - Cache random ticks
+                if (!this.paperConfig.disableThunder && flag && flag1 && chunk.shouldDoLightning(this.random)) { // Beast - Cache random ticks
                     this.l = this.l * 3 + 1013904223;
                     l = this.l >> 2;
                     blockposition = this.a(new BlockPosition(j + (l & 15), 0, k + (l >> 8 & 15)));
@@ -508,8 +508,8 @@ public class WorldServer extends World implements IAsyncTaskHandler {
                     }
                 }
 
-                // this.methodProfiler.c("iceandsnow"); // Reaper - Remove MethodProfiler
-                if (!this.paperConfig.disableIceAndSnow && chunk.shouldDoIceAndSnow(this.random)) { // Paper - Disable ice and snow // Reaper - Cache random ticks
+                // this.methodProfiler.c("iceandsnow"); // Beast - Remove MethodProfiler
+                if (!this.paperConfig.disableIceAndSnow && chunk.shouldDoIceAndSnow(this.random)) { // Paper - Disable ice and snow // Beast - Cache random ticks
                     this.l = this.l * 3 + 1013904223;
                     l = this.l >> 2;
                     blockposition = this.p(new BlockPosition(j + (l & 15), 0, k + (l >> 8 & 15)));
@@ -545,19 +545,19 @@ public class WorldServer extends World implements IAsyncTaskHandler {
                                 IBlockData iblockdata = chunksection.getType(i2, k2, j2);
                                 Block block = iblockdata.getBlock();
 
-                                // this.methodProfiler.a("randomTick"); // Reaper - Remove MethodProfiler
+                                // this.methodProfiler.a("randomTick"); // Beast - Remove MethodProfiler
                                 if (block.isTicking()) {
                                     block.a((World) this, new BlockPosition(i2 + j, k2 + chunksection.getYPosition(), j2 + k), iblockdata, this.random);
                                 }
 
-                                // this.methodProfiler.b(); // Reaper - Remove MethodProfiler
+                                // this.methodProfiler.b(); // Beast - Remove MethodProfiler
                             }
                         }
                     }
                 }
             }
 
-            // this.methodProfiler.b(); // Reaper - Remove MethodProfiler
+            // this.methodProfiler.b(); // Beast - Remove MethodProfiler
         }
     }
 
@@ -659,7 +659,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
                 return;
             }
         } else {
-            // this.m(); // Reaper - Optimize
+            // this.m(); // Beast - Optimize
         }
 
         this.worldProvider.s();
@@ -669,7 +669,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
 
     protected void l() {
         super.l();
-        // this.methodProfiler.c("players"); // Reaper - Remove MethodProfiler
+        // this.methodProfiler.c("players"); // Beast - Remove MethodProfiler
 
         for (int i = 0; i < this.players.size(); ++i) {
             Entity entity = (Entity) this.players.get(i);
@@ -683,7 +683,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
                 entity.stopRiding();
             }
 
-            // this.methodProfiler.a("tick"); // Reaper - Remove MethodProfiler
+            // this.methodProfiler.a("tick"); // Beast - Remove MethodProfiler
             if (!entity.dead) {
                 try {
                     this.h(entity);
@@ -696,8 +696,8 @@ public class WorldServer extends World implements IAsyncTaskHandler {
                 }
             }
 
-            // this.methodProfiler.b(); // Reaper - Remove MethodProfiler
-            // this.methodProfiler.a("remove"); // Reaper - Remove MethodProfiler
+            // this.methodProfiler.b(); // Beast - Remove MethodProfiler
+            // this.methodProfiler.a("remove"); // Beast - Remove MethodProfiler
             if (entity.dead) {
                 int j = entity.ab;
                 int k = entity.ad;
@@ -710,7 +710,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
                 this.c(entity);
             }
 
-            // this.methodProfiler.b(); // Reaper - Remove MethodProfiler
+            // this.methodProfiler.b(); // Beast - Remove MethodProfiler
         }
 
     }
@@ -720,7 +720,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
     }
 
     public boolean a(boolean flag) {
-        if (false) { // Reaper start - Remove DEBUG_ALL_BLOCK_STATES world type
+        if (false) { // Beast start - Remove DEBUG_ALL_BLOCK_STATES world type
             return false;
         } else {
             int i = this.nextTickList.size();
@@ -738,12 +738,12 @@ public class WorldServer extends World implements IAsyncTaskHandler {
                     // CraftBukkit end
                 }
 
-                // this.methodProfiler.a("cleaning"); // Reaper - Remove MethodProfiler
+                // this.methodProfiler.a("cleaning"); // Beast - Remove MethodProfiler
 
                 NextTickListEntry nextticklistentry;
 
                 for (int j = 0; j < i; ++j) {
-                    // Reaper start - Fix TileEntity ticking crash
+                    // Beast start - Fix TileEntity ticking crash
                     try {
                     nextticklistentry = (NextTickListEntry) this.nextTickList.first();
                     } catch (java.util.NoSuchElementException e) {
@@ -751,7 +751,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
                         nextTickList.fixInconsistence();
                         break;
                     }
-                    // Reaper end
+                    // Beast end
                     if (!flag && nextticklistentry.b > this.worldData.getTime()) {
                         break;
                     }
@@ -762,8 +762,8 @@ public class WorldServer extends World implements IAsyncTaskHandler {
                     this.W.add(nextticklistentry);
                 }
 
-                // this.methodProfiler.b(); // Reaper - Remove MethodProfiler
-                // this.methodProfiler.a("ticking"); // Reaper - Remove MethodProfiler
+                // this.methodProfiler.b(); // Beast - Remove MethodProfiler
+                // this.methodProfiler.a("ticking"); // Beast - Remove MethodProfiler
                 Iterator iterator = this.W.iterator();
 
                 while (iterator.hasNext()) {
@@ -791,7 +791,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
                     }
                 }
 
-                // this.methodProfiler.b(); // Reaper - Remove MethodProfiler
+                // this.methodProfiler.b(); // Beast - Remove MethodProfiler
                 this.W.clear();
                 return !this.nextTickList.isEmpty();
             }
@@ -930,7 +930,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
         if (!this.worldData.v()) {
             try {
                 this.b(worldsettings);
-                if (false) { // Reaper start - Remove DEBUG_ALL_BLOCK_STATES world type
+                if (false) { // Beast start - Remove DEBUG_ALL_BLOCK_STATES world type
                     this.ap();
                 }
 
@@ -969,7 +969,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
     private void b(WorldSettings worldsettings) {
         if (!this.worldProvider.e()) {
             this.worldData.setSpawn(BlockPosition.ZERO.up(this.worldProvider.getSeaLevel()));
-        } else if (false) { // Reaper start - Remove DEBUG_ALL_BLOCK_STATES world type
+        } else if (false) { // Beast start - Remove DEBUG_ALL_BLOCK_STATES world type
             this.worldData.setSpawn(BlockPosition.ZERO.up());
         } else {
             this.isLoading = true;
@@ -1150,8 +1150,8 @@ public class WorldServer extends World implements IAsyncTaskHandler {
         } else {
             UUID uuid = entity.getUniqueID();
 
-            Entity entity1 = this.entitiesByUUID.get(uuid); // Reaper - Optimize map get
-            if (entity1 != null) { // Reaper - Optimize map get
+            Entity entity1 = this.entitiesByUUID.get(uuid); // Beast - Optimize map get
+            if (entity1 != null) { // Beast - Optimize map get
 
                 if (this.f.contains(entity1) || entity1.dead) { // Paper - if dupe is dead, overwrite
                     this.f.remove(entity1);
@@ -1210,7 +1210,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
             int i = aentity.length;
 
             for (int j = 0; j < i; ++j) {
-                Entity entity1 = aentity[j]; // Reaper - Inline
+                Entity entity1 = aentity[j]; // Beast - Inline
 
                 this.entitiesById.a(entity1.getId(), entity1);
             }
@@ -1230,7 +1230,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
             int i = aentity.length;
 
             for (int j = 0; j < i; ++j) {
-                Entity entity1 = aentity[j]; // Reaper - Inline
+                Entity entity1 = aentity[j]; // Beast - Inline
 
                 this.entitiesById.d(entity1.getId());
             }
@@ -1296,11 +1296,11 @@ public class WorldServer extends World implements IAsyncTaskHandler {
     }
 
     public void playBlockAction(BlockPosition blockposition, Block block, int i, int j) {
-        this.blockEventPending.add(new BlockActionData(blockposition, block, i, j)); // Reaper - Optimize block event queue
+        this.blockEventPending.add(new BlockActionData(blockposition, block, i, j)); // Beast - Optimize block event queue
     }
 
     private void aq() {
-        // Reaper start - Optimize block event queue
+        // Beast start - Optimize block event queue
         Set<BlockActionData> pending = this.blockEventPending;
         if (!pending.isEmpty()) {
             PlayerList playerList = this.server.getPlayerList();
@@ -1326,7 +1326,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
                 }
             }
         }
-        // Reaper end
+        // Beast end
 
     }
 
@@ -1423,10 +1423,10 @@ public class WorldServer extends World implements IAsyncTaskHandler {
         for (EntityHuman entityhuman : receivers) { // Paper - Particle API Expansion
             EntityPlayer entityplayer = (EntityPlayer) entityhuman; // Paper - Particle API Expansion
             if (sender != null && !entityplayer.getBukkitEntity().canSee(sender.getBukkitEntity())) continue; // CraftBukkit
-            /* // Reaper start - Unused
+            /* // Beast start - Unused
             BlockPosition blockposition = entityplayer.getChunkCoordinates();
             double d7 = blockposition.distanceSquared(d0, d1, d2);
-            */ // Reaper end
+            */ // Beast end
 
 
             this.a(entityplayer, flag, d0, d1, d2, packetplayoutworldparticles);
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftChunk.java b/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
index ef04dfc8d14689fbdf4feaa1b064e9746f1eab14..0413e052445ac8713eb8e8eba0a156c405911f4c 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
@@ -84,11 +84,11 @@ public class CraftChunk implements Chunk {
 
         for (int i = 0; i < 16; i++) {
 
-            // Reaper start - Remove redundant toArray() call
+            // Beast start - Remove redundant toArray() call
             java.util.List<net.minecraft.server.Entity> slice = org.bukkit.Bukkit.isPrimaryThread() ? chunk.entitySlices[i] : new java.util.ArrayList<>(chunk.entitySlices[i]);
             for (net.minecraft.server.Entity obj : slice) {
-                // Reaper end
-                if (obj == null) { // Reaper - Optimize
+                // Beast end
+                if (obj == null) { // Beast - Optimize
                     continue;
                 }
 
@@ -105,11 +105,11 @@ public class CraftChunk implements Chunk {
 
         BlockState[] entities = new BlockState[chunk.tileEntities.size()];
 
-        // Reaper start - Remove redundant toArray() call
+        // Beast start - Remove redundant toArray() call
         java.util.Set<BlockPosition> positions = org.bukkit.Bukkit.isPrimaryThread() ? chunk.tileEntities.keySet() : new java.util.HashSet<>(chunk.tileEntities.keySet());
         for (BlockPosition obj : positions) {
-            // Reaper end
-            if (obj == null) { // Reaper - Optimize
+            // Beast end
+            if (obj == null) { // Beast - Optimize
                 continue;
             }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java b/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java
index 3172f8ea4ceeb825ee1a51698d41e5e2c76468f3..1df3bce4829aba27164dc6e1c5b5cf1ac37cfa81 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java
@@ -124,7 +124,7 @@ public class CraftOfflinePlayer implements OfflinePlayer, ConfigurationSerializa
     public Map<String, Object> serialize() {
         Map<String, Object> result = new LinkedHashMap<String, Object>();
 
-        result.put("UUID", com.eatthepath.uuid.FastUUID.toString(profile.getId())); // Reaper - Use FastUUID
+        result.put("UUID", com.eatthepath.uuid.FastUUID.toString(profile.getId())); // Beast - Use FastUUID
 
         return result;
     }
@@ -135,12 +135,12 @@ public class CraftOfflinePlayer implements OfflinePlayer, ConfigurationSerializa
             return Bukkit.getServer().getOfflinePlayer((String) args.get("name"));
         }
 
-        return Bukkit.getServer().getOfflinePlayer(com.eatthepath.uuid.FastUUID.parseUUID((String) args.get("UUID"))); // Reaper - Use FastUUID
+        return Bukkit.getServer().getOfflinePlayer(com.eatthepath.uuid.FastUUID.parseUUID((String) args.get("UUID"))); // Beast - Use FastUUID
     }
 
     @Override
     public String toString() {
-        return getClass().getSimpleName() + "[UUID=" + com.eatthepath.uuid.FastUUID.toString(profile.getId()) + "]"; // Reaper - Use FastUUID
+        return getClass().getSimpleName() + "[UUID=" + com.eatthepath.uuid.FastUUID.toString(profile.getId()) + "]"; // Beast - Use FastUUID
     }
 
     public Player getPlayer() {
@@ -149,7 +149,7 @@ public class CraftOfflinePlayer implements OfflinePlayer, ConfigurationSerializa
 
     @Override
     public boolean equals(Object obj) {
-        if (!(obj instanceof OfflinePlayer)) { // Reaper - Optimize
+        if (!(obj instanceof OfflinePlayer)) { // Beast - Optimize
             return false;
         }
 
@@ -169,7 +169,7 @@ public class CraftOfflinePlayer implements OfflinePlayer, ConfigurationSerializa
     }
 
     private NBTTagCompound getData() {
-        return storage.getPlayerData(com.eatthepath.uuid.FastUUID.toString(getUniqueId())); // Reaper - Use FastUUID
+        return storage.getPlayerData(com.eatthepath.uuid.FastUUID.toString(getUniqueId())); // Beast - Use FastUUID
     }
 
     private NBTTagCompound getBukkitData() {
@@ -186,7 +186,7 @@ public class CraftOfflinePlayer implements OfflinePlayer, ConfigurationSerializa
     }
 
     private File getDataFile() {
-        return new File(storage.getPlayerDir(), com.eatthepath.uuid.FastUUID.toString(getUniqueId()) + ".dat"); // Reaper - Use FastUUID
+        return new File(storage.getPlayerDir(), com.eatthepath.uuid.FastUUID.toString(getUniqueId()) + ".dat"); // Beast - Use FastUUID
     }
 
     public long getFirstPlayed() {
@@ -235,7 +235,7 @@ public class CraftOfflinePlayer implements OfflinePlayer, ConfigurationSerializa
 
         if (data.hasKey("SpawnX") && data.hasKey("SpawnY") && data.hasKey("SpawnZ")) {
             String spawnWorld = data.getString("SpawnWorld");
-            if (spawnWorld.isEmpty()) { // Reaper - Optimize
+            if (spawnWorld.isEmpty()) { // Beast - Optimize
                 spawnWorld = server.getWorlds().get(0).getName();
             }
             return new Location(server.getWorld(spawnWorld), data.getInt("SpawnX"), data.getInt("SpawnY"), data.getInt("SpawnZ"));
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftParticle.java b/src/main/java/org/bukkit/craftbukkit/CraftParticle.java
index 9d5ac0e189e2a526ee63be60325f98a7babbe223..a7ca564fa860ddf53f47ee896303148e6cb9eff3 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftParticle.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftParticle.java
@@ -10,11 +10,11 @@ import org.bukkit.material.MaterialData;
 
 public class CraftParticle {
 
-    // Reaper start - Use constants
+    // Beast start - Use constants
     private static final int[] VOID = new int[0];
     private static final int[] NULL_ITEMSTACK = new int[]{0, 0};
     private static final int[] NULL_MATERIAL_DATA = new int[]{0};
-    // Reaper end
+    // Beast end
 
     public static EnumParticle toNMS(Particle bukkit) {
         return EnumParticle.valueOf(bukkit.name());
@@ -26,18 +26,18 @@ public class CraftParticle {
 
     public static int[] toData(Particle particle, Object obj) {
         if (particle.getDataType().equals(Void.class)) {
-            return VOID; // Reaper - Use constant
+            return VOID; // Beast - Use constant
         }
         if (particle.getDataType().equals(ItemStack.class)) {
             if (obj == null) {
-                return NULL_ITEMSTACK; // Reaper - Use constant
+                return NULL_ITEMSTACK; // Beast - Use constant
             }
             ItemStack itemStack = (ItemStack) obj;
             return new int[]{itemStack.getType().getId(), itemStack.getDurability()};
         }
         if (particle.getDataType().equals(MaterialData.class)) {
             if (obj == null) {
-                return NULL_MATERIAL_DATA; // Reaper - Use constant
+                return NULL_MATERIAL_DATA; // Beast - Use constant
             }
             MaterialData data = (MaterialData) obj;
             return new int[]{data.getItemTypeId() + ((int)(data.getData()) << 12)};
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 3f9442318bfbd51c6af74519d84b224798a8d8b5..4d38f6fbdaef18fe6b27cb35a36d8b9d739d0d03 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -22,7 +22,9 @@ import java.util.logging.Logger;
 
 import javax.imageio.ImageIO;
 
-import com.github.ruviolence.reaper.BeastConfig;
+import com.homomc.beast.BeastConfig;
+import com.homomc.beast.Constants;
+import com.homomc.beast.WorldConfigCache;
 import net.minecraft.server.*;
 
 import org.bukkit.BanList;
@@ -155,7 +157,7 @@ public final class CraftServer implements Server {
     private YamlConfiguration configuration;
     private YamlConfiguration commandsConfiguration;
     private final Yaml yaml = new Yaml(new SafeConstructor());
-    private final com.github.benmanes.caffeine.cache.Cache<UUID, OfflinePlayer> offlinePlayers = com.github.benmanes.caffeine.cache.Caffeine.newBuilder().weakValues().build(); // Reaper - Guava to caffeine
+    private final com.github.benmanes.caffeine.cache.Cache<UUID, OfflinePlayer> offlinePlayers = com.github.benmanes.caffeine.cache.Caffeine.newBuilder().weakValues().build(); // Beast - Guava to caffeine
     private final EntityMetadataStore entityMetadata = new EntityMetadataStore();
     private final PlayerMetadataStore playerMetadata = new PlayerMetadataStore();
     private final WorldMetadataStore worldMetadata = new WorldMetadataStore();
@@ -741,7 +743,7 @@ public final class CraftServer implements Server {
 
         org.spigotmc.SpigotConfig.init((File) console.options.valueOf("spigot-settings")); // Spigot
         com.destroystokyo.paper.PaperConfig.init((File) console.options.valueOf("paper-settings")); // Paper
-        BeastConfig.init((File) console.options.valueOf("beast-settings")); // Reaper
+        BeastConfig.init((File) console.options.valueOf("beast-settings")); // Beast
         for (WorldServer world : console.worlds) {
             world.worldData.setDifficulty(difficulty);
             world.setSpawnFlags(monsters, animals);
@@ -758,7 +760,7 @@ public final class CraftServer implements Server {
             }
             world.spigotConfig.init(); // Spigot
             world.paperConfig.init(); // Paper
-            com.github.ruviolence.reaper.WorldConfigCache.dropCache(); // Reaper - Cache world configs
+            WorldConfigCache.dropCache(); // Beast - Cache world configs
         }
 
         Plugin[] pluginClone = pluginManager.getPlugins().clone(); // Paper
@@ -998,7 +1000,7 @@ public final class CraftServer implements Server {
                     }
 
                     BlockPosition chunkcoordinates = internal.getSpawn();
-                    internal.getChunkProviderServer().getChunkAt(chunkcoordinates.getX() + j >> 4, chunkcoordinates.getZ() + k >> 4, com.github.ruviolence.reaper.Constants.NULL_RUNNABLE); // Reaper - Async Spawn Chunks
+                    internal.getChunkProviderServer().getChunkAt(chunkcoordinates.getX() + j >> 4, chunkcoordinates.getZ() + k >> 4, Constants.NULL_RUNNABLE); // Beast - Async Spawn Chunks
                 }
             }
         }
@@ -1048,7 +1050,7 @@ public final class CraftServer implements Server {
         }
 
         worlds.remove(world.getName().toLowerCase(java.util.Locale.ENGLISH));
-        console.worlds.remove(handle); // Reaper - Optimize
+        console.worlds.remove(handle); // Beast - Optimize
 
         File parentFolder = world.getWorldFolder().getAbsoluteFile();
 
@@ -1270,8 +1272,8 @@ public final class CraftServer implements Server {
             if (section != null) {
                 String name = section.getString("generator");
 
-                if ((name != null) && (!name.isEmpty())) { // Reaper - Optimize
-                    String[] split = org.apache.commons.lang3.StringUtils.splitPreserveAllTokens(name, ":", 2); // Reaper - Optimize
+                if ((name != null) && (!name.isEmpty())) { // Beast - Optimize
+                    String[] split = org.apache.commons.lang3.StringUtils.splitPreserveAllTokens(name, ":", 2); // Beast - Optimize
                     String id = (split.length > 1) ? split[1] : null;
                     Plugin plugin = pluginManager.getPlugin(split[0]);
 
@@ -1391,7 +1393,7 @@ public final class CraftServer implements Server {
                 result = getOfflinePlayer(profile);
             }
         } else {
-            offlinePlayers.invalidate(result.getUniqueId()); // Reaper - Guava to caffeine
+            offlinePlayers.invalidate(result.getUniqueId()); // Beast - Guava to caffeine
         }
 
         return result;
@@ -1403,13 +1405,13 @@ public final class CraftServer implements Server {
 
         OfflinePlayer result = getPlayer(id);
         if (result == null) {
-            result = offlinePlayers.getIfPresent(id); // Reaper - Guava to caffeine
+            result = offlinePlayers.getIfPresent(id); // Beast - Guava to caffeine
             if (result == null) {
                 result = new CraftOfflinePlayer(this, new GameProfile(id, null));
                 offlinePlayers.put(id, result);
             }
         } else {
-            offlinePlayers.invalidate(id); // Reaper - Guava to caffeine
+            offlinePlayers.invalidate(id); // Beast - Guava to caffeine
         }
 
         return result;
@@ -1550,7 +1552,7 @@ public final class CraftServer implements Server {
 
         for (String file : files) {
             try {
-                players.add(getOfflinePlayer(com.eatthepath.uuid.FastUUID.parseUUID(file.substring(0, file.length() - 4)))); // Reaper - Use FastUUID
+                players.add(getOfflinePlayer(com.eatthepath.uuid.FastUUID.parseUUID(file.substring(0, file.length() - 4)))); // Beast - Use FastUUID
             } catch (IllegalArgumentException ex) {
                 // Who knows what is in this directory, just ignore invalid files
             }
@@ -1666,14 +1668,14 @@ public final class CraftServer implements Server {
 
         List<String> offers;
         Player player = ((EntityPlayer) sender).getBukkitEntity();
-        boolean isCommand = forceCommand || (!message.isEmpty() && (message.charAt(0) == '/')); // Reaper - Optimize
-        if (isCommand) { // Reaper - Optimize
+        boolean isCommand = forceCommand || (!message.isEmpty() && (message.charAt(0) == '/')); // Beast - Optimize
+        if (isCommand) { // Beast - Optimize
             offers = tabCompleteCommand(player, message, pos);
         } else {
             offers = tabCompleteChat(player, message);
         }
         
-        TabCompleteEvent tabEvent = new TabCompleteEvent(player, message, offers, isCommand, pos != null ? MCUtil.toLocation(((CraftWorld) player.getWorld()).getHandle(), pos) : null); // Paper // Reaper - Optimize
+        TabCompleteEvent tabEvent = new TabCompleteEvent(player, message, offers, isCommand, pos != null ? MCUtil.toLocation(((CraftWorld) player.getWorld()).getHandle(), pos) : null); // Paper // Beast - Optimize
         getPluginManager().callEvent(tabEvent);
 
         return tabEvent.isCancelled() ? Collections.EMPTY_LIST : tabEvent.getCompletions();
@@ -1689,7 +1691,7 @@ public final class CraftServer implements Server {
 
         List<String> completions = null;
         try {
-            if (message.charAt(0) == '/') { // Reaper - Optimize
+            if (message.charAt(0) == '/') { // Beast - Optimize
                 // Trim leading '/' if present (won't always be present in command blocks)
                 message = message.substring(1);
             }
@@ -1725,7 +1727,7 @@ public final class CraftServer implements Server {
                 it.remove();
             }
         }
-        completions.sort(String.CASE_INSENSITIVE_ORDER); // Reaper - Optimize
+        completions.sort(String.CASE_INSENSITIVE_ORDER); // Beast - Optimize
         return completions;
     }
 
@@ -1873,7 +1875,7 @@ public final class CraftServer implements Server {
         }
 
         @Override
-        public YamlConfiguration getReaperConfig() {
+        public YamlConfiguration getBeastConfig() {
             return BeastConfig.config;
         }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftStatistic.java b/src/main/java/org/bukkit/craftbukkit/CraftStatistic.java
index 7be3d8a065c405286e77a4f26adfb210efc6d0c5..596e81633df95d4e670a9852c13cf658ab94228f 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftStatistic.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftStatistic.java
@@ -112,18 +112,18 @@ public class CraftStatistic {
 
     public static EntityType getEntityTypeFromStatistic(net.minecraft.server.Statistic statistic) {
         String statisticString = statistic.name;
-        return EntityType.fromName(statisticString.substring(statisticString.lastIndexOf('.') + 1)); // Reaper - Optimize
+        return EntityType.fromName(statisticString.substring(statisticString.lastIndexOf('.') + 1)); // Beast - Optimize
     }
 
     public static Material getMaterialFromStatistic(net.minecraft.server.Statistic statistic) {
         String statisticString = statistic.name;
-        String val = statisticString.substring(statisticString.lastIndexOf('.') + 1); // Reaper - Optimize
+        String val = statisticString.substring(statisticString.lastIndexOf('.') + 1); // Beast - Optimize
         Item item = (Item) Item.REGISTRY.get(new MinecraftKey(val));
         if (item != null) {
             return Material.getMaterial(Item.getId(item));
         }
         Block block = (Block) Block.REGISTRY.get(new MinecraftKey(val));
-        if (/*block != null*/true) { // Reaper - Optimize
+        if (/*block != null*/true) { // Beast - Optimize
             return Material.getMaterial(Block.getId(block));
         }
         try {
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftTravelAgent.java b/src/main/java/org/bukkit/craftbukkit/CraftTravelAgent.java
index d33a38b2aad61c1efcad3d04ba0d601aec2437d3..06ca373fb19292178e7b453a88e267b44ac2ba11 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftTravelAgent.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftTravelAgent.java
@@ -24,7 +24,7 @@ public class CraftTravelAgent extends PortalTravelAgent implements TravelAgent {
 
     @Override
     public Location findOrCreate(Location target) {
-        // WorldServer worldServer = ((CraftWorld) target.getWorld()).getHandle(); // Reaper - Unused
+        // WorldServer worldServer = ((CraftWorld) target.getWorld()).getHandle(); // Beast - Unused
 
         Location found = this.findPortal(target);
         if (found == null) {
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index 8a109f6736e804b8c88bf1ef9230acc09ddb25a0..67910851c53e870ee74d2e110aae216385a62ed0 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -658,10 +658,10 @@ public class CraftWorld implements World {
 
     public void setBiome(int x, int z, Biome bio) {
         BiomeBase bb = CraftBlock.biomeToBiomeBase(bio);
-        // Reaper start - Optimize
+        // Beast start - Optimize
         if (true) {
             net.minecraft.server.Chunk chunk = this.world.getChunkIfLoaded(x >> 4, z >> 4);
-            // Reaper end
+            // Beast end
 
             if (chunk != null) {
                 byte[] biomevals = chunk.getBiomeIndex();
@@ -709,7 +709,7 @@ public class CraftWorld implements World {
                 Entity bukkitEntity = mcEnt.getBukkitEntity();
 
                 // Assuming that bukkitEntity isn't null
-                if (bukkitEntity instanceof LivingEntity) { // Reaper - Optimize
+                if (bukkitEntity instanceof LivingEntity) { // Beast - Optimize
                     list.add((LivingEntity) bukkitEntity);
                 }
             }
@@ -795,7 +795,7 @@ public class CraftWorld implements World {
         for (EntityHuman human : world.players) {
             HumanEntity bukkitEntity = human.getBukkitEntity();
 
-            if (bukkitEntity instanceof Player) { // Reaper - Optimize
+            if (bukkitEntity instanceof Player) { // Beast - Optimize
                 list.add((Player) bukkitEntity);
             }
         }
@@ -1285,7 +1285,7 @@ public class CraftWorld implements World {
         Preconditions.checkArgument(entity != null, "Cannot spawn null entity");
 
         if (entity instanceof EntityInsentient) {
-            ((EntityInsentient) entity).prepare(getHandle().D(entity.blockPos), (GroupDataEntity) null); // Reaper - Cache current block pos
+            ((EntityInsentient) entity).prepare(getHandle().D(entity.blockPos), (GroupDataEntity) null); // Beast - Cache current block pos
         }
 
         if (function != null) {
@@ -1664,7 +1664,7 @@ public class CraftWorld implements World {
             {
                 net.minecraft.server.EnumParticle particle = null;
                 int[] extra = null;
-                for ( net.minecraft.server.EnumParticle p : net.minecraft.server.EnumParticle.VALUES ) // Reaper - Single values array
+                for ( net.minecraft.server.EnumParticle p : net.minecraft.server.EnumParticle.VALUES ) // Beast - Single values array
                 {
                     if ( effect.getName().startsWith( p.b().replace("_", "") ) )
                     {
diff --git a/src/main/java/org/bukkit/craftbukkit/attribute/CraftAttributeInstance.java b/src/main/java/org/bukkit/craftbukkit/attribute/CraftAttributeInstance.java
index 7896387ecd7a07a48055fb779e2ab52226a79485..80e69548962bbbabfd2c9f3776115c1915489d07 100644
--- a/src/main/java/org/bukkit/craftbukkit/attribute/CraftAttributeInstance.java
+++ b/src/main/java/org/bukkit/craftbukkit/attribute/CraftAttributeInstance.java
@@ -70,6 +70,6 @@ public class CraftAttributeInstance implements AttributeInstance {
     }
 
     private static AttributeModifier convert(net.minecraft.server.AttributeModifier nms) {
-        return new AttributeModifier(nms.a(), nms.b(), nms.d(), AttributeModifier.Operation.VALUES[nms.c()]); // Reaper - Single values array
+        return new AttributeModifier(nms.a(), nms.b(), nms.d(), AttributeModifier.Operation.VALUES[nms.c()]); // Beast - Single values array
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftBanner.java b/src/main/java/org/bukkit/craftbukkit/block/CraftBanner.java
index f4cce7d70b00b2d13a3b27db0f7badf52a4c9b9e..ee156a23a966585205378efad9768ba2785aad7f 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftBanner.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftBanner.java
@@ -95,7 +95,7 @@ public class CraftBanner extends CraftBlockEntityState<TileEntityBanner> impleme
         NBTTagList newPatterns = new NBTTagList();
 
         for (Pattern p : patterns) {
-            NBTTagCompound compound = new NBTTagCompound(2); // Reaper - Use initial capacity
+            NBTTagCompound compound = new NBTTagCompound(2); // Beast - Use initial capacity
             compound.setInt("Color", p.getColor().getDyeData());
             compound.setString("Pattern", p.getPattern().getIdentifier());
             newPatterns.add(compound);
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java b/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
index a5b831e74df08e863d69d58e6b02978827f49c19..79ae69e5d324b9734d98bdb8d1614a483e3f3b0b 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
@@ -132,23 +132,23 @@ public class CraftBlock implements Block {
         return setTypeIdAndData(type, (byte) block.toLegacyData(block.getBlockData()), applyPhysics);
     }
 
-    // Reaper start
+    // Beast start
     public boolean setTypeIdAndData(final int type, final byte data, final boolean applyPhysics) { return setTypeIdAndData(type, data, applyPhysics, true, true); }
     public boolean setTypeIdAndData(final int type, final byte data, final boolean applyPhysics, final boolean notify, final boolean updateLight) {
-        // Reaper end
+        // Beast end
         IBlockData blockData = getNMSBlock(type).fromLegacyData(data);
         BlockPosition position = new BlockPosition(x, y, z);
 
         // SPIGOT-611: need to do this to prevent glitchiness. Easier to handle this here (like /setblock) than to fix weirdness in tile entity cleanup
         if (type != 0 && blockData.getBlock() instanceof BlockTileEntity && type != getTypeId()) {
-            chunk.getHandle().getWorld().setTypeAndData(position, Blocks.AIR.getBlockData(), 0, notify, updateLight); // Reaper
+            chunk.getHandle().getWorld().setTypeAndData(position, Blocks.AIR.getBlockData(), 0, notify, updateLight); // Beast
         }
 
         if (applyPhysics) {
-            return chunk.getHandle().getWorld().setTypeAndData(position, blockData, 3, notify, updateLight); // Reaper
+            return chunk.getHandle().getWorld().setTypeAndData(position, blockData, 3, notify, updateLight); // Beast
         } else {
             IBlockData old = chunk.getHandle().getBlockData(position);
-            boolean success = chunk.getHandle().getWorld().setTypeAndData(position, blockData, 18, notify, updateLight); // NOTIFY | NO_OBSERVER // Reaper
+            boolean success = chunk.getHandle().getWorld().setTypeAndData(position, blockData, 18, notify, updateLight); // NOTIFY | NO_OBSERVER // Beast
             if (success) {
                 chunk.getHandle().getWorld().notify(
                         position,
@@ -176,17 +176,17 @@ public class CraftBlock implements Block {
     }
 
     public byte getLightFromSky() {
-        // Reaper start - Optimize light lookup
+        // Beast start - Optimize light lookup
         net.minecraft.server.Chunk chunkHandle = chunk.getHandle();
         return (byte) chunkHandle.getWorld().getBrightness(EnumSkyBlock.SKY, new BlockPosition(this.x, this.y, this.z), chunkHandle);
-        // Reaper end - Optimize light lookup
+        // Beast end - Optimize light lookup
     }
 
     public byte getLightFromBlocks() {
-        // Reaper start - Optimize light lookup
+        // Beast start - Optimize light lookup
         net.minecraft.server.Chunk chunkHandle = chunk.getHandle();
         return (byte) chunkHandle.getWorld().getBrightness(EnumSkyBlock.BLOCK, new BlockPosition(this.x, this.y, this.z), chunkHandle);
-        // Reaper end - Optimize light lookup
+        // Beast end - Optimize light lookup
     }
 
 
@@ -211,7 +211,7 @@ public class CraftBlock implements Block {
     }
 
     public BlockFace getFace(final Block block) {
-        BlockFace[] values = BlockFace.VALUES; // Reaper - Single values array
+        BlockFace[] values = BlockFace.VALUES; // Beast - Single values array
 
         for (BlockFace face : values) {
             if ((this.getX() + face.getModX() == block.getX()) &&
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftSign.java b/src/main/java/org/bukkit/craftbukkit/block/CraftSign.java
index 3da230650c425737254d9f3103571ca92f8d2153..2f836070563183288462f078f989cbdf661afb6d 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftSign.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftSign.java
@@ -58,7 +58,7 @@ public class CraftSign extends CraftBlockEntityState<TileEntitySign> implements
 
         for (int i = 0; i < 4; i++) {
             if (i < lines.length && lines[i] != null) {
-                components[i] = CraftChatMessage.fromStringFast(lines[i])[0]; // Reaper
+                components[i] = CraftChatMessage.fromStringFast(lines[i])[0]; // Beast
             } else {
                 components[i] = new ChatComponentText("");
             }
diff --git a/src/main/java/org/bukkit/craftbukkit/boss/CraftBossBar.java b/src/main/java/org/bukkit/craftbukkit/boss/CraftBossBar.java
index 6557570e1c297d85b816b165fdd29a1e21fb62a9..b6db44ee3b4d26ea21339ca8531b10b695384052 100644
--- a/src/main/java/org/bukkit/craftbukkit/boss/CraftBossBar.java
+++ b/src/main/java/org/bukkit/craftbukkit/boss/CraftBossBar.java
@@ -31,7 +31,7 @@ public class CraftBossBar implements BossBar {
         this.style = style;
 
         handle = new BossBattleServer(
-                CraftChatMessage.fromStringFast(title, true)[0], // Reaper
+                CraftChatMessage.fromStringFast(title, true)[0], // Beast
                 convertColor(color),
                 convertStyle(style)
         );
@@ -72,7 +72,7 @@ public class CraftBossBar implements BossBar {
 
     @Override
     public void setTitle(String title) {
-        handle.title = CraftChatMessage.fromStringFast(title, true)[0]; // Reaper
+        handle.title = CraftChatMessage.fromStringFast(title, true)[0]; // Beast
         handle.sendUpdate(PacketPlayOutBoss.Action.UPDATE_NAME);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/command/VanillaCommandWrapper.java b/src/main/java/org/bukkit/craftbukkit/command/VanillaCommandWrapper.java
index 0d80f70151dfe4cb77d37f984cf4c09505356438..c8728b7ea6a95a8bdf602fbae43426dfc5e2cd5f 100644
--- a/src/main/java/org/bukkit/craftbukkit/command/VanillaCommandWrapper.java
+++ b/src/main/java/org/bukkit/craftbukkit/command/VanillaCommandWrapper.java
@@ -90,7 +90,7 @@ public final class VanillaCommandWrapper extends BukkitCommand {
                         CommandSender oldSender = lastSender;
                         lastSender = bSender;
                         try {
-                            as[i] = com.eatthepath.uuid.FastUUID.toString(entity.getUniqueID()); // Reaper - Use FastUUID
+                            as[i] = com.eatthepath.uuid.FastUUID.toString(entity.getUniqueID()); // Beast - Use FastUUID
                             vanillaCommand.execute(server, icommandlistener, as);
                             j++;
                         } catch (ExceptionUsage exceptionusage) {
@@ -130,7 +130,7 @@ public final class VanillaCommandWrapper extends BukkitCommand {
                 CommandBlockListenerAbstract listener = (CommandBlockListenerAbstract) icommandlistener;
                 MinecraftServer.LOGGER.log(Level.WARN, String.format("CommandBlock at (%d,%d,%d) failed to handle command", listener.getChunkCoordinates().getX(), listener.getChunkCoordinates().getY(), listener.getChunkCoordinates().getZ()), throwable);
             } else {
-                MinecraftServer.LOGGER.log(Level.WARN, "Unknown CommandBlock failed to handle command", throwable); // Reaper - Optimize
+                MinecraftServer.LOGGER.log(Level.WARN, "Unknown CommandBlock failed to handle command", throwable); // Beast - Optimize
             }
         } finally {
             icommandlistener.a(CommandObjectiveExecutor.EnumCommandResult.SUCCESS_COUNT, j);
@@ -175,7 +175,7 @@ public final class VanillaCommandWrapper extends BukkitCommand {
 
     public static String[] dropFirstArgument(String as[]) {
         String as1[] = new String[as.length - 1];
-        System.arraycopy(as, 1, as1, 0, as.length - 1); // Reaper - Optimize
+        System.arraycopy(as, 1, as1, 0, as.length - 1); // Beast - Optimize
 
         return as1;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/conversations/ConversationTracker.java b/src/main/java/org/bukkit/craftbukkit/conversations/ConversationTracker.java
index 0429c92bf159a26b6e241aca479986e452dc873d..e869ecf79575fab1f42d1d06610c478f3db154dc 100644
--- a/src/main/java/org/bukkit/craftbukkit/conversations/ConversationTracker.java
+++ b/src/main/java/org/bukkit/craftbukkit/conversations/ConversationTracker.java
@@ -31,7 +31,7 @@ public class ConversationTracker {
             if (conversationQueue.getFirst() == conversation) {
                 conversation.abandon(details);
             }
-            if (/*conversationQueue.contains(conversation)*/true) { // Reaper - Optimize
+            if (/*conversationQueue.contains(conversation)*/true) { // Beast - Optimize
                 conversationQueue.remove(conversation);
             }
             if (!conversationQueue.isEmpty()) {
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftArrow.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftArrow.java
index 0c0440bc2eb560e374f8ad2de13490ce40e4a70d..fe7a7051cdb74c2a124b4028194c2120b2fc452d 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftArrow.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftArrow.java
@@ -64,7 +64,7 @@ public class CraftArrow extends AbstractProjectile implements Arrow {
 
     @Override
     public PickupStatus getPickupStatus() {
-        return PickupStatus.VALUES[getHandle().fromPlayer.ordinal()]; // Reaper - Single values array
+        return PickupStatus.VALUES[getHandle().fromPlayer.ordinal()]; // Beast - Single values array
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderDragon.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderDragon.java
index e1f05db8384ba3dea46fa909fa02b8bca81f9370..3cb61931112e42b661916326d117b6eae337024e 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderDragon.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderDragon.java
@@ -45,7 +45,7 @@ public class CraftEnderDragon extends CraftComplexLivingEntity implements EnderD
 
     @Override
     public Phase getPhase() {
-        return Phase.VALUES[getHandle().getDataWatcher().get(EntityEnderDragon.PHASE)]; // Reaper - Single values array
+        return Phase.VALUES[getHandle().getDataWatcher().get(EntityEnderDragon.PHASE)]; // Beast - Single values array
     }
 
     @Override
@@ -54,7 +54,7 @@ public class CraftEnderDragon extends CraftComplexLivingEntity implements EnderD
     }
     
     public static Phase getBukkitPhase(DragonControllerPhase phase) {
-        return Phase.VALUES[phase.b()]; // Reaper - Single values array
+        return Phase.VALUES[phase.b()]; // Beast - Single values array
     }
     
     public static DragonControllerPhase getMinecraftPhase(Phase phase) {
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEvoker.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEvoker.java
index 8acf0e0d5a47c9c4056915cbd6c7a7a547d384ab..7498b2d6d7f685cc2673b6266a3aa88070033d72 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEvoker.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEvoker.java
@@ -29,7 +29,7 @@ public class CraftEvoker extends CraftSpellcaster implements Evoker {
 
     @Override
     public Evoker.Spell getCurrentSpell() {
-        return Evoker.Spell.VALUES[getHandle().getSpell().ordinal()]; // Reaper - Single values array
+        return Evoker.Spell.VALUES[getHandle().getSpell().ordinal()]; // Beast - Single values array
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftHorse.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftHorse.java
index a6e8d508308eb7fb2a980fe2e3167868b1160fd5..76490b3ee78164d166d095661b70a320b9bb3fd1 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftHorse.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftHorse.java
@@ -26,7 +26,7 @@ public class CraftHorse extends CraftAbstractHorse implements Horse {
 
     @Override
     public Color getColor() {
-        return Color.VALUES[getHandle().getVariant() & 0xFF]; // Reaper - Single values array
+        return Color.VALUES[getHandle().getVariant() & 0xFF]; // Beast - Single values array
     }
 
     @Override
@@ -37,7 +37,7 @@ public class CraftHorse extends CraftAbstractHorse implements Horse {
 
     @Override
     public Style getStyle() {
-        return Style.VALUES[getHandle().getVariant() >>> 8]; // Reaper - Single values array
+        return Style.VALUES[getHandle().getVariant() >>> 8]; // Beast - Single values array
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftLlama.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftLlama.java
index ff584a21c34414fa03c315d9e073245c5333b55a..6d7ec6642c1953b721bf2396c0b5353ab7c67289 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftLlama.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftLlama.java
@@ -23,7 +23,7 @@ public class CraftLlama extends CraftChestedHorse implements Llama, CraftRangedE
 
     @Override
     public Color getColor() {
-        return Color.VALUES[getHandle().getVariant()]; // Reaper - Single values array
+        return Color.VALUES[getHandle().getVariant()]; // Beast - Single values array
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftParrot.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftParrot.java
index e44f068b5fa5487309a63889cb389b9781a718b8..62691927dc7d0e469bee81b8f7e70469bd29561a 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftParrot.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftParrot.java
@@ -19,7 +19,7 @@ public class CraftParrot extends CraftTameableAnimal implements Parrot {
 
     @Override
     public Variant getVariant() {
-        return Variant.VALUES[getHandle().getVariant()]; // Reaper - Single values array
+        return Variant.VALUES[getHandle().getVariant()]; // Beast - Single values array
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index a4b5eebc1727d4bf3ad5feaa23b32932dc6004b3..0c759853aab52238f37761bf3711db817a2093c2 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -296,7 +296,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         if (name == null) {
             name = getName();
         }
-        getHandle().listName = name.equals(getName()) ? null : CraftChatMessage.fromStringFast(name)[0]; // Reaper
+        getHandle().listName = name.equals(getName()) ? null : CraftChatMessage.fromStringFast(name)[0]; // Beast
         for (EntityPlayer player : (List<EntityPlayer>)server.getHandle().players) {
             if (player.getBukkitEntity().canSee(this)) {
                 player.playerConnection.sendPacket(new PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction.UPDATE_DISPLAY_NAME, getHandle()));
@@ -519,7 +519,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     public void sendBlockChange(Location loc, int material, byte data) {
         if (getHandle().playerConnection == null) return;
 
-        PacketPlayOutBlockChange packet = new PacketPlayOutBlockChange(new BlockPosition(loc.getBlockX(), loc.getBlockY(), loc.getBlockZ()), CraftMagicNumbers.getBlock(material).fromLegacyData(data)); // Reaper - Use custom constructor
+        PacketPlayOutBlockChange packet = new PacketPlayOutBlockChange(new BlockPosition(loc.getBlockX(), loc.getBlockY(), loc.getBlockZ()), CraftMagicNumbers.getBlock(material).fromLegacyData(data)); // Beast - Use custom constructor
 
         getHandle().playerConnection.sendPacket(packet);
     }
@@ -1288,15 +1288,15 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     public void setExtraData(NBTTagCompound nbttagcompound) {
-        // Reaper start - Optimize
+        // Beast start - Optimize
         NBTTagCompound data = nbttagcompound.getCompoundNullable("bukkit");
         if (data == null) {
-            data = new NBTTagCompound(8); // Reaper - Use initial capacity
+            data = new NBTTagCompound(8); // Beast - Use initial capacity
             nbttagcompound.set("bukkit", data);
         }
 
         // NBTTagCompound data = nbttagcompound.getCompound("bukkit");
-        // Reaper end
+        // Beast end
         EntityPlayer handle = getHandle();
         data.setInt("newExp", handle.newExp);
         data.setInt("newTotalExp", handle.newTotalExp);
@@ -1530,7 +1530,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     @Override
     public void setMaxHealth(double amount) {
         super.setMaxHealth(amount);
-        // this.health = Math.min(this.health, health); // Reaper - Meaningless
+        // this.health = Math.min(this.health, health); // Beast - Meaningless
         getHandle().triggerHealthUpdate();
     }
 
@@ -1552,12 +1552,12 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         if (playerConnection == null) {
             throw new IllegalStateException("Cannot set scoreboard yet");
         }
-        /* // Reaper start - Optimize
+        /* // Beast start - Optimize
         if (playerConnection.isDisconnected()) {
             // throw new IllegalStateException("Cannot set scoreboard for invalid CraftPlayer"); // Spigot - remove this as Mojang's semi asynchronous Netty implementation can lead to races
         }
-        */ // Reaper end
-        // Reaper start - Fix Paper's collision disable for custom scoreboards
+        */ // Beast end
+        // Beast start - Fix Paper's collision disable for custom scoreboards
         if (!com.destroystokyo.paper.PaperConfig.enablePlayerCollisions) {
             String playerName = getName();
             // If the player does not have their team
@@ -1569,7 +1569,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
                 collideTeam.addEntry(playerName); // Add player to the collide team
             }
         }
-        // Reaper end
+        // Beast end
 
         this.server.getScoreboardManager().setPlayerBoard(this, scoreboard);
     }
@@ -1685,12 +1685,12 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         getHandle().playerConnection.sendPacket(times);
 
         if (title != null) {
-            PacketPlayOutTitle packetTitle = new PacketPlayOutTitle(EnumTitleAction.TITLE, CraftChatMessage.fromStringFast(title)[0]); // Reaper
+            PacketPlayOutTitle packetTitle = new PacketPlayOutTitle(EnumTitleAction.TITLE, CraftChatMessage.fromStringFast(title)[0]); // Beast
             getHandle().playerConnection.sendPacket(packetTitle);
         }
 
         if (subtitle != null) {
-            PacketPlayOutTitle packetSubtitle = new PacketPlayOutTitle(EnumTitleAction.SUBTITLE, CraftChatMessage.fromStringFast(subtitle)[0]); // Reaper
+            PacketPlayOutTitle packetSubtitle = new PacketPlayOutTitle(EnumTitleAction.SUBTITLE, CraftChatMessage.fromStringFast(subtitle)[0]); // Beast
             getHandle().playerConnection.sendPacket(packetSubtitle);
         }
     }
@@ -1874,9 +1874,9 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
             {
                 net.minecraft.server.EnumParticle particle = null;
                 int[] extra = null;
-                for ( net.minecraft.server.EnumParticle p : net.minecraft.server.EnumParticle.VALUES ) // Reaper - Single values array
+                for ( net.minecraft.server.EnumParticle p : net.minecraft.server.EnumParticle.VALUES ) // Beast - Single values array
                 {
-                    if ( effect.getName().startsWith( org.apache.commons.lang3.StringUtils.remove(p.b(), '_') ) ) // Reaper - Optimize
+                    if ( effect.getName().startsWith( org.apache.commons.lang3.StringUtils.remove(p.b(), '_') ) ) // Beast - Optimize
                     {
                         particle = p;
                         if ( effect.getData() != null ) 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftRabbit.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftRabbit.java
index 2a22aad1c32123952ac6640aec027de80617a81c..c518c0ca84f3ab3d5214abcd679ee7732c50830b 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftRabbit.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftRabbit.java
@@ -41,11 +41,11 @@ public class CraftRabbit extends CraftAnimals implements Rabbit {
         if (getRabbitType() == Type.THE_KILLER_BUNNY) {
             // Reset goals and target finders.
             World world = ((CraftWorld) this.getWorld()).getHandle();
-            // Reaper start - Optimize
+            // Beast start - Optimize
             net.minecraft.server.MethodProfiler profiler = world != null && world.methodProfiler != null ? world.methodProfiler : null;
             entity.goalSelector = new PathfinderGoalSelector(profiler);
             entity.targetSelector = new PathfinderGoalSelector(profiler);
-            // Reaper end
+            // Beast end
             entity.initializePathFinderGoals();
         }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftVillager.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftVillager.java
index eb118aa748adf6e8a1d0eaa7e97a0f6abe91adca..80578655746f5d9118ff20d53f5f220f7cf116e9 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftVillager.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftVillager.java
@@ -18,7 +18,7 @@ import org.bukkit.inventory.MerchantRecipe;
 
 public class CraftVillager extends CraftAgeable implements Villager, InventoryHolder {
 
-    private static final Map<Career, Integer> careerIDMap = new java.util.EnumMap<>(Career.class); // Reaper - Optimize
+    private static final Map<Career, Integer> careerIDMap = new java.util.EnumMap<>(Career.class); // Beast - Optimize
     private CraftMerchant merchant;
 
     public CraftVillager(CraftServer server, EntityVillager entity) {
@@ -40,7 +40,7 @@ public class CraftVillager extends CraftAgeable implements Villager, InventoryHo
     }
 
     public Profession getProfession() {
-        return Profession.VALUES[getHandle().getProfession() + 1]; // Reaper - Single values array // Offset by 1 from the zombie types
+        return Profession.VALUES[getHandle().getProfession() + 1]; // Beast - Single values array // Offset by 1 from the zombie types
     }
 
     public void setProfession(Profession profession) {
@@ -134,10 +134,10 @@ public class CraftVillager extends CraftAgeable implements Villager, InventoryHo
 
         List<Career> careers = profession.getCareers();
         for (Career c : careers) {
-            // Reaper start - Optimize map get
+            // Beast start - Optimize map get
             Integer idO = careerIDMap.get(c);
             if (idO != null && idO == id) {
-                // Reaper end
+                // Beast end
                 return c;
             }
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftVillagerZombie.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftVillagerZombie.java
index 6a50e74ff02bc4eadc82a4c1a67d54f606189d46..9cc7bd20c0d87b751ac52d31a787a1ecdddb2cca 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftVillagerZombie.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftVillagerZombie.java
@@ -29,7 +29,7 @@ public class CraftVillagerZombie extends CraftZombie implements ZombieVillager {
 
     @Override
     public Villager.Profession getVillagerProfession() {
-        return Villager.Profession.VALUES[getHandle().getProfession() + Villager.Profession.FARMER.ordinal()]; // Reaper - Single values array
+        return Villager.Profession.VALUES[getHandle().getProfession() + Villager.Profession.FARMER.ordinal()]; // Beast - Single values array
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
index e8077e60fd2be93d809b9c4b6446b114c0ffc582..5903a7b5e195ad68ac32b05400449cc0fd305d7d 100644
--- a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
+++ b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
@@ -10,6 +10,17 @@ import javax.annotation.Nullable;
 import com.google.common.base.Function;
 import com.google.common.base.Functions;
 
+import com.homomc.beast.event.block.TileEntityTickEvent;
+import com.homomc.beast.event.entity.AnyEntitySpawnEvent;
+import com.homomc.beast.event.entity.EntityMoveEvent;
+import com.homomc.beast.event.entity.EntityTickEvent;
+import com.homomc.beast.event.player.EntityTrackedEvent;
+import com.homomc.beast.event.player.EntityUntrackedEvent;
+import com.homomc.beast.event.server.ServerTickEndEvent;
+import com.homomc.beast.event.server.ServerTickStartEvent;
+import com.homomc.beast.event.server.WorldTickEndEvent;
+import com.homomc.beast.event.server.WorldTickStartEvent;
+import com.homomc.beast.event.world.SoundEvent;
 import net.minecraft.server.*;
 
 import org.bukkit.Bukkit;
@@ -46,7 +57,6 @@ import org.bukkit.entity.Player;
 import org.bukkit.entity.Projectile;
 import org.bukkit.entity.ThrownExpBottle;
 import org.bukkit.entity.ThrownPotion;
-import org.bukkit.entity.ExperienceOrb; // Paper
 import org.bukkit.event.Cancellable;
 import org.bukkit.event.Event;
 import org.bukkit.event.block.*;
@@ -73,19 +83,19 @@ public class CraftEventFactory {
     public static final DamageSource POISON = CraftDamageSource.copyOf(DamageSource.MAGIC);
     public static org.bukkit.block.Block blockDamage; // For use in EntityDamageByBlockEvent
     public static Entity entityDamage; // For use in EntityDamageByEntityEvent
-    // Reaper start
-    private static final com.github.ruviolence.reaper.event.entity.EntityMoveEvent entityMoveEvent = new com.github.ruviolence.reaper.event.entity.EntityMoveEvent(null);
-    private static final com.github.ruviolence.reaper.event.entity.AnyEntitySpawnEvent anyEntitySpawnEvent = new com.github.ruviolence.reaper.event.entity.AnyEntitySpawnEvent(null);
-    private static final com.github.ruviolence.reaper.event.entity.EntityTickEvent entityTickEvent = new com.github.ruviolence.reaper.event.entity.EntityTickEvent(null);
-    private static final com.github.ruviolence.reaper.event.block.TileEntityTickEvent tileEntityTickEvent = new com.github.ruviolence.reaper.event.block.TileEntityTickEvent(null);
-    private static final com.github.ruviolence.reaper.event.player.EntityTrackedEvent entityTrackedEvent = new com.github.ruviolence.reaper.event.player.EntityTrackedEvent(null);
-    private static final com.github.ruviolence.reaper.event.player.EntityUntrackedEvent entityUntrackedEvent = new com.github.ruviolence.reaper.event.player.EntityUntrackedEvent(null);
-    private static final com.github.ruviolence.reaper.event.server.ServerTickStartEvent serverTickStartEvent = new com.github.ruviolence.reaper.event.server.ServerTickStartEvent();
-    private static final com.github.ruviolence.reaper.event.server.ServerTickEndEvent serverTickEndEvent = new com.github.ruviolence.reaper.event.server.ServerTickEndEvent();
-    private static final com.github.ruviolence.reaper.event.server.WorldTickStartEvent worldTickStartEvent = new com.github.ruviolence.reaper.event.server.WorldTickStartEvent();
-    private static final com.github.ruviolence.reaper.event.server.WorldTickEndEvent worldTickEndEvent = new com.github.ruviolence.reaper.event.server.WorldTickEndEvent();
-    private static final com.github.ruviolence.reaper.event.world.SoundEvent soundEvent = new com.github.ruviolence.reaper.event.world.SoundEvent();
-    // Reaper end
+    // Beast start
+    private static final EntityMoveEvent entityMoveEvent = new EntityMoveEvent(null);
+    private static final AnyEntitySpawnEvent anyEntitySpawnEvent = new AnyEntitySpawnEvent(null);
+    private static final EntityTickEvent entityTickEvent = new EntityTickEvent(null);
+    private static final TileEntityTickEvent tileEntityTickEvent = new TileEntityTickEvent(null);
+    private static final EntityTrackedEvent entityTrackedEvent = new EntityTrackedEvent(null);
+    private static final EntityUntrackedEvent entityUntrackedEvent = new EntityUntrackedEvent(null);
+    private static final ServerTickStartEvent serverTickStartEvent = new ServerTickStartEvent();
+    private static final ServerTickEndEvent serverTickEndEvent = new ServerTickEndEvent();
+    private static final WorldTickStartEvent worldTickStartEvent = new WorldTickStartEvent();
+    private static final WorldTickEndEvent worldTickEndEvent = new WorldTickEndEvent();
+    private static final SoundEvent soundEvent = new SoundEvent();
+    // Beast end
 
     // helper methods
     private static boolean canBuild(CraftWorld world, Player player, int x, int z) {
@@ -259,7 +269,7 @@ public class CraftEventFactory {
         CraftItemStack itemInHand = CraftItemStack.asCraftMirror(itemstack);
         Arrow arrow = (Arrow) entityArrow.getBukkitEntity();
 
-        if (/*itemInHand != null*/true && (itemInHand.getType() == Material.AIR || itemInHand.getAmount() == 0)) { // Reaper - Optimize
+        if (/*itemInHand != null*/true && (itemInHand.getType() == Material.AIR || itemInHand.getAmount() == 0)) { // Beast - Optimize
             itemInHand = null;
         }
 
@@ -504,7 +514,7 @@ public class CraftEventFactory {
             } else if (entity instanceof EntityEnderDragon && /*PAIL FIXME ((EntityEnderDragon) entity).target == damager*/ false) {
                 event = new EntityDamageEvent(entity.getBukkitEntity(), DamageCause.ENTITY_EXPLOSION, modifiers, modifierFunctions);
             } else {
-                if (/*damager instanceof org.bukkit.entity.TNTPrimed*/false) { // Reaper - Optimize
+                if (/*damager instanceof org.bukkit.entity.TNTPrimed*/false) { // Beast - Optimize
                     damageCause = DamageCause.BLOCK_EXPLOSION;
                 } else {
                     damageCause = DamageCause.ENTITY_EXPLOSION;
@@ -682,7 +692,7 @@ public class CraftEventFactory {
         functions.put(DamageModifier.BASE, ZERO);
 
         final EntityDamageEvent event = handleEntityDamageEvent(entity, source, modifiers, functions);
-        if (/*event == null*/false) { // Reaper - Optimize
+        if (/*event == null*/false) { // Beast - Optimize
             return false;
         }
         return event.isCancelled() || (cancelOnZeroDamage && event.getDamage() == 0);
@@ -1182,14 +1192,14 @@ public class CraftEventFactory {
         return !event.isCancelled();
     }
 
-    // Reaper start
+    // Beast start
     public static boolean callEntityMoveEvent(Entity entity, EnumMoveType moveType, World world, 
                                               double oldX, double oldY, double oldZ,
                                               double newX, double newY, double newZ, float newYaw, float newPitch) {
         // Ignore the same position
         if (oldX == newX && oldY == newY && oldZ == newZ) return true;
 
-        com.github.ruviolence.reaper.event.entity.EntityMoveEvent event = CraftEventFactory.entityMoveEvent;
+        EntityMoveEvent event = CraftEventFactory.entityMoveEvent;
 
         event.setData(
                 entity.getBukkitEntity(),
@@ -1203,8 +1213,8 @@ public class CraftEventFactory {
         return !event.isCancelled();
     }
 
-    public static com.github.ruviolence.reaper.event.entity.AnyEntitySpawnEvent callAnyEntitySpawnEvent(Entity entity, SpawnReason spawnReason) {
-        com.github.ruviolence.reaper.event.entity.AnyEntitySpawnEvent event = CraftEventFactory.anyEntitySpawnEvent;
+    public static AnyEntitySpawnEvent callAnyEntitySpawnEvent(Entity entity, SpawnReason spawnReason) {
+        AnyEntitySpawnEvent event = CraftEventFactory.anyEntitySpawnEvent;
 
         event.setData(
                 entity.getBukkitEntity(),
@@ -1216,7 +1226,7 @@ public class CraftEventFactory {
     }
 
     public static boolean callEntityTickEvent(Entity entity, World world) {
-        com.github.ruviolence.reaper.event.entity.EntityTickEvent event = CraftEventFactory.entityTickEvent;
+        EntityTickEvent event = CraftEventFactory.entityTickEvent;
 
         event.setData(entity.getBukkitEntity(), world.getWorld());
 
@@ -1226,7 +1236,7 @@ public class CraftEventFactory {
     }
 
     public static boolean callTileEntityTickEvent(TileEntity tileEntity) {
-        com.github.ruviolence.reaper.event.block.TileEntityTickEvent event = CraftEventFactory.tileEntityTickEvent;
+        TileEntityTickEvent event = CraftEventFactory.tileEntityTickEvent;
 
         BlockPosition pos = tileEntity.getPosition();
         Block block = tileEntity.getWorld().getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ());
@@ -1239,7 +1249,7 @@ public class CraftEventFactory {
     }
 
     public static void callEntityTrackedEvent(EntityHuman player, Entity entity) {
-        com.github.ruviolence.reaper.event.player.EntityTrackedEvent event = CraftEventFactory.entityTrackedEvent;
+        EntityTrackedEvent event = CraftEventFactory.entityTrackedEvent;
 
         event.setData((Player) player.getBukkitEntity(), entity.getBukkitEntity());
 
@@ -1247,7 +1257,7 @@ public class CraftEventFactory {
     }
 
     public static void callEntityUntrackedEvent(EntityHuman player, Entity entity) {
-        com.github.ruviolence.reaper.event.player.EntityUntrackedEvent event = CraftEventFactory.entityUntrackedEvent;
+        EntityUntrackedEvent event = CraftEventFactory.entityUntrackedEvent;
 
         event.setData((Player) player.getBukkitEntity(), entity.getBukkitEntity());
 
@@ -1255,7 +1265,7 @@ public class CraftEventFactory {
     }
 
     public static void callServerTickStartEvent(int tickNumber) {
-        com.github.ruviolence.reaper.event.server.ServerTickStartEvent event = CraftEventFactory.serverTickStartEvent;
+        ServerTickStartEvent event = CraftEventFactory.serverTickStartEvent;
 
         event.setData(tickNumber);
 
@@ -1263,7 +1273,7 @@ public class CraftEventFactory {
     }
 
     public static void callServerTickEndEvent(int tickNumber, double tickDuration, long timeEnd) {
-        com.github.ruviolence.reaper.event.server.ServerTickEndEvent event = CraftEventFactory.serverTickEndEvent;
+        ServerTickEndEvent event = CraftEventFactory.serverTickEndEvent;
 
         event.setData(tickNumber, tickDuration, timeEnd);
 
@@ -1271,7 +1281,7 @@ public class CraftEventFactory {
     }
 
     public static void callWorldTickStartEvent(WorldServer world, int tickNumber) {
-        com.github.ruviolence.reaper.event.server.WorldTickStartEvent event = CraftEventFactory.worldTickStartEvent;
+        WorldTickStartEvent event = CraftEventFactory.worldTickStartEvent;
 
         event.setData(world.getWorld(), tickNumber);
 
@@ -1279,15 +1289,15 @@ public class CraftEventFactory {
     }
 
     public static void callWorldTickEndEvent(WorldServer world, int tickNumber, double tickDuration) {
-        com.github.ruviolence.reaper.event.server.WorldTickEndEvent event = CraftEventFactory.worldTickEndEvent;
+        WorldTickEndEvent event = CraftEventFactory.worldTickEndEvent;
 
         event.setData(world.getWorld(), tickNumber, tickDuration);
 
         Bukkit.getPluginManager().callEvent(event);
     }
 
-    public static com.github.ruviolence.reaper.event.world.SoundEvent callSoundEvent(World world, EntityHuman fromEntity, double x, double y, double z, SoundEffect effect, SoundCategory category, float volume, float pitch) {
-        com.github.ruviolence.reaper.event.world.SoundEvent event = CraftEventFactory.soundEvent;
+    public static SoundEvent callSoundEvent(World world, EntityHuman fromEntity, double x, double y, double z, SoundEffect effect, SoundCategory category, float volume, float pitch) {
+        SoundEvent event = CraftEventFactory.soundEvent;
 
         event.setData(
                 world.getWorld(),
@@ -1301,5 +1311,5 @@ public class CraftEventFactory {
 
         return event;
     }
-    // Reaper end
+    // Beast end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/generator/CustomChunkGenerator.java b/src/main/java/org/bukkit/craftbukkit/generator/CustomChunkGenerator.java
index ca651bd2fca6debf322184ca61baacb1c4bd1415..f0dcfdcca558f6aa8b728af9dacdff2aa2fc41ba 100644
--- a/src/main/java/org/bukkit/craftbukkit/generator/CustomChunkGenerator.java
+++ b/src/main/java/org/bukkit/craftbukkit/generator/CustomChunkGenerator.java
@@ -222,12 +222,12 @@ public class CustomChunkGenerator extends InternalChunkGenerator {
 
     @Override
     public boolean a(World world, String type, BlockPosition position) {
-        return "Stronghold".equals(type) && /*this.strongholdGen != null*/true ? this.strongholdGen.b(position) : false; // Reaper - Optimize
+        return "Stronghold".equals(type) && /*this.strongholdGen != null*/true ? this.strongholdGen.b(position) : false; // Beast - Optimize
     }
 
     @Override
     public BlockPosition findNearestMapFeature(World world, String type, BlockPosition position, boolean flag) {
-        return "Stronghold".equals(type) && /*this.strongholdGen != null*/true ? this.strongholdGen.getNearestGeneratedFeature(world, position, flag) : null; // Reaper - Optimize
+        return "Stronghold".equals(type) && /*this.strongholdGen != null*/true ? this.strongholdGen.getNearestGeneratedFeature(world, position, flag) : null; // Beast - Optimize
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/help/CommandAliasHelpTopic.java b/src/main/java/org/bukkit/craftbukkit/help/CommandAliasHelpTopic.java
index a0438e6e1ea6de6bce2ed415d3f4c0050310ba44..6792a96c9dc1e37d2f0bbd1b6c56c12d97b0532f 100644
--- a/src/main/java/org/bukkit/craftbukkit/help/CommandAliasHelpTopic.java
+++ b/src/main/java/org/bukkit/craftbukkit/help/CommandAliasHelpTopic.java
@@ -24,7 +24,7 @@ public class CommandAliasHelpTopic extends HelpTopic {
         StringBuilder sb = new StringBuilder(shortText);
         HelpTopic aliasForTopic = helpMap.getHelpTopic(aliasFor);
         if (aliasForTopic != null) {
-            sb.append('\n'); // Reaper - Optimize
+            sb.append('\n'); // Beast - Optimize
             sb.append(aliasForTopic.getFullText(forWho));
         }
         return sb.toString();
diff --git a/src/main/java/org/bukkit/craftbukkit/help/CustomHelpTopic.java b/src/main/java/org/bukkit/craftbukkit/help/CustomHelpTopic.java
index b28283655efbb23dbcea088ae00a714e6b34f13c..1b5c2ee951d546d726d78c3793c0c874f2dda3de 100644
--- a/src/main/java/org/bukkit/craftbukkit/help/CustomHelpTopic.java
+++ b/src/main/java/org/bukkit/craftbukkit/help/CustomHelpTopic.java
@@ -22,7 +22,7 @@ public class CustomHelpTopic extends HelpTopic {
             return true;
         }
 
-        if (!permissionNode.isEmpty()) { // Reaper - Optimize
+        if (!permissionNode.isEmpty()) { // Beast - Optimize
             return sender.hasPermission(permissionNode);
         } else {
             return true;
diff --git a/src/main/java/org/bukkit/craftbukkit/help/MultipleCommandAliasHelpTopic.java b/src/main/java/org/bukkit/craftbukkit/help/MultipleCommandAliasHelpTopic.java
index c82fe21a549317dc44eef2f60791bd3c87d9a41b..f6a4c344c1b38d02cfc913bf979b8dcdebf7470d 100644
--- a/src/main/java/org/bukkit/craftbukkit/help/MultipleCommandAliasHelpTopic.java
+++ b/src/main/java/org/bukkit/craftbukkit/help/MultipleCommandAliasHelpTopic.java
@@ -25,7 +25,7 @@ public class MultipleCommandAliasHelpTopic extends HelpTopic {
             if (i != 0) {
                 sb.append(ChatColor.GOLD + " > " + ChatColor.WHITE);
             }
-            sb.append('/'); // Reaper - Optimize
+            sb.append('/'); // Beast - Optimize
             sb.append(alias.getCommands()[i].getLabel());
         }
         shortText = sb.toString();
diff --git a/src/main/java/org/bukkit/craftbukkit/help/SimpleHelpMap.java b/src/main/java/org/bukkit/craftbukkit/help/SimpleHelpMap.java
index 5b7f97fda3a6021ff3408643528596c7ed6c693e..e996ced0b9d33b684fc359fc23c686da1c109988 100644
--- a/src/main/java/org/bukkit/craftbukkit/help/SimpleHelpMap.java
+++ b/src/main/java/org/bukkit/craftbukkit/help/SimpleHelpMap.java
@@ -41,7 +41,7 @@ public class SimpleHelpMap implements HelpMap {
     }
 
     public synchronized HelpTopic getHelpTopic(String topicName) {
-        if (topicName.isEmpty()) { // Reaper - Optimize
+        if (topicName.isEmpty()) { // Beast - Optimize
             return defaultTopic;
         }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftEntityEquipment.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftEntityEquipment.java
index bb3c102fe0a2dc1e0862b34bb8b24044a3b0da63..7b62d3cc5e515748fb7d172a990eefe53d3ebaa5 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftEntityEquipment.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftEntityEquipment.java
@@ -104,7 +104,7 @@ public class CraftEntityEquipment implements EntityEquipment {
     }
 
     public void clear() {
-        for (EnumItemSlot slot : EnumItemSlot.VALUES) { // Reaper - Single values array
+        for (EnumItemSlot slot : EnumItemSlot.VALUES) { // Beast - Single values array
             setEquipment(slot, null);
         }
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBanner.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBanner.java
index ba6a40df6f2db2f1fc8970cb7eadc30400695f56..99dac8bef92fd863c504b864cf9a54a732acfb7a 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBanner.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBanner.java
@@ -90,7 +90,7 @@ public class CraftMetaBanner extends CraftMetaItem implements BannerMeta {
         NBTTagList newPatterns = new NBTTagList();
 
         for (Pattern p : patterns) {
-            NBTTagCompound compound = new NBTTagCompound(2); // Reaper - Use initial capacity
+            NBTTagCompound compound = new NBTTagCompound(2); // Beast - Use initial capacity
             compound.setInt(COLOR.NBT, p.getColor().getDyeData());
             compound.setString(PATTERN.NBT, p.getPattern().getIdentifier());
             newPatterns.add(compound);
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBook.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBook.java
index a32b77b85fbb51f5094617bca252a801a901c1e4..4c2322dce77dc203f17e75e9a0fa3ba2834edce0 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBook.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBook.java
@@ -215,7 +215,7 @@ public class CraftMetaBook extends CraftMetaItem implements BookMeta {
 
     @Override
     public Generation getGeneration() {
-        return (generation == null) ? null : Generation.VALUES[generation]; // Reaper - Single values array
+        return (generation == null) ? null : Generation.VALUES[generation]; // Beast - Single values array
     }
 
     @Override
@@ -234,7 +234,7 @@ public class CraftMetaBook extends CraftMetaItem implements BookMeta {
         }
 
         String newText = text == null ? "" : text.length() > MAX_PAGE_LENGTH && !OVERRIDE_CHECKS ? text.substring(0, MAX_PAGE_LENGTH) : text;
-        pages.set(page - 1, CraftChatMessage.fromStringFast(newText, true)[0]); // Reaper
+        pages.set(page - 1, CraftChatMessage.fromStringFast(newText, true)[0]); // Beast
     }
 
     public void setPages(final String... pages) {
@@ -255,7 +255,7 @@ public class CraftMetaBook extends CraftMetaItem implements BookMeta {
                 page = page.substring(0, MAX_PAGE_LENGTH);
             }
 
-            this.pages.add(CraftChatMessage.fromStringFast(page, true)[0]); // Reaper
+            this.pages.add(CraftChatMessage.fromStringFast(page, true)[0]); // Beast
         }
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBookSigned.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBookSigned.java
index f02fa58d9529be2c4231d22398bc8b132b4aea14..5ac56797840ffa2150b3c1fad26e96225e58b515 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBookSigned.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBookSigned.java
@@ -113,7 +113,7 @@ class CraftMetaBookSigned extends CraftMetaBook implements BookMeta {
     int applyHash() {
         final int original;
         int hash = original = super.applyHash();
-        return /*original != hash*/false ? CraftMetaBookSigned.class.hashCode() ^ hash : hash; // Reaper - Optimize
+        return /*original != hash*/false ? CraftMetaBookSigned.class.hashCode() ^ hash : hash; // Beast - Optimize
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
index 50858abf13c1a53a4c45deb7ee28ffc76371e44d..604dde8423a6f2e7e8073d8f6e750ba39f41a0ca 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
@@ -268,11 +268,11 @@ class CraftMetaItem implements ItemMeta, Repairable {
     }
 
     CraftMetaItem(NBTTagCompound tag) {
-        // Reaper start - Optimize
+        // Beast start - Optimize
         NBTTagCompound display = tag.getCompoundNullable(DISPLAY.NBT);
         if (display != null) {
             // NBTTagCompound display = tag.getCompound(DISPLAY.NBT);
-            // Reaper end
+            // Beast end
 
             if (display.hasKey(NAME.NBT)) {
                 displayName = limit( display.getString(NAME.NBT), 1024 ); // Spigot
@@ -428,12 +428,12 @@ class CraftMetaItem implements ItemMeta, Repairable {
             // Spigot end
 
             for (int i = 0; i < nbttaglist.size(); ++i) {
-                // Reaper start - Optimize
+                // Beast start - Optimize
                 NBTTagCompound nbttagcompound = (NBTTagCompound) nbttaglist.get(i);
                 if (nbttagcompound == null) {
                     continue;
                 }
-                // Reaper end
+                // Beast end
 
                 if (!nbttagcompound.hasKeyOfType(ATTRIBUTES_UUID_HIGH.NBT, CraftMagicNumbers.NBT.TAG_ANY_NUMBER)) {
                     continue;
@@ -480,14 +480,14 @@ class CraftMetaItem implements ItemMeta, Repairable {
     }
 
     static EnchantmentMap buildEnchantments(NBTTagCompound tag, ItemMetaKey key) { // Paper
-        // Reaper start - Optimize
+        // Beast start - Optimize
         NBTTagList ench = tag.getListNullable(key.NBT, CraftMagicNumbers.NBT.TAG_COMPOUND);
         if (ench == null) {
             return null;
         }
 
         // NBTTagList ench = tag.getList(key.NBT, CraftMagicNumbers.NBT.TAG_COMPOUND);
-        // Reaper end
+        // Beast end
         EnchantmentMap enchantments = new EnchantmentMap(); // Paper
 
         for (int i = 0; i < ench.size(); i++) {
@@ -769,7 +769,7 @@ class CraftMetaItem implements ItemMeta, Repairable {
     public Set<ItemFlag> getItemFlags() {
         Set<ItemFlag> currentFlags = EnumSet.noneOf(ItemFlag.class);
 
-        for (ItemFlag f : ItemFlag.VALUES) { // Reaper - Single values array
+        for (ItemFlag f : ItemFlag.VALUES) { // Beast - Single values array
             if (hasItemFlag(f)) {
                 currentFlags.add(f);
             }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaKnowledgeBook.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaKnowledgeBook.java
index e8f06f20da203db5151f49ce4aa0ea649fe64a1b..cd181dba464bb8beaabe7e5fb2ef106e1dd531ce 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaKnowledgeBook.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaKnowledgeBook.java
@@ -116,7 +116,7 @@ public class CraftMetaKnowledgeBook extends CraftMetaItem implements KnowledgeBo
     @Override
     public void setRecipes(List<NamespacedKey> recipes) {
         this.recipes.clear();
-        for (NamespacedKey recipe : recipes) { // Reaper - Fix Bukkit API
+        for (NamespacedKey recipe : recipes) { // Beast - Fix Bukkit API
             addRecipe(recipe);
         }
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftShapedRecipe.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftShapedRecipe.java
index 62bc9df09b4842bc0195e7315208260c194c6d27..3a1ce2367b7ec0b910d9e8991bb06d2f3cf53d92 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftShapedRecipe.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftShapedRecipe.java
@@ -33,10 +33,10 @@ public class CraftShapedRecipe extends ShapedRecipe implements CraftRecipe {
         String[] shape = recipe.getShape();
         ret.shape(shape);
         Map<Character, ItemStack> ingredientMap = recipe.getIngredientMap();
-        for (Map.Entry<Character, ItemStack> entry : ingredientMap.entrySet()) { // Reaper - Optimize
-            ItemStack stack = entry.getValue(); // Reaper - Optimize
+        for (Map.Entry<Character, ItemStack> entry : ingredientMap.entrySet()) { // Beast - Optimize
+            ItemStack stack = entry.getValue(); // Beast - Optimize
             if (stack != null) {
-                ret.setIngredient(entry.getKey(), stack.getType(), stack.getDurability()); // Reaper - Optimize
+                ret.setIngredient(entry.getKey(), stack.getType(), stack.getDurability()); // Beast - Optimize
             }
         }
         return ret;
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/InventoryWrapper.java b/src/main/java/org/bukkit/craftbukkit/inventory/InventoryWrapper.java
index f834a41692a22628b5b9a34364ca5b81733952bf..0b9acbe10a64713891f944a257d4123a09b8d41e 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/InventoryWrapper.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/InventoryWrapper.java
@@ -171,7 +171,7 @@ public class InventoryWrapper implements IInventory {
 
     @Override
     public IChatBaseComponent getScoreboardDisplayName() {
-        return CraftChatMessage.fromStringFast(getName())[0]; // Reaper
+        return CraftChatMessage.fromStringFast(getName())[0]; // Beast
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/map/CraftMapRenderer.java b/src/main/java/org/bukkit/craftbukkit/map/CraftMapRenderer.java
index 28b14ed8151d254a22dfbf413c68c953dc34b85c..e4ceb81a6816c4d873a8ad075401ee2d1568a78b 100644
--- a/src/main/java/org/bukkit/craftbukkit/map/CraftMapRenderer.java
+++ b/src/main/java/org/bukkit/craftbukkit/map/CraftMapRenderer.java
@@ -35,14 +35,14 @@ public class CraftMapRenderer extends MapRenderer {
             cursors.removeCursor(cursors.getCursor(0));
         }
 
-        for (java.util.Map.Entry<UUID, MapIcon> entry : worldMap.decorations.entrySet()) { // Spigot string -> uuid. // Reaper - Optimize
+        for (java.util.Map.Entry<UUID, MapIcon> entry : worldMap.decorations.entrySet()) { // Spigot string -> uuid. // Beast - Optimize
             // If this cursor is for a player check visibility with vanish system
-            Player other = Bukkit.getPlayer(entry.getKey()); // Spigot // Reaper - Optimize
+            Player other = Bukkit.getPlayer(entry.getKey()); // Spigot // Beast - Optimize
             if (other != null && !player.canSee(other)) {
                 continue;
             }
 
-            MapIcon decoration = entry.getValue(); // Reaper - Optimize
+            MapIcon decoration = entry.getValue(); // Beast - Optimize
             cursors.addCursor(decoration.getX(), decoration.getY(), (byte) (decoration.getRotation() & 15), decoration.getType());
         }
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/map/CraftMapView.java b/src/main/java/org/bukkit/craftbukkit/map/CraftMapView.java
index 372b13ed25e3604c0f1ec98af0460e78a513c2ec..95a3a8007d74bd9a87f58f429e6537f434c6c538 100644
--- a/src/main/java/org/bukkit/craftbukkit/map/CraftMapView.java
+++ b/src/main/java/org/bukkit/craftbukkit/map/CraftMapView.java
@@ -129,7 +129,7 @@ public final class CraftMapView implements MapView {
             renderCache.put(context ? player : null, render);
         }
 
-        if (context /*&& renderCache.containsKey(null)*/) { // Reaper - Optimize
+        if (context /*&& renderCache.containsKey(null)*/) { // Beast - Optimize
             renderCache.remove(null);
         }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/metadata/EntityMetadataStore.java b/src/main/java/org/bukkit/craftbukkit/metadata/EntityMetadataStore.java
index 64abb5b555b2a4ecbe8fc7556df1c6b14e0a3557..d6ff233477fcb227a357f26cd59469f75581b3c7 100644
--- a/src/main/java/org/bukkit/craftbukkit/metadata/EntityMetadataStore.java
+++ b/src/main/java/org/bukkit/craftbukkit/metadata/EntityMetadataStore.java
@@ -18,6 +18,6 @@ public class EntityMetadataStore extends MetadataStoreBase<Entity> implements Me
      */
     @Override
     protected String disambiguate(Entity entity, String metadataKey) {
-        return com.eatthepath.uuid.FastUUID.toString(entity.getUniqueId()) + ":" + metadataKey; // Reaper - Use FastUUID
+        return com.eatthepath.uuid.FastUUID.toString(entity.getUniqueId()) + ":" + metadataKey; // Beast - Use FastUUID
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/metadata/PlayerMetadataStore.java b/src/main/java/org/bukkit/craftbukkit/metadata/PlayerMetadataStore.java
index 64caed64aea748b061b22ae16a5ae36818a279d7..293e6c0da9f6b09a79635f7fa72eb2cfdfaa0b1e 100644
--- a/src/main/java/org/bukkit/craftbukkit/metadata/PlayerMetadataStore.java
+++ b/src/main/java/org/bukkit/craftbukkit/metadata/PlayerMetadataStore.java
@@ -18,6 +18,6 @@ public class PlayerMetadataStore extends MetadataStoreBase<OfflinePlayer> implem
      */
     @Override
     protected String disambiguate(OfflinePlayer player, String metadataKey) {
-        return com.eatthepath.uuid.FastUUID.toString(player.getUniqueId()) + ":" + metadataKey; // Reaper - Use FastUUID
+        return com.eatthepath.uuid.FastUUID.toString(player.getUniqueId()) + ":" + metadataKey; // Beast - Use FastUUID
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/metadata/WorldMetadataStore.java b/src/main/java/org/bukkit/craftbukkit/metadata/WorldMetadataStore.java
index 9a99579d134e2fbd749d7e4ebe848af5306ad8d0..1859c9b468efd0e567cd7aff246198e85ba8df67 100644
--- a/src/main/java/org/bukkit/craftbukkit/metadata/WorldMetadataStore.java
+++ b/src/main/java/org/bukkit/craftbukkit/metadata/WorldMetadataStore.java
@@ -17,6 +17,6 @@ public class WorldMetadataStore extends MetadataStoreBase<World> implements Meta
      */
     @Override
     protected String disambiguate(World world, String metadataKey) {
-        return com.eatthepath.uuid.FastUUID.toString(world.getUID()) + ":" + metadataKey; // Reaper - Use FastUUID
+        return com.eatthepath.uuid.FastUUID.toString(world.getUID()) + ":" + metadataKey; // Beast - Use FastUUID
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/potion/CraftPotionBrewer.java b/src/main/java/org/bukkit/craftbukkit/potion/CraftPotionBrewer.java
index c3fc3c92fb13eca4c0d3edc373fbe49da91bc073..8b22478dd754bab9b62cc15510810b29b32e7989 100644
--- a/src/main/java/org/bukkit/craftbukkit/potion/CraftPotionBrewer.java
+++ b/src/main/java/org/bukkit/craftbukkit/potion/CraftPotionBrewer.java
@@ -18,13 +18,13 @@ import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Maps;
 
 public class CraftPotionBrewer implements PotionBrewer {
-    private static final Map<PotionType, Collection<PotionEffect>> cache = new java.util.EnumMap<>(PotionType.class); // Reaper - Optimize
+    private static final Map<PotionType, Collection<PotionEffect>> cache = new java.util.EnumMap<>(PotionType.class); // Beast - Optimize
 
     public Collection<PotionEffect> getEffects(PotionType damage, boolean upgraded, boolean extended) {
-        // Reaper start - Optimize map get
+        // Beast start - Optimize map get
         Collection<PotionEffect> potionEffects = cache.get(damage);
         if (potionEffects != null) return potionEffects;
-        // Reaper end
+        // Beast end
 
         List<MobEffect> mcEffects = PotionRegistry.a(CraftPotionUtil.fromBukkit(new PotionData(damage, extended, upgraded))).a();
 
diff --git a/src/main/java/org/bukkit/craftbukkit/projectiles/CraftBlockProjectileSource.java b/src/main/java/org/bukkit/craftbukkit/projectiles/CraftBlockProjectileSource.java
index 180907afa1eae53560ea58f6cacfc5c026594abe..1b8d7d4a19f2f5de1d206bdda55834641cd2ba8d 100644
--- a/src/main/java/org/bukkit/craftbukkit/projectiles/CraftBlockProjectileSource.java
+++ b/src/main/java/org/bukkit/craftbukkit/projectiles/CraftBlockProjectileSource.java
@@ -142,7 +142,7 @@ public class CraftBlockProjectileSource implements BlockProjectileSource {
             // Values from DispenseBehaviorProjectile
             float a = 6.0F;
             float b = 1.1F;
-            if (launch instanceof EntityPotion || /*launch instanceof ThrownExpBottle*/false) { // Reaper - Optimize
+            if (launch instanceof EntityPotion || /*launch instanceof ThrownExpBottle*/false) { // Beast - Optimize
                 // Values from respective DispenseBehavior classes
                 a *= 0.5F;
                 b *= 1.25F;
diff --git a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftAsyncScheduler.java b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftAsyncScheduler.java
index 06fbebbb4b4e7789e50e348304e5e311f3b8d7a4..af7f15d7b7b75d34e9fc5b89c4b6a3488f7ae5fc 100644
--- a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftAsyncScheduler.java
+++ b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftAsyncScheduler.java
@@ -25,6 +25,7 @@ package org.bukkit.craftbukkit.scheduler;
 
 import com.destroystokyo.paper.ServerSchedulerReportingWrapper;
 import com.google.common.util.concurrent.ThreadFactoryBuilder;
+import com.homomc.beast.BeastConfig;
 import com.homomc.beast.virtualthreads.VirtualThreadService;
 import org.bukkit.plugin.Plugin;
 
@@ -43,7 +44,7 @@ public class CraftAsyncScheduler extends CraftScheduler {
 
     CraftAsyncScheduler() {
         super(true);
-        if (VirtualThreadService.getJavaMajorVersion() >= VirtualThreadService.minimumJavaMajorVersionWithoutFeaturePreview && com.github.ruviolence.reaper.BeastConfig.virtualThreadForScheduler) {
+        if (VirtualThreadService.getJavaMajorVersion() >= VirtualThreadService.minimumJavaMajorVersionWithoutFeaturePreview && BeastConfig.virtualThreadForScheduler) {
             try {
                 Method newThreadPerTaskExecutor = Executors.class.getMethod("newThreadPerTaskExecutor", ThreadFactory.class);
                 executor = (Executor) newThreadPerTaskExecutor.invoke(null, VirtualThreadService.get().createFactory());
diff --git a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftTeam.java b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftTeam.java
index 449f2b8289190153b987a38b7f76b34f00cb6b66..9b9763e36b1ac86945fdee48d4cd1c8e55fb1025 100644
--- a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftTeam.java
+++ b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftTeam.java
@@ -186,7 +186,7 @@ final class CraftTeam extends CraftScoreboardComponent implements Team {
     }
 
     public boolean hasEntry(String entry) throws IllegalArgumentException, IllegalStateException {
-        // Validate.notNull("Entry cannot be null"); // Reaper - Optimize
+        // Validate.notNull("Entry cannot be null"); // Beast - Optimize
 
         CraftScoreboard scoreboard = checkState();
 
@@ -206,11 +206,11 @@ final class CraftTeam extends CraftScoreboardComponent implements Team {
 
         switch (option) {
             case NAME_TAG_VISIBILITY:
-                return OptionStatus.VALUES[team.getNameTagVisibility().ordinal()]; // Reaper - Single values array
+                return OptionStatus.VALUES[team.getNameTagVisibility().ordinal()]; // Beast - Single values array
             case DEATH_MESSAGE_VISIBILITY:
-                return OptionStatus.VALUES[team.getDeathMessageVisibility().ordinal()]; // Reaper - Single values array
+                return OptionStatus.VALUES[team.getDeathMessageVisibility().ordinal()]; // Beast - Single values array
             case COLLISION_RULE:
-                return OptionStatus.VALUES[team.getCollisionRule().ordinal()]; // Reaper - Single values array
+                return OptionStatus.VALUES[team.getCollisionRule().ordinal()]; // Beast - Single values array
             default:
                 throw new IllegalArgumentException("Unrecognised option " + option);
         }
@@ -222,13 +222,13 @@ final class CraftTeam extends CraftScoreboardComponent implements Team {
 
         switch (option) {
             case NAME_TAG_VISIBILITY:
-                team.setNameTagVisibility(EnumNameTagVisibility.VALUES[status.ordinal()]); // Reaper - Single values array
+                team.setNameTagVisibility(EnumNameTagVisibility.VALUES[status.ordinal()]); // Beast - Single values array
                 break;
             case DEATH_MESSAGE_VISIBILITY:
-                team.setDeathMessageVisibility(EnumNameTagVisibility.VALUES[status.ordinal()]); // Reaper - Single values array
+                team.setDeathMessageVisibility(EnumNameTagVisibility.VALUES[status.ordinal()]); // Beast - Single values array
                 break;
             case COLLISION_RULE:
-                team.setCollisionRule(ScoreboardTeamBase.EnumTeamPush.VALUES[status.ordinal()]); // Reaper - Single values array
+                team.setCollisionRule(ScoreboardTeamBase.EnumTeamPush.VALUES[status.ordinal()]); // Beast - Single values array
                 break;
             default:
                 throw new IllegalArgumentException("Unrecognised option " + option);
diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftChatMessage.java b/src/main/java/org/bukkit/craftbukkit/util/CraftChatMessage.java
index dfbea10032ed70d828ebbeacb214a067629e2d36..13f6e9ac626e06a61b2b87834681f4bfcbc55dac 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/CraftChatMessage.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftChatMessage.java
@@ -6,7 +6,7 @@ import java.util.Map;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
-import com.github.ruviolence.reaper.BeastConfig;
+import com.homomc.beast.BeastConfig;
 import net.minecraft.server.ChatClickable;
 import net.minecraft.server.ChatComponentText;
 import net.minecraft.server.ChatModifier;
@@ -21,7 +21,7 @@ import org.bukkit.ChatColor;
 
 public final class CraftChatMessage {
 
-    private static final Pattern LINK_PATTERN = Pattern.compile("((?:(?:https?):\\/\\/)?(?:[-\\w_\\.]{2,}\\.[a-z]{2,4}.*?(?=[\\.\\?!,;:]?(?:[" + ChatColor.COLOR_CHAR + " \\n]|$))))"); // Reaper - Optimize
+    private static final Pattern LINK_PATTERN = Pattern.compile("((?:(?:https?):\\/\\/)?(?:[-\\w_\\.]{2,}\\.[a-z]{2,4}.*?(?=[\\.\\?!,;:]?(?:[" + ChatColor.COLOR_CHAR + " \\n]|$))))"); // Beast - Optimize
     private static final Map<Character, EnumChatFormat> formatMap;
 
     static {
@@ -41,7 +41,7 @@ public final class CraftChatMessage {
     }
 
     private static class StringMessage {
-        private static final Pattern INCREMENTAL_PATTERN = Pattern.compile("(" + ChatColor.COLOR_CHAR + "[0-9a-fk-or])|(\\n)|((?:(?:https?):\\/\\/)?(?:[-\\w_\\.]{2,}\\.[a-z]{2,4}.*?(?=[\\.\\?!,;:]?(?:[" + ChatColor.COLOR_CHAR + " \\n]|$))))", Pattern.CASE_INSENSITIVE); // Reaper - Optimize
+        private static final Pattern INCREMENTAL_PATTERN = Pattern.compile("(" + ChatColor.COLOR_CHAR + "[0-9a-fk-or])|(\\n)|((?:(?:https?):\\/\\/)?(?:[-\\w_\\.]{2,}\\.[a-z]{2,4}.*?(?=[\\.\\?!,;:]?(?:[" + ChatColor.COLOR_CHAR + " \\n]|$))))", Pattern.CASE_INSENSITIVE); // Beast - Optimize
 
         private final List<IChatBaseComponent> list = new ArrayList<IChatBaseComponent>();
         private IChatBaseComponent currentChatComponent = new ChatComponentText("");
@@ -70,7 +70,7 @@ public final class CraftChatMessage {
                 case 1:
                     EnumChatFormat format = formatMap.get(match.toLowerCase(java.util.Locale.ENGLISH).charAt(1));
                     if (format == EnumChatFormat.RESET) {
-                        modifier.reset(); // Reaper
+                        modifier.reset(); // Beast
                     } else if (format.isFormat()) {
                         switch (format) {
                         case BOLD:
@@ -92,10 +92,10 @@ public final class CraftChatMessage {
                             throw new AssertionError("Unexpected message format");
                         }
                     } else { // Color resets formatting
-                        // Reaper start
+                        // Beast start
                         modifier.reset();
                         modifier.setColor(format);
-                        // Reaper end
+                        // Beast end
                     }
                     break;
                 case 2:
@@ -127,9 +127,9 @@ public final class CraftChatMessage {
             if (index <= currentIndex) {
                 return;
             }
-            IChatBaseComponent addition = new ChatComponentText(message.substring(currentIndex, index)).setChatModifier(modifier.clone()); // Reaper
+            IChatBaseComponent addition = new ChatComponentText(message.substring(currentIndex, index)).setChatModifier(modifier.clone()); // Beast
             currentIndex = index;
-            // modifier = modifier.clone(); // Reaper
+            // modifier = modifier.clone(); // Beast
             if (currentChatComponent == null) {
                 currentChatComponent = new ChatComponentText("");
                 list.add(currentChatComponent);
@@ -143,16 +143,16 @@ public final class CraftChatMessage {
     }
 
     public static IChatBaseComponent[] fromString(String message) {
-        if (BeastConfig.alternativeChatComponentParser) return fromStringFast(message, false); // Reaper
+        if (BeastConfig.alternativeChatComponentParser) return fromStringFast(message, false); // Beast
         return fromString(message, false);
     }
     
     public static IChatBaseComponent[] fromString(String message, boolean keepNewlines) {
-        if (BeastConfig.alternativeChatComponentParser) return fromStringFast(message, keepNewlines); // Reaper
+        if (BeastConfig.alternativeChatComponentParser) return fromStringFast(message, keepNewlines); // Beast
         return new StringMessage(message, keepNewlines).getOutput();
     }
     
-    // Reaper start
+    // Beast start
     public static IChatBaseComponent[] fromStringFast(String message) {
         return fromStringFast(message, false);
     }
@@ -313,7 +313,7 @@ public final class CraftChatMessage {
             default: return null;
         }
     }
-    // Reaper end
+    // Beast end
 
     public static String fromComponent(IChatBaseComponent component) {
         return fromComponent(component, EnumChatFormat.BLACK);
@@ -325,11 +325,11 @@ public final class CraftChatMessage {
         
         for (IChatBaseComponent c : (Iterable<IChatBaseComponent>) component) {
             ChatModifier modi = c.getChatModifier();
-            // Reaper start
+            // Beast start
             if (modi.getColor() != null && (out.length() > 0 || modi.getColor() != defaultColor)) {
                 out.append(modi.getColor());
             }
-            // Reaper end
+            // Beast end
             if (modi.isBold()) {
                 out.append(EnumChatFormat.BOLD);
             }
@@ -347,7 +347,7 @@ public final class CraftChatMessage {
             }
             out.append(c.getText());
         }
-        return out.toString(); // Reaper
+        return out.toString(); // Beast
     }
 
     public static IChatBaseComponent fixComponent(IChatBaseComponent component) {
diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
index f5c506f05489f66a27ab8e05554c7b2e3f5a1150..a4f3a7b65ecbabb58a4f0b6ec4c0f79856669452 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
@@ -101,7 +101,7 @@ public final class CraftMagicNumbers implements UnsafeValues {
         // TODO: Don't use ID
         Block block = Block.getById(material.getId());
 
-        if (/*block == null*/false) { // Reaper - Optimize
+        if (/*block == null*/false) { // Beast - Optimize
             return Blocks.AIR;
         }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/util/HashTreeSet.java b/src/main/java/org/bukkit/craftbukkit/util/HashTreeSet.java
index 4a7120b83a93cbcf400780354722c5d5995c74b3..5a9db791b4932496f287d413136c2525b60e0151 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/HashTreeSet.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/HashTreeSet.java
@@ -114,5 +114,5 @@ public class HashTreeSet<V> implements Set<V> {
         return tree.first();
     }
 
-    public void fixInconsistence() { hash.removeIf(entry -> !tree.contains(entry)); } // Reaper - Fix TileEntity ticking crash
+    public void fixInconsistence() { hash.removeIf(entry -> !tree.contains(entry)); } // Beast - Fix TileEntity ticking crash
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/util/MojangNameLookup.java b/src/main/java/org/bukkit/craftbukkit/util/MojangNameLookup.java
index 49c742f99537ad16265c27cc195c3aa9cce8aba5..03232bc01805fe38ceef79de718d1ec82f355517 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/MojangNameLookup.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/MojangNameLookup.java
@@ -23,7 +23,7 @@ public class MojangNameLookup {
 
         InputStream inputStream = null;
         try {
-            URL url = new URL("https://sessionserver.mojang.com/session/minecraft/profile/" + org.apache.commons.lang3.StringUtils.remove(com.eatthepath.uuid.FastUUID.toString(id), '-')); // Reaper - Optimize // Reaper - Use FastUUID
+            URL url = new URL("https://sessionserver.mojang.com/session/minecraft/profile/" + org.apache.commons.lang3.StringUtils.remove(com.eatthepath.uuid.FastUUID.toString(id), '-')); // Beast - Optimize // Beast - Use FastUUID
             URLConnection connection = url.openConnection();
             connection.setConnectTimeout(15000);
             connection.setReadTimeout(15000);
diff --git a/src/main/java/org/bukkit/craftbukkit/util/ShortConsoleLogFormatter.java b/src/main/java/org/bukkit/craftbukkit/util/ShortConsoleLogFormatter.java
index 2d7ddd5b68b34db4613a7142293e6c2dc5d2a889..ac39c21f72256d122c46e4f1d4dbcf4dd4fa8d97 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/ShortConsoleLogFormatter.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/ShortConsoleLogFormatter.java
@@ -20,7 +20,7 @@ public class ShortConsoleLogFormatter extends Formatter {
             try {
                 Object object = options.valueOf("date-format");
 
-                if (object instanceof SimpleDateFormat) { // Reaper - Optimize
+                if (object instanceof SimpleDateFormat) { // Beast - Optimize
                     date = (SimpleDateFormat) object;
                 }
             } catch (OptionException ex) {
diff --git a/src/main/java/org/bukkit/craftbukkit/util/WeakCollection.java b/src/main/java/org/bukkit/craftbukkit/util/WeakCollection.java
index 420f784fef10ecac775a13f067dae427b65b7150..0ad5a5e6ada29640b450e6c6cdee440fa97d48f1 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/WeakCollection.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/WeakCollection.java
@@ -160,6 +160,6 @@ public final class WeakCollection<T> implements Collection<T> {
     }
 
     private Collection<T> toCollection() {
-        return new ArrayList<T>(this); // Reaper - Optimize
+        return new ArrayList<T>(this); // Beast - Optimize
     }
 }
diff --git a/src/main/java/org/spigotmc/CaseInsensitiveHashingStrategy.java b/src/main/java/org/spigotmc/CaseInsensitiveHashingStrategy.java
index bf5f53947a4e01bb82c833891f939854ae978bbd..386eb60267b734568d8a91f8fc6cd883c0b6e3c4 100644
--- a/src/main/java/org/spigotmc/CaseInsensitiveHashingStrategy.java
+++ b/src/main/java/org/spigotmc/CaseInsensitiveHashingStrategy.java
@@ -13,6 +13,6 @@ class CaseInsensitiveHashingStrategy implements HashingStrategy {
 
     @Override
     public boolean equals(Object o1, Object o2) {
-        return o1.equals(o2) || (o1 instanceof String && o2 instanceof String && ((String) o1).equalsIgnoreCase(((String) o2))); // Reaper - Optimize
+        return o1.equals(o2) || (o1 instanceof String && o2 instanceof String && ((String) o1).equalsIgnoreCase(((String) o2))); // Beast - Optimize
     }
 }
diff --git a/src/main/java/org/spigotmc/SpigotCommand.java b/src/main/java/org/spigotmc/SpigotCommand.java
index f0730d03fca2a21157eb75b8e6904fac3c963892..941dee5b674f07937904b6ace3d95bde7a073546 100644
--- a/src/main/java/org/spigotmc/SpigotCommand.java
+++ b/src/main/java/org/spigotmc/SpigotCommand.java
@@ -1,6 +1,8 @@
 package org.spigotmc;
 
 import java.io.File;
+
+import com.homomc.beast.WorldConfigCache;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.WorldServer;
 import org.bukkit.ChatColor;
@@ -34,7 +36,7 @@ public class SpigotCommand extends Command {
             for (WorldServer world : console.worlds) {
                 world.spigotConfig.init();
             }
-            com.github.ruviolence.reaper.WorldConfigCache.dropCache(); // Reaper - Cache world configs
+            WorldConfigCache.dropCache(); // Beast - Cache world configs
             console.server.reloadCount++;
 
             Command.broadcastCommandMessage(sender, ChatColor.GREEN + "Reload complete.");
diff --git a/src/main/java/org/spigotmc/SpigotWorldConfig.java b/src/main/java/org/spigotmc/SpigotWorldConfig.java
index bbaf575bbb453dcb4b94164d6b33e01a9a457655..a44dc86e85eccd98996ae00fdb114a30e0e60670 100644
--- a/src/main/java/org/spigotmc/SpigotWorldConfig.java
+++ b/src/main/java/org/spigotmc/SpigotWorldConfig.java
@@ -2,7 +2,7 @@ package org.spigotmc;
 
 import java.util.List;
 
-import com.github.ruviolence.reaper.BeastConfig;
+import com.homomc.beast.BeastConfig;
 import org.bukkit.Bukkit;
 import org.bukkit.configuration.file.YamlConfiguration;
 
@@ -285,7 +285,7 @@ public class SpigotWorldConfig
         swimMultiplier =  (float) getDouble( "hunger.swim-multiplier", 0.01 );
         sprintMultiplier = (float) getDouble( "hunger.sprint-multiplier", 0.1 );
         otherMultiplier = (float) getDouble( "hunger.other-multiplier", 0.0 );
-        // Reaper start - Old combat
+        // Beast start - Old combat
         if (BeastConfig.oldCombatRegen) {
             jumpWalkExhaustion = 0.2F;
             jumpSprintExhaustion = 0.8F;
@@ -295,7 +295,7 @@ public class SpigotWorldConfig
             sprintMultiplier = 0.099999994F;
             otherMultiplier = 0.1F;
         }
-        // Reaper end
+        // Beast end
     }
 
     public int currentPrimedTnt = 0;
diff --git a/src/main/java/org/spigotmc/TicksPerSecondCommand.java b/src/main/java/org/spigotmc/TicksPerSecondCommand.java
index 53e330a6a1edf62b006b567081849acdbceccec3..2810cc09a23b7a4b3d86c54ae5560d9305ba933b 100644
--- a/src/main/java/org/spigotmc/TicksPerSecondCommand.java
+++ b/src/main/java/org/spigotmc/TicksPerSecondCommand.java
@@ -39,6 +39,6 @@ public class TicksPerSecondCommand extends Command
     private static String format(double tps) // Paper - Made static
     {
         return ( ( tps > 18.0 ) ? ChatColor.GREEN : ( tps > 16.0 ) ? ChatColor.YELLOW : ChatColor.RED ).toString()
-                + ( ( tps > 21.0 ) ? "*" : "" ) + Math.min( Math.round( tps * 100.0 ) / 100.0, 20.0 ); // Reaper - Only print * at 21, we commonly peak to 20.02 as the tick sleep is not accurate enough, stop the noise
+                + ( ( tps > 21.0 ) ? "*" : "" ) + Math.min( Math.round( tps * 100.0 ) / 100.0, 20.0 ); // Beast - Only print * at 21, we commonly peak to 20.02 as the tick sleep is not accurate enough, stop the noise
     }
 }
